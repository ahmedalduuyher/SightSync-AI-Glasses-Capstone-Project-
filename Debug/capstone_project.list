
capstone_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032d8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000022a4  08003398  08003398  00004398  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800563c  0800563c  00007088  2**0
                  CONTENTS
  4 .ARM          00000000  0800563c  0800563c  00007088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800563c  0800563c  00007088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800563c  0800563c  0000663c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005640  08005640  00006640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08005644  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  20000088  080056cc  00007088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  080056cc  0000734c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011cdb  00000000  00000000  000070b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cc5  00000000  00000000  00018d8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b58  00000000  00000000  0001ba50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b44  00000000  00000000  0001c5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a7ae  00000000  00000000  0001d0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015354  00000000  00000000  0003789a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009175f  00000000  00000000  0004cbee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de34d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002484  00000000  00000000  000de390  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00006711  00000000  00000000  000e0814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  000e6f25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000088 	.word	0x20000088
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003380 	.word	0x08003380

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000008c 	.word	0x2000008c
 8000104:	08003380 	.word	0x08003380

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			@ (mov r8, r8)

0800011c <__gnu_thumb1_case_shi>:
 800011c:	b403      	push	{r0, r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0040      	lsls	r0, r0, #1
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	5e09      	ldrsh	r1, [r1, r0]
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	448e      	add	lr, r1
 800012c:	bc03      	pop	{r0, r1}
 800012e:	4770      	bx	lr

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	@ 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			@ (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			@ (mov r8, r8)

08000248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000248:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024a:	2410      	movs	r4, #16
{
 800024c:	b098      	sub	sp, #96	@ 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024e:	2230      	movs	r2, #48	@ 0x30
 8000250:	2100      	movs	r1, #0
 8000252:	a80c      	add	r0, sp, #48	@ 0x30
 8000254:	f002 fba4 	bl	80029a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000258:	0022      	movs	r2, r4
 800025a:	2100      	movs	r1, #0
 800025c:	a801      	add	r0, sp, #4
 800025e:	f002 fb9f 	bl	80029a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000262:	2100      	movs	r1, #0
 8000264:	2218      	movs	r2, #24
 8000266:	a805      	add	r0, sp, #20
 8000268:	f002 fb9a 	bl	80029a0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800026c:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026e:	a80b      	add	r0, sp, #44	@ 0x2c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000270:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000272:	3b01      	subs	r3, #1
 8000274:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000276:	940f      	str	r4, [sp, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000278:	f001 fa02 	bl	8001680 <HAL_RCC_OscConfig>
 800027c:	1e01      	subs	r1, r0, #0
 800027e:	d001      	beq.n	8000284 <SystemClock_Config+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000280:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000282:	e7fe      	b.n	8000282 <SystemClock_Config+0x3a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000284:	2307      	movs	r3, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000286:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000288:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800028a:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800028c:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028e:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000290:	f001 fc7c 	bl	8001b8c <HAL_RCC_ClockConfig>
 8000294:	2800      	cmp	r0, #0
 8000296:	d001      	beq.n	800029c <SystemClock_Config+0x54>
 8000298:	b672      	cpsid	i
  while (1)
 800029a:	e7fe      	b.n	800029a <SystemClock_Config+0x52>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800029c:	2320      	movs	r3, #32
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800029e:	9008      	str	r0, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a0:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80002a2:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a4:	f001 fd0c 	bl	8001cc0 <HAL_RCCEx_PeriphCLKConfig>
 80002a8:	2800      	cmp	r0, #0
 80002aa:	d001      	beq.n	80002b0 <SystemClock_Config+0x68>
 80002ac:	b672      	cpsid	i
  while (1)
 80002ae:	e7fe      	b.n	80002ae <SystemClock_Config+0x66>
}
 80002b0:	b018      	add	sp, #96	@ 0x60
 80002b2:	bd10      	pop	{r4, pc}

080002b4 <main>:
{
 80002b4:	b530      	push	{r4, r5, lr}
 80002b6:	b089      	sub	sp, #36	@ 0x24
  HAL_Init();
 80002b8:	f001 f8b2 	bl	8001420 <HAL_Init>
  SystemClock_Config();
 80002bc:	f7ff ffc4 	bl	8000248 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002c0:	2214      	movs	r2, #20
 80002c2:	2100      	movs	r1, #0
 80002c4:	a803      	add	r0, sp, #12
 80002c6:	f002 fb6b 	bl	80029a0 <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002ca:	2180      	movs	r1, #128	@ 0x80
 80002cc:	4b41      	ldr	r3, [pc, #260]	@ (80003d4 <main+0x120>)
 80002ce:	03c9      	lsls	r1, r1, #15
 80002d0:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80002d2:	4841      	ldr	r0, [pc, #260]	@ (80003d8 <main+0x124>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002d4:	430a      	orrs	r2, r1
 80002d6:	615a      	str	r2, [r3, #20]
 80002d8:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002da:	2400      	movs	r4, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002dc:	400a      	ands	r2, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002de:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002e0:	9200      	str	r2, [sp, #0]
 80002e2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e4:	695a      	ldr	r2, [r3, #20]
 80002e6:	0289      	lsls	r1, r1, #10
 80002e8:	430a      	orrs	r2, r1
 80002ea:	615a      	str	r2, [r3, #20]
 80002ec:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ee:	2501      	movs	r5, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f0:	400a      	ands	r2, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002f2:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f4:	9201      	str	r2, [sp, #4]
 80002f6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002f8:	695a      	ldr	r2, [r3, #20]
 80002fa:	02c9      	lsls	r1, r1, #11
 80002fc:	430a      	orrs	r2, r1
 80002fe:	615a      	str	r2, [r3, #20]
 8000300:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000302:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000304:	400b      	ands	r3, r1
 8000306:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000308:	211b      	movs	r1, #27
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800030a:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 800030c:	f001 f9b2 	bl	8001674 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8000310:	231b      	movs	r3, #27
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000312:	4831      	ldr	r0, [pc, #196]	@ (80003d8 <main+0x124>)
 8000314:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8000316:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000318:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800031c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800031e:	f001 f8f7 	bl	8001510 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 8000322:	482e      	ldr	r0, [pc, #184]	@ (80003dc <main+0x128>)
 8000324:	4b2e      	ldr	r3, [pc, #184]	@ (80003e0 <main+0x12c>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000326:	6084      	str	r4, [r0, #8]
  huart2.Instance = USART2;
 8000328:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 38400;
 800032a:	2396      	movs	r3, #150	@ 0x96
 800032c:	021b      	lsls	r3, r3, #8
 800032e:	6043      	str	r3, [r0, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000330:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000332:	60c4      	str	r4, [r0, #12]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000334:	6143      	str	r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000336:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000338:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800033a:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800033c:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800033e:	6244      	str	r4, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000340:	f002 f820 	bl	8002384 <HAL_UART_Init>
 8000344:	0003      	movs	r3, r0
 8000346:	42a0      	cmp	r0, r4
 8000348:	d001      	beq.n	800034e <main+0x9a>
 800034a:	b672      	cpsid	i
  while (1)
 800034c:	e7fe      	b.n	800034c <main+0x98>
  hspi1.Instance = SPI1;
 800034e:	4825      	ldr	r0, [pc, #148]	@ (80003e4 <main+0x130>)
 8000350:	4a25      	ldr	r2, [pc, #148]	@ (80003e8 <main+0x134>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000352:	6083      	str	r3, [r0, #8]
  hspi1.Instance = SPI1;
 8000354:	6002      	str	r2, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000356:	2282      	movs	r2, #130	@ 0x82
 8000358:	0052      	lsls	r2, r2, #1
 800035a:	6042      	str	r2, [r0, #4]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800035c:	22e0      	movs	r2, #224	@ 0xe0
 800035e:	00d2      	lsls	r2, r2, #3
 8000360:	60c2      	str	r2, [r0, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000362:	2280      	movs	r2, #128	@ 0x80
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000364:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000366:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000368:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800036a:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800036c:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800036e:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000370:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000372:	2308      	movs	r3, #8
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000374:	0092      	lsls	r2, r2, #2
 8000376:	6182      	str	r2, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 8000378:	3afa      	subs	r2, #250	@ 0xfa
 800037a:	3aff      	subs	r2, #255	@ 0xff
 800037c:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800037e:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000380:	f001 fdb2 	bl	8001ee8 <HAL_SPI_Init>
 8000384:	2800      	cmp	r0, #0
 8000386:	d001      	beq.n	800038c <main+0xd8>
 8000388:	b672      	cpsid	i
  while (1)
 800038a:	e7fe      	b.n	800038a <main+0xd6>
  hsmbus1.Instance = I2C1;
 800038c:	4c17      	ldr	r4, [pc, #92]	@ (80003ec <main+0x138>)
 800038e:	4b18      	ldr	r3, [pc, #96]	@ (80003f0 <main+0x13c>)
  hsmbus1.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8000390:	60a0      	str	r0, [r4, #8]
  hsmbus1.Instance = I2C1;
 8000392:	6023      	str	r3, [r4, #0]
  hsmbus1.Init.Timing = 0x00201D2B;
 8000394:	4b17      	ldr	r3, [pc, #92]	@ (80003f4 <main+0x140>)
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8000396:	6160      	str	r0, [r4, #20]
  hsmbus1.Init.Timing = 0x00201D2B;
 8000398:	6063      	str	r3, [r4, #4]
  hsmbus1.Init.OwnAddress1 = 2;
 800039a:	2302      	movs	r3, #2
 800039c:	60e3      	str	r3, [r4, #12]
  hsmbus1.Init.SMBusTimeout = 0x00008061;
 800039e:	4b16      	ldr	r3, [pc, #88]	@ (80003f8 <main+0x144>)
  hsmbus1.Init.OwnAddress2 = 0;
 80003a0:	61a0      	str	r0, [r4, #24]
  hsmbus1.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 80003a2:	61e0      	str	r0, [r4, #28]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 80003a4:	6220      	str	r0, [r4, #32]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 80003a6:	6260      	str	r0, [r4, #36]	@ 0x24
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 80003a8:	62a0      	str	r0, [r4, #40]	@ 0x28
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 80003aa:	62e0      	str	r0, [r4, #44]	@ 0x2c
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 80003ac:	0020      	movs	r0, r4
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 80003ae:	6125      	str	r5, [r4, #16]
  hsmbus1.Init.SMBusTimeout = 0x00008061;
 80003b0:	6323      	str	r3, [r4, #48]	@ 0x30
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 80003b2:	f001 fd1d 	bl	8001df0 <HAL_SMBUS_Init>
 80003b6:	2800      	cmp	r0, #0
 80003b8:	d001      	beq.n	80003be <main+0x10a>
 80003ba:	b672      	cpsid	i
  while (1)
 80003bc:	e7fe      	b.n	80003bc <main+0x108>
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus1) != HAL_OK)
 80003be:	0020      	movs	r0, r4
 80003c0:	f001 fd82 	bl	8001ec8 <HAL_SMBUS_EnableAlert_IT>
 80003c4:	2800      	cmp	r0, #0
 80003c6:	d001      	beq.n	80003cc <main+0x118>
 80003c8:	b672      	cpsid	i
  while (1)
 80003ca:	e7fe      	b.n	80003ca <main+0x116>
  OLED_1in51_test();
 80003cc:	f000 f990 	bl	80006f0 <OLED_1in51_test>
  while (1)
 80003d0:	e7fe      	b.n	80003d0 <main+0x11c>
 80003d2:	46c0      	nop			@ (mov r8, r8)
 80003d4:	40021000 	.word	0x40021000
 80003d8:	48000400 	.word	0x48000400
 80003dc:	200000a4 	.word	0x200000a4
 80003e0:	40004400 	.word	0x40004400
 80003e4:	2000012c 	.word	0x2000012c
 80003e8:	40013000 	.word	0x40013000
 80003ec:	20000190 	.word	0x20000190
 80003f0:	40005400 	.word	0x40005400
 80003f4:	00201d2b 	.word	0x00201d2b
 80003f8:	00008061 	.word	0x00008061

080003fc <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003fc:	2101      	movs	r1, #1
 80003fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000428 <HAL_MspInit+0x2c>)
{
 8000400:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000402:	699a      	ldr	r2, [r3, #24]
 8000404:	430a      	orrs	r2, r1
 8000406:	619a      	str	r2, [r3, #24]
 8000408:	699a      	ldr	r2, [r3, #24]
 800040a:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 800040c:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800040e:	9200      	str	r2, [sp, #0]
 8000410:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000412:	69da      	ldr	r2, [r3, #28]
 8000414:	0549      	lsls	r1, r1, #21
 8000416:	430a      	orrs	r2, r1
 8000418:	61da      	str	r2, [r3, #28]
 800041a:	69db      	ldr	r3, [r3, #28]
 800041c:	400b      	ands	r3, r1
 800041e:	9301      	str	r3, [sp, #4]
 8000420:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000422:	b002      	add	sp, #8
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	40021000 	.word	0x40021000

0800042c <HAL_SMBUS_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmbus: SMBUS handle pointer
* @retval None
*/
void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* hsmbus)
{
 800042c:	b570      	push	{r4, r5, r6, lr}
 800042e:	0004      	movs	r4, r0
 8000430:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000432:	2214      	movs	r2, #20
 8000434:	2100      	movs	r1, #0
 8000436:	a803      	add	r0, sp, #12
 8000438:	f002 fab2 	bl	80029a0 <memset>
  if(hsmbus->Instance==I2C1)
 800043c:	4b17      	ldr	r3, [pc, #92]	@ (800049c <HAL_SMBUS_MspInit+0x70>)
 800043e:	6822      	ldr	r2, [r4, #0]
 8000440:	429a      	cmp	r2, r3
 8000442:	d129      	bne.n	8000498 <HAL_SMBUS_MspInit+0x6c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000444:	2280      	movs	r2, #128	@ 0x80
 8000446:	4c16      	ldr	r4, [pc, #88]	@ (80004a0 <HAL_SMBUS_MspInit+0x74>)
 8000448:	02d2      	lsls	r2, r2, #11
 800044a:	6963      	ldr	r3, [r4, #20]
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800044c:	2503      	movs	r5, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800044e:	4313      	orrs	r3, r2
 8000450:	6163      	str	r3, [r4, #20]
 8000452:	6963      	ldr	r3, [r4, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000454:	2612      	movs	r6, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000456:	4013      	ands	r3, r2
 8000458:	9301      	str	r3, [sp, #4]
 800045a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800045c:	2320      	movs	r3, #32
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800045e:	4811      	ldr	r0, [pc, #68]	@ (80004a4 <HAL_SMBUS_MspInit+0x78>)
 8000460:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000462:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000464:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000466:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C1;
 8000468:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800046a:	f001 f851 	bl	8001510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800046e:	23c0      	movs	r3, #192	@ 0xc0
 8000470:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000472:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000474:	480b      	ldr	r0, [pc, #44]	@ (80004a4 <HAL_SMBUS_MspInit+0x78>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000476:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000478:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800047a:	3301      	adds	r3, #1
 800047c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800047e:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000480:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000482:	f001 f845 	bl	8001510 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000486:	2280      	movs	r2, #128	@ 0x80
 8000488:	69e3      	ldr	r3, [r4, #28]
 800048a:	0392      	lsls	r2, r2, #14
 800048c:	4313      	orrs	r3, r2
 800048e:	61e3      	str	r3, [r4, #28]
 8000490:	69e3      	ldr	r3, [r4, #28]
 8000492:	4013      	ands	r3, r2
 8000494:	9302      	str	r3, [sp, #8]
 8000496:	9b02      	ldr	r3, [sp, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000498:	b008      	add	sp, #32
 800049a:	bd70      	pop	{r4, r5, r6, pc}
 800049c:	40005400 	.word	0x40005400
 80004a0:	40021000 	.word	0x40021000
 80004a4:	48000400 	.word	0x48000400

080004a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004a8:	b510      	push	{r4, lr}
 80004aa:	0004      	movs	r4, r0
 80004ac:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ae:	2214      	movs	r2, #20
 80004b0:	2100      	movs	r1, #0
 80004b2:	a803      	add	r0, sp, #12
 80004b4:	f002 fa74 	bl	80029a0 <memset>
  if(hspi->Instance==SPI1)
 80004b8:	4b11      	ldr	r3, [pc, #68]	@ (8000500 <HAL_SPI_MspInit+0x58>)
 80004ba:	6822      	ldr	r2, [r4, #0]
 80004bc:	429a      	cmp	r2, r3
 80004be:	d11d      	bne.n	80004fc <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004c0:	2180      	movs	r1, #128	@ 0x80
 80004c2:	4b10      	ldr	r3, [pc, #64]	@ (8000504 <HAL_SPI_MspInit+0x5c>)
 80004c4:	0149      	lsls	r1, r1, #5
 80004c6:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c8:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004ca:	430a      	orrs	r2, r1
 80004cc:	619a      	str	r2, [r3, #24]
 80004ce:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d0:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004d2:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d4:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004d6:	9201      	str	r2, [sp, #4]
 80004d8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004da:	695a      	ldr	r2, [r3, #20]
 80004dc:	0289      	lsls	r1, r1, #10
 80004de:	430a      	orrs	r2, r1
 80004e0:	615a      	str	r2, [r3, #20]
 80004e2:	695b      	ldr	r3, [r3, #20]
 80004e4:	400b      	ands	r3, r1
 80004e6:	9302      	str	r3, [sp, #8]
 80004e8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80004ea:	23e0      	movs	r3, #224	@ 0xe0
 80004ec:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ee:	3bde      	subs	r3, #222	@ 0xde
 80004f0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004f4:	3301      	adds	r3, #1
 80004f6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f8:	f001 f80a 	bl	8001510 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80004fc:	b008      	add	sp, #32
 80004fe:	bd10      	pop	{r4, pc}
 8000500:	40013000 	.word	0x40013000
 8000504:	40021000 	.word	0x40021000

08000508 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000508:	b510      	push	{r4, lr}
 800050a:	0004      	movs	r4, r0
 800050c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	2214      	movs	r2, #20
 8000510:	2100      	movs	r1, #0
 8000512:	a803      	add	r0, sp, #12
 8000514:	f002 fa44 	bl	80029a0 <memset>
  if(huart->Instance==USART2)
 8000518:	4b11      	ldr	r3, [pc, #68]	@ (8000560 <HAL_UART_MspInit+0x58>)
 800051a:	6822      	ldr	r2, [r4, #0]
 800051c:	429a      	cmp	r2, r3
 800051e:	d11d      	bne.n	800055c <HAL_UART_MspInit+0x54>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000520:	2280      	movs	r2, #128	@ 0x80
 8000522:	4b10      	ldr	r3, [pc, #64]	@ (8000564 <HAL_UART_MspInit+0x5c>)
 8000524:	0292      	lsls	r2, r2, #10
 8000526:	69d9      	ldr	r1, [r3, #28]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000528:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_USART2_CLK_ENABLE();
 800052a:	4311      	orrs	r1, r2
 800052c:	61d9      	str	r1, [r3, #28]
 800052e:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000530:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_ENABLE();
 8000532:	4011      	ands	r1, r2
 8000534:	9101      	str	r1, [sp, #4]
 8000536:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000538:	6959      	ldr	r1, [r3, #20]
 800053a:	4311      	orrs	r1, r2
 800053c:	6159      	str	r1, [r3, #20]
 800053e:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000540:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	4013      	ands	r3, r2
 8000544:	9302      	str	r3, [sp, #8]
 8000546:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000548:	4b07      	ldr	r3, [pc, #28]	@ (8000568 <HAL_UART_MspInit+0x60>)
 800054a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800054c:	2302      	movs	r3, #2
 800054e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000550:	3301      	adds	r3, #1
 8000552:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000554:	3b02      	subs	r3, #2
 8000556:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000558:	f000 ffda 	bl	8001510 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800055c:	b008      	add	sp, #32
 800055e:	bd10      	pop	{r4, pc}
 8000560:	40004400 	.word	0x40004400
 8000564:	40021000 	.word	0x40021000
 8000568:	00008004 	.word	0x00008004

0800056c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800056c:	e7fe      	b.n	800056c <NMI_Handler>

0800056e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800056e:	e7fe      	b.n	800056e <HardFault_Handler>

08000570 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000570:	4770      	bx	lr

08000572 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000572:	4770      	bx	lr

08000574 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000574:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000576:	f000 ff63 	bl	8001440 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800057a:	bd10      	pop	{r4, pc}

0800057c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	000e      	movs	r6, r1
 8000580:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000582:	2500      	movs	r5, #0
 8000584:	42a5      	cmp	r5, r4
 8000586:	db01      	blt.n	800058c <_read+0x10>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8000588:	0020      	movs	r0, r4
 800058a:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 800058c:	e000      	b.n	8000590 <_read+0x14>
 800058e:	bf00      	nop
 8000590:	5570      	strb	r0, [r6, r5]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000592:	3501      	adds	r5, #1
 8000594:	e7f6      	b.n	8000584 <_read+0x8>

08000596 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000596:	b570      	push	{r4, r5, r6, lr}
 8000598:	000e      	movs	r6, r1
 800059a:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800059c:	2500      	movs	r5, #0
 800059e:	42a5      	cmp	r5, r4
 80005a0:	db01      	blt.n	80005a6 <_write+0x10>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 80005a2:	0020      	movs	r0, r4
 80005a4:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 80005a6:	5d70      	ldrb	r0, [r6, r5]
 80005a8:	e000      	b.n	80005ac <_write+0x16>
 80005aa:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ac:	3501      	adds	r5, #1
 80005ae:	e7f6      	b.n	800059e <_write+0x8>

080005b0 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 80005b0:	2001      	movs	r0, #1
}
 80005b2:	4240      	negs	r0, r0
 80005b4:	4770      	bx	lr

080005b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80005b6:	2380      	movs	r3, #128	@ 0x80
 80005b8:	019b      	lsls	r3, r3, #6
  return 0;
}
 80005ba:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 80005bc:	604b      	str	r3, [r1, #4]
}
 80005be:	4770      	bx	lr

080005c0 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80005c0:	2001      	movs	r0, #1
 80005c2:	4770      	bx	lr

080005c4 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80005c4:	2000      	movs	r0, #0
 80005c6:	4770      	bx	lr

080005c8 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005c8:	490b      	ldr	r1, [pc, #44]	@ (80005f8 <_sbrk+0x30>)
 80005ca:	4a0c      	ldr	r2, [pc, #48]	@ (80005fc <_sbrk+0x34>)
{
 80005cc:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005ce:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005d0:	490b      	ldr	r1, [pc, #44]	@ (8000600 <_sbrk+0x38>)
{
 80005d2:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80005d4:	6808      	ldr	r0, [r1, #0]
 80005d6:	2800      	cmp	r0, #0
 80005d8:	d101      	bne.n	80005de <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 80005da:	480a      	ldr	r0, [pc, #40]	@ (8000604 <_sbrk+0x3c>)
 80005dc:	6008      	str	r0, [r1, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005de:	6808      	ldr	r0, [r1, #0]
 80005e0:	18c3      	adds	r3, r0, r3
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d906      	bls.n	80005f4 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 80005e6:	f002 fa43 	bl	8002a70 <__errno>
 80005ea:	230c      	movs	r3, #12
 80005ec:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80005ee:	2001      	movs	r0, #1
 80005f0:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80005f2:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80005f4:	600b      	str	r3, [r1, #0]
  return (void *)prev_heap_end;
 80005f6:	e7fc      	b.n	80005f2 <_sbrk+0x2a>
 80005f8:	00000400 	.word	0x00000400
 80005fc:	20001800 	.word	0x20001800
 8000600:	200001e0 	.word	0x200001e0
 8000604:	20000350 	.word	0x20000350

08000608 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000608:	4770      	bx	lr
	...

0800060c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800060c:	4813      	ldr	r0, [pc, #76]	@ (800065c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800060e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000610:	f7ff fffa 	bl	8000608 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000614:	4812      	ldr	r0, [pc, #72]	@ (8000660 <LoopForever+0x6>)
    LDR R1, [R0]
 8000616:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000618:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800061a:	4a12      	ldr	r2, [pc, #72]	@ (8000664 <LoopForever+0xa>)
    CMP R1, R2
 800061c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800061e:	d105      	bne.n	800062c <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000620:	4811      	ldr	r0, [pc, #68]	@ (8000668 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000622:	4912      	ldr	r1, [pc, #72]	@ (800066c <LoopForever+0x12>)
    STR R1, [R0]
 8000624:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000626:	4812      	ldr	r0, [pc, #72]	@ (8000670 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000628:	4912      	ldr	r1, [pc, #72]	@ (8000674 <LoopForever+0x1a>)
    STR R1, [R0]
 800062a:	6001      	str	r1, [r0, #0]

0800062c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800062c:	4812      	ldr	r0, [pc, #72]	@ (8000678 <LoopForever+0x1e>)
  ldr r1, =_edata
 800062e:	4913      	ldr	r1, [pc, #76]	@ (800067c <LoopForever+0x22>)
  ldr r2, =_sidata
 8000630:	4a13      	ldr	r2, [pc, #76]	@ (8000680 <LoopForever+0x26>)
  movs r3, #0
 8000632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000634:	e002      	b.n	800063c <LoopCopyDataInit>

08000636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800063a:	3304      	adds	r3, #4

0800063c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800063c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800063e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000640:	d3f9      	bcc.n	8000636 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000642:	4a10      	ldr	r2, [pc, #64]	@ (8000684 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000644:	4c10      	ldr	r4, [pc, #64]	@ (8000688 <LoopForever+0x2e>)
  movs r3, #0
 8000646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000648:	e001      	b.n	800064e <LoopFillZerobss>

0800064a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800064a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800064c:	3204      	adds	r2, #4

0800064e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800064e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000650:	d3fb      	bcc.n	800064a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000652:	f002 fa13 	bl	8002a7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000656:	f7ff fe2d 	bl	80002b4 <main>

0800065a <LoopForever>:

LoopForever:
    b LoopForever
 800065a:	e7fe      	b.n	800065a <LoopForever>
  ldr   r0, =_estack
 800065c:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000660:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000664:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000668:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 800066c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000670:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000674:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800067c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000680:	08005644 	.word	0x08005644
  ldr r2, =_sbss
 8000684:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000688:	2000034c 	.word	0x2000034c

0800068c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800068c:	e7fe      	b.n	800068c <ADC1_IRQHandler>
	...

08000690 <System_Init>:
function:	System Init
note:
	Initialize the communication method
********************************************************************************/
uint8_t System_Init(void)
{
 8000690:	b510      	push	{r4, lr}
#if USE_SPI_4W
	printf("USE_SPI_4W\r\n");
 8000692:	4802      	ldr	r0, [pc, #8]	@ (800069c <System_Init+0xc>)
 8000694:	f002 f88e 	bl	80027b4 <puts>
	OLED_DC_1;
	iic_init();
	
#endif
  return 0;
}
 8000698:	2000      	movs	r0, #0
 800069a:	bd10      	pop	{r4, pc}
 800069c:	080033b0 	.word	0x080033b0

080006a0 <SPI4W_Write_Byte>:
        SPI_SCK_1;
        Driver_Delay_us(10);
        value = (value << 1);
    }
#else
    __HAL_SPI_ENABLE(&hspi1);
 80006a0:	4b0e      	ldr	r3, [pc, #56]	@ (80006dc <SPI4W_Write_Byte+0x3c>)
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	2340      	movs	r3, #64	@ 0x40
 80006a6:	6811      	ldr	r1, [r2, #0]
 80006a8:	430b      	orrs	r3, r1
 80006aa:	6013      	str	r3, [r2, #0]
    SPI1->CR2 |= (1) << 12;
 80006ac:	2280      	movs	r2, #128	@ 0x80
 80006ae:	4b0c      	ldr	r3, [pc, #48]	@ (80006e0 <SPI4W_Write_Byte+0x40>)
 80006b0:	0152      	lsls	r2, r2, #5
 80006b2:	6859      	ldr	r1, [r3, #4]
 80006b4:	430a      	orrs	r2, r1
 80006b6:	605a      	str	r2, [r3, #4]

    while((SPI1->SR & (1 << 1)) == 0)
 80006b8:	2202      	movs	r2, #2
 80006ba:	6899      	ldr	r1, [r3, #8]
 80006bc:	4211      	tst	r1, r2
 80006be:	d0fc      	beq.n	80006ba <SPI4W_Write_Byte+0x1a>
        ;

    *((__IO uint8_t *)(&SPI1->DR)) = value;

    while(SPI1->SR & (1 << 7)) ; //Wait for not busy
 80006c0:	2180      	movs	r1, #128	@ 0x80
    *((__IO uint8_t *)(&SPI1->DR)) = value;
 80006c2:	4a08      	ldr	r2, [pc, #32]	@ (80006e4 <SPI4W_Write_Byte+0x44>)
 80006c4:	7010      	strb	r0, [r2, #0]
    while(SPI1->SR & (1 << 7)) ; //Wait for not busy
 80006c6:	6898      	ldr	r0, [r3, #8]
 80006c8:	4208      	tst	r0, r1
 80006ca:	d1fc      	bne.n	80006c6 <SPI4W_Write_Byte+0x26>

    while((SPI1->SR & (1 << 0)) == 0) ; // Wait for the receiving area to be empty
 80006cc:	2101      	movs	r1, #1
 80006ce:	6898      	ldr	r0, [r3, #8]
 80006d0:	4208      	tst	r0, r1
 80006d2:	d0fc      	beq.n	80006ce <SPI4W_Write_Byte+0x2e>

    return *((__IO uint8_t *)(&SPI1->DR));
 80006d4:	7810      	ldrb	r0, [r2, #0]
 80006d6:	b2c0      	uxtb	r0, r0
#endif
}
 80006d8:	4770      	bx	lr
 80006da:	46c0      	nop			@ (mov r8, r8)
 80006dc:	2000012c 	.word	0x2000012c
 80006e0:	40013000 	.word	0x40013000
 80006e4:	4001300c 	.word	0x4001300c

080006e8 <Driver_Delay_ms>:
note:
	Driver_Delay_ms(xms) : Delay x ms
	Driver_Delay_us(xus) : Delay x us
********************************************************************************/
void Driver_Delay_ms(uint32_t xms)
{
 80006e8:	b510      	push	{r4, lr}
    HAL_Delay(xms);
 80006ea:	f000 febb 	bl	8001464 <HAL_Delay>
}
 80006ee:	bd10      	pop	{r4, pc}

080006f0 <OLED_1in51_test>:
#include "test.h"
#include "../OLED/OLED_1in51.h"
#include "math.h"

int OLED_1in51_test(void)
{
 80006f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	printf("1.51inch OLED test demo\n");
 80006f2:	486e      	ldr	r0, [pc, #440]	@ (80008ac <OLED_1in51_test+0x1bc>)
{
 80006f4:	b085      	sub	sp, #20
	printf("1.51inch OLED test demo\n");
 80006f6:	f002 f85d 	bl	80027b4 <puts>
	if(System_Init() != 0) {
 80006fa:	f7ff ffc9 	bl	8000690 <System_Init>
 80006fe:	1e04      	subs	r4, r0, #0
 8000700:	d111      	bne.n	8000726 <OLED_1in51_test+0x36>
	if(USE_IIC) {
		printf("Only USE_SPI_4W or USE_IIC_SOFT, Please revise DEV_Config.h !!!\r\n");
		return -1;
	}

	printf("OLED Init...\r\n");
 8000702:	486b      	ldr	r0, [pc, #428]	@ (80008b0 <OLED_1in51_test+0x1c0>)
 8000704:	f002 f856 	bl	80027b4 <puts>
	OLED_1IN51_Init();
 8000708:	f000 fdec 	bl	80012e4 <OLED_1IN51_Init>
	Driver_Delay_ms(500);
 800070c:	20fa      	movs	r0, #250	@ 0xfa
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	f7ff ffea 	bl	80006e8 <Driver_Delay_ms>
	// 0.Create a new image cache
	UBYTE *BlackImage;
	UWORD Imagesize = ((OLED_1IN51_WIDTH%8==0)? (OLED_1IN51_WIDTH/8): (OLED_1IN51_WIDTH/8+1)) * OLED_1IN51_HEIGHT;
	if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 8000714:	2080      	movs	r0, #128	@ 0x80
 8000716:	00c0      	lsls	r0, r0, #3
 8000718:	f001 fe66 	bl	80023e8 <malloc>
 800071c:	1e07      	subs	r7, r0, #0
 800071e:	d106      	bne.n	800072e <OLED_1in51_test+0x3e>
			printf("Failed to apply for black memory...\r\n");
 8000720:	4864      	ldr	r0, [pc, #400]	@ (80008b4 <OLED_1in51_test+0x1c4>)
 8000722:	f002 f847 	bl	80027b4 <puts>
		return -1;
 8000726:	2001      	movs	r0, #1
 8000728:	4240      	negs	r0, r0
		printf("Drawing:page 4\r\n");
		OLED_1IN51_Display(gImage_1in3);
		Driver_Delay_ms(2000);
		Paint_Clear(BLACK);
		return 0;
}
 800072a:	b005      	add	sp, #20
 800072c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	printf("Paint_NewImage\r\n");
 800072e:	4862      	ldr	r0, [pc, #392]	@ (80008b8 <OLED_1in51_test+0x1c8>)
 8000730:	f002 f840 	bl	80027b4 <puts>
	Paint_NewImage(BlackImage, OLED_1IN51_WIDTH, OLED_1IN51_HEIGHT, 270, BLACK);
 8000734:	2387      	movs	r3, #135	@ 0x87
 8000736:	2280      	movs	r2, #128	@ 0x80
 8000738:	2140      	movs	r1, #64	@ 0x40
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	0038      	movs	r0, r7
 800073e:	9400      	str	r4, [sp, #0]
 8000740:	f000 f8d8 	bl	80008f4 <Paint_NewImage>
	printf("Drawing\r\n");
 8000744:	485d      	ldr	r0, [pc, #372]	@ (80008bc <OLED_1in51_test+0x1cc>)
 8000746:	f002 f835 	bl	80027b4 <puts>
	Paint_SelectImage(BlackImage);
 800074a:	0038      	movs	r0, r7
 800074c:	f000 f8f6 	bl	800093c <Paint_SelectImage>
	Driver_Delay_ms(500);
 8000750:	20fa      	movs	r0, #250	@ 0xfa
		Paint_DrawPoint(20, 10, WHITE, DOT_PIXEL_1X1, DOT_STYLE_DFT);
 8000752:	2501      	movs	r5, #1
	Driver_Delay_ms(500);
 8000754:	0040      	lsls	r0, r0, #1
		Paint_DrawPoint(20, 10, WHITE, DOT_PIXEL_1X1, DOT_STYLE_DFT);
 8000756:	4e5a      	ldr	r6, [pc, #360]	@ (80008c0 <OLED_1in51_test+0x1d0>)
	Driver_Delay_ms(500);
 8000758:	f7ff ffc6 	bl	80006e8 <Driver_Delay_ms>
	Paint_Clear(BLACK);
 800075c:	0020      	movs	r0, r4
 800075e:	f000 f98f 	bl	8000a80 <Paint_Clear>
		printf("Drawing:page 1\r\n");
 8000762:	4858      	ldr	r0, [pc, #352]	@ (80008c4 <OLED_1in51_test+0x1d4>)
 8000764:	f002 f826 	bl	80027b4 <puts>
		Paint_DrawPoint(20, 10, WHITE, DOT_PIXEL_1X1, DOT_STYLE_DFT);
 8000768:	002b      	movs	r3, r5
 800076a:	0032      	movs	r2, r6
 800076c:	210a      	movs	r1, #10
 800076e:	2014      	movs	r0, #20
 8000770:	9500      	str	r5, [sp, #0]
 8000772:	f000 f9d7 	bl	8000b24 <Paint_DrawPoint>
		Paint_DrawPoint(30, 10, WHITE, DOT_PIXEL_2X2, DOT_STYLE_DFT);
 8000776:	2302      	movs	r3, #2
 8000778:	0032      	movs	r2, r6
 800077a:	210a      	movs	r1, #10
 800077c:	201e      	movs	r0, #30
 800077e:	9500      	str	r5, [sp, #0]
 8000780:	f000 f9d0 	bl	8000b24 <Paint_DrawPoint>
		Paint_DrawPoint(40, 10, WHITE, DOT_PIXEL_3X3, DOT_STYLE_DFT);
 8000784:	2303      	movs	r3, #3
 8000786:	0032      	movs	r2, r6
 8000788:	210a      	movs	r1, #10
 800078a:	2028      	movs	r0, #40	@ 0x28
 800078c:	9500      	str	r5, [sp, #0]
 800078e:	f000 f9c9 	bl	8000b24 <Paint_DrawPoint>
		Paint_DrawLine(10, 10, 10, 20, WHITE, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 8000792:	220a      	movs	r2, #10
 8000794:	2314      	movs	r3, #20
 8000796:	0011      	movs	r1, r2
 8000798:	0010      	movs	r0, r2
 800079a:	9402      	str	r4, [sp, #8]
 800079c:	9501      	str	r5, [sp, #4]
 800079e:	9600      	str	r6, [sp, #0]
 80007a0:	f000 fa28 	bl	8000bf4 <Paint_DrawLine>
		Paint_DrawLine(20, 20, 20, 30, WHITE, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 80007a4:	2214      	movs	r2, #20
 80007a6:	231e      	movs	r3, #30
 80007a8:	0011      	movs	r1, r2
 80007aa:	0010      	movs	r0, r2
 80007ac:	9402      	str	r4, [sp, #8]
 80007ae:	9501      	str	r5, [sp, #4]
 80007b0:	9600      	str	r6, [sp, #0]
 80007b2:	f000 fa1f 	bl	8000bf4 <Paint_DrawLine>
		Paint_DrawLine(30, 30, 30, 40, WHITE, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
 80007b6:	221e      	movs	r2, #30
 80007b8:	2328      	movs	r3, #40	@ 0x28
 80007ba:	0011      	movs	r1, r2
 80007bc:	0010      	movs	r0, r2
 80007be:	9502      	str	r5, [sp, #8]
 80007c0:	9501      	str	r5, [sp, #4]
 80007c2:	9600      	str	r6, [sp, #0]
 80007c4:	f000 fa16 	bl	8000bf4 <Paint_DrawLine>
		Paint_DrawLine(40, 40, 40, 50, WHITE, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
 80007c8:	2228      	movs	r2, #40	@ 0x28
 80007ca:	2332      	movs	r3, #50	@ 0x32
 80007cc:	0011      	movs	r1, r2
 80007ce:	0010      	movs	r0, r2
 80007d0:	9502      	str	r5, [sp, #8]
 80007d2:	9501      	str	r5, [sp, #4]
 80007d4:	9600      	str	r6, [sp, #0]
 80007d6:	f000 fa0d 	bl	8000bf4 <Paint_DrawLine>
		Paint_DrawCircle(60, 30, 15, WHITE, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 80007da:	0033      	movs	r3, r6
 80007dc:	220f      	movs	r2, #15
 80007de:	211e      	movs	r1, #30
 80007e0:	203c      	movs	r0, #60	@ 0x3c
 80007e2:	9401      	str	r4, [sp, #4]
 80007e4:	9500      	str	r5, [sp, #0]
 80007e6:	f000 faed 	bl	8000dc4 <Paint_DrawCircle>
		Paint_DrawCircle(100, 40, 20, WHITE, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 80007ea:	0033      	movs	r3, r6
 80007ec:	2214      	movs	r2, #20
 80007ee:	2128      	movs	r1, #40	@ 0x28
 80007f0:	2064      	movs	r0, #100	@ 0x64
 80007f2:	9501      	str	r5, [sp, #4]
 80007f4:	9500      	str	r5, [sp, #0]
 80007f6:	f000 fae5 	bl	8000dc4 <Paint_DrawCircle>
		Paint_DrawRectangle(50, 30, 60, 40, WHITE, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 80007fa:	2328      	movs	r3, #40	@ 0x28
 80007fc:	223c      	movs	r2, #60	@ 0x3c
 80007fe:	211e      	movs	r1, #30
 8000800:	2032      	movs	r0, #50	@ 0x32
 8000802:	9402      	str	r4, [sp, #8]
 8000804:	9501      	str	r5, [sp, #4]
 8000806:	9600      	str	r6, [sp, #0]
 8000808:	f000 fa7e 	bl	8000d08 <Paint_DrawRectangle>
		Paint_DrawRectangle(90, 30, 110, 50, BLACK, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 800080c:	2332      	movs	r3, #50	@ 0x32
 800080e:	226e      	movs	r2, #110	@ 0x6e
 8000810:	211e      	movs	r1, #30
 8000812:	205a      	movs	r0, #90	@ 0x5a
 8000814:	9502      	str	r5, [sp, #8]
 8000816:	9501      	str	r5, [sp, #4]
 8000818:	9400      	str	r4, [sp, #0]
 800081a:	f000 fa75 	bl	8000d08 <Paint_DrawRectangle>
		Driver_Delay_ms(2000);
 800081e:	20fa      	movs	r0, #250	@ 0xfa
 8000820:	00c0      	lsls	r0, r0, #3
 8000822:	f7ff ff61 	bl	80006e8 <Driver_Delay_ms>
		Paint_Clear(BLACK);
 8000826:	0020      	movs	r0, r4
 8000828:	f000 f92a 	bl	8000a80 <Paint_Clear>
		printf("Drawing:page 2\r\n");
 800082c:	4826      	ldr	r0, [pc, #152]	@ (80008c8 <OLED_1in51_test+0x1d8>)
 800082e:	f001 ffc1 	bl	80027b4 <puts>
		Paint_DrawString_EN(0, 0, "waveshare hello world mcmaster university ECE capstone course waveshare hello world mcmaster university ECE capstone course waveshare hello world mcmaster university ECE capstone course waveshare hello world mcmaster university ECE capstone course waveshare hello world mcmaster university ECE capstone course", &Font8, WHITE, BLACK);
 8000832:	0021      	movs	r1, r4
 8000834:	4b25      	ldr	r3, [pc, #148]	@ (80008cc <OLED_1in51_test+0x1dc>)
 8000836:	4a26      	ldr	r2, [pc, #152]	@ (80008d0 <OLED_1in51_test+0x1e0>)
 8000838:	0020      	movs	r0, r4
 800083a:	9401      	str	r4, [sp, #4]
 800083c:	9600      	str	r6, [sp, #0]
 800083e:	f000 fc47 	bl	80010d0 <Paint_DrawString_EN>
		OLED_1IN51_Display(BlackImage);
 8000842:	0038      	movs	r0, r7
 8000844:	f000 fdaa 	bl	800139c <OLED_1IN51_Display>
		Driver_Delay_ms(200000);
 8000848:	4822      	ldr	r0, [pc, #136]	@ (80008d4 <OLED_1in51_test+0x1e4>)
 800084a:	f7ff ff4d 	bl	80006e8 <Driver_Delay_ms>
		Paint_Clear(BLACK);
 800084e:	0020      	movs	r0, r4
 8000850:	f000 f916 	bl	8000a80 <Paint_Clear>
		printf("Drawing:page 3\r\n");
 8000854:	4820      	ldr	r0, [pc, #128]	@ (80008d8 <OLED_1in51_test+0x1e8>)
 8000856:	f001 ffad 	bl	80027b4 <puts>
		Paint_DrawString_CN(10, 0,"���Abc", &Font12CN, WHITE, WHITE);
 800085a:	0021      	movs	r1, r4
 800085c:	200a      	movs	r0, #10
 800085e:	4b1f      	ldr	r3, [pc, #124]	@ (80008dc <OLED_1in51_test+0x1ec>)
 8000860:	4a1f      	ldr	r2, [pc, #124]	@ (80008e0 <OLED_1in51_test+0x1f0>)
 8000862:	9601      	str	r6, [sp, #4]
 8000864:	9600      	str	r6, [sp, #0]
 8000866:	f000 fc77 	bl	8001158 <Paint_DrawString_CN>
		Paint_DrawString_CN(0, 20, "΢ѩ����", &Font24CN, WHITE, WHITE);
 800086a:	2114      	movs	r1, #20
 800086c:	4b1d      	ldr	r3, [pc, #116]	@ (80008e4 <OLED_1in51_test+0x1f4>)
 800086e:	4a1e      	ldr	r2, [pc, #120]	@ (80008e8 <OLED_1in51_test+0x1f8>)
 8000870:	0020      	movs	r0, r4
 8000872:	9601      	str	r6, [sp, #4]
 8000874:	9600      	str	r6, [sp, #0]
 8000876:	f000 fc6f 	bl	8001158 <Paint_DrawString_CN>
		OLED_1IN51_Display(BlackImage);
 800087a:	0038      	movs	r0, r7
 800087c:	f000 fd8e 	bl	800139c <OLED_1IN51_Display>
		Driver_Delay_ms(2000);
 8000880:	20fa      	movs	r0, #250	@ 0xfa
 8000882:	00c0      	lsls	r0, r0, #3
 8000884:	f7ff ff30 	bl	80006e8 <Driver_Delay_ms>
		Paint_Clear(BLACK);
 8000888:	0020      	movs	r0, r4
 800088a:	f000 f8f9 	bl	8000a80 <Paint_Clear>
		printf("Drawing:page 4\r\n");
 800088e:	4817      	ldr	r0, [pc, #92]	@ (80008ec <OLED_1in51_test+0x1fc>)
 8000890:	f001 ff90 	bl	80027b4 <puts>
		OLED_1IN51_Display(gImage_1in3);
 8000894:	4816      	ldr	r0, [pc, #88]	@ (80008f0 <OLED_1in51_test+0x200>)
 8000896:	f000 fd81 	bl	800139c <OLED_1IN51_Display>
		Driver_Delay_ms(2000);
 800089a:	20fa      	movs	r0, #250	@ 0xfa
 800089c:	00c0      	lsls	r0, r0, #3
 800089e:	f7ff ff23 	bl	80006e8 <Driver_Delay_ms>
		Paint_Clear(BLACK);
 80008a2:	0020      	movs	r0, r4
 80008a4:	f000 f8ec 	bl	8000a80 <Paint_Clear>
		return 0;
 80008a8:	0020      	movs	r0, r4
 80008aa:	e73e      	b.n	800072a <OLED_1in51_test+0x3a>
 80008ac:	080037c2 	.word	0x080037c2
 80008b0:	080037da 	.word	0x080037da
 80008b4:	080037e8 	.word	0x080037e8
 80008b8:	0800380d 	.word	0x0800380d
 80008bc:	0800381d 	.word	0x0800381d
 80008c0:	0000ffff 	.word	0x0000ffff
 80008c4:	08003826 	.word	0x08003826
 80008c8:	08003836 	.word	0x08003836
 80008cc:	2000001c 	.word	0x2000001c
 80008d0:	08003846 	.word	0x08003846
 80008d4:	00030d40 	.word	0x00030d40
 80008d8:	0800397c 	.word	0x0800397c
 80008dc:	20000004 	.word	0x20000004
 80008e0:	0800398c 	.word	0x0800398c
 80008e4:	20000010 	.word	0x20000010
 80008e8:	08003999 	.word	0x08003999
 80008ec:	080039aa 	.word	0x080039aa
 80008f0:	080033bc 	.word	0x080033bc

080008f4 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 80008f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008f6:	ac05      	add	r4, sp, #20
 80008f8:	8824      	ldrh	r4, [r4, #0]
    Paint.WidthMemory = Width;
    Paint.HeightMemory = Height;
    Paint.Color = Color;    
		Paint.Scale = 2;
		
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 80008fa:	08cf      	lsrs	r7, r1, #3
{
 80008fc:	46a4      	mov	ip, r4
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 80008fe:	074c      	lsls	r4, r1, #29
 8000900:	d000      	beq.n	8000904 <Paint_NewImage+0x10>
 8000902:	3701      	adds	r7, #1
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
    Paint.Mirror = MIRROR_NONE;
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8000904:	000e      	movs	r6, r1
 8000906:	0015      	movs	r5, r2
 8000908:	2b00      	cmp	r3, #0
 800090a:	d005      	beq.n	8000918 <Paint_NewImage+0x24>
 800090c:	0016      	movs	r6, r2
 800090e:	000d      	movs	r5, r1
 8000910:	2bb4      	cmp	r3, #180	@ 0xb4
 8000912:	d101      	bne.n	8000918 <Paint_NewImage+0x24>
 8000914:	000e      	movs	r6, r1
 8000916:	0015      	movs	r5, r2
    Paint.Image = image;
 8000918:	4c07      	ldr	r4, [pc, #28]	@ (8000938 <Paint_NewImage+0x44>)
    Paint.WidthMemory = Width;
 800091a:	8121      	strh	r1, [r4, #8]
    Paint.Color = Color;    
 800091c:	4661      	mov	r1, ip
    Paint.Rotate = Rotate;
 800091e:	81e3      	strh	r3, [r4, #14]
    Paint.Color = Color;    
 8000920:	81a1      	strh	r1, [r4, #12]
    Paint.Mirror = MIRROR_NONE;
 8000922:	2300      	movs	r3, #0
		Paint.Scale = 2;
 8000924:	2102      	movs	r1, #2
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 8000926:	8267      	strh	r7, [r4, #18]
        Paint.Width = Width;
 8000928:	80a6      	strh	r6, [r4, #4]
        Paint.Height = Height;
 800092a:	80e5      	strh	r5, [r4, #6]
    Paint.Image = image;
 800092c:	6020      	str	r0, [r4, #0]
    Paint.HeightMemory = Height;
 800092e:	8162      	strh	r2, [r4, #10]
		Paint.Scale = 2;
 8000930:	82e1      	strh	r1, [r4, #22]
    Paint.HeightByte = Height;    
 8000932:	82a2      	strh	r2, [r4, #20]
    Paint.Mirror = MIRROR_NONE;
 8000934:	8223      	strh	r3, [r4, #16]
    } else {
        Paint.Width = Height;
        Paint.Height = Width;
    }
}
 8000936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000938:	200001e4 	.word	0x200001e4

0800093c <Paint_SelectImage>:
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
    Paint.Image = image;
 800093c:	4b01      	ldr	r3, [pc, #4]	@ (8000944 <Paint_SelectImage+0x8>)
 800093e:	6018      	str	r0, [r3, #0]
}
 8000940:	4770      	bx	lr
 8000942:	46c0      	nop			@ (mov r8, r8)
 8000944:	200001e4 	.word	0x200001e4

08000948 <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8000948:	b570      	push	{r4, r5, r6, lr}
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 800094a:	4c4b      	ldr	r4, [pc, #300]	@ (8000a78 <Paint_SetPixel+0x130>)
{
 800094c:	0003      	movs	r3, r0
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 800094e:	88a0      	ldrh	r0, [r4, #4]
 8000950:	4298      	cmp	r0, r3
 8000952:	d302      	bcc.n	800095a <Paint_SetPixel+0x12>
 8000954:	88e0      	ldrh	r0, [r4, #6]
 8000956:	4288      	cmp	r0, r1
 8000958:	d203      	bcs.n	8000962 <Paint_SetPixel+0x1a>
        Debug("Exceeding display boundaries\r\n");
 800095a:	4848      	ldr	r0, [pc, #288]	@ (8000a7c <Paint_SetPixel+0x134>)
 800095c:	f001 ff2a 	bl	80027b4 <puts>
    }else if(Paint.Scale == 65) {
        UDOUBLE Addr = X*2 + Y*Paint.WidthByte;
        Paint.Image[Addr] = 0xff & (Color>>8);
        Paint.Image[Addr+1] = 0xff & Color;
    }
}
 8000960:	bd70      	pop	{r4, r5, r6, pc}
    switch(Paint.Rotate) {
 8000962:	89e0      	ldrh	r0, [r4, #14]
 8000964:	28b4      	cmp	r0, #180	@ 0xb4
 8000966:	d01a      	beq.n	800099e <Paint_SetPixel+0x56>
 8000968:	d80f      	bhi.n	800098a <Paint_SetPixel+0x42>
 800096a:	2800      	cmp	r0, #0
 800096c:	d006      	beq.n	800097c <Paint_SetPixel+0x34>
 800096e:	285a      	cmp	r0, #90	@ 0x5a
 8000970:	d1f6      	bne.n	8000960 <Paint_SetPixel+0x18>
        X = Paint.WidthMemory - Ypoint - 1;
 8000972:	8920      	ldrh	r0, [r4, #8]
 8000974:	3801      	subs	r0, #1
 8000976:	1a40      	subs	r0, r0, r1
        break;
 8000978:	0019      	movs	r1, r3
        X = Paint.WidthMemory - Ypoint - 1;
 800097a:	b283      	uxth	r3, r0
    switch(Paint.Mirror) {
 800097c:	8a20      	ldrh	r0, [r4, #16]
 800097e:	2803      	cmp	r0, #3
 8000980:	d8ee      	bhi.n	8000960 <Paint_SetPixel+0x18>
 8000982:	f7ff fbc1 	bl	8000108 <__gnu_thumb1_case_uqi>
 8000986:	1519      	.short	0x1519
 8000988:	3438      	.short	0x3438
    switch(Paint.Rotate) {
 800098a:	2587      	movs	r5, #135	@ 0x87
 800098c:	006d      	lsls	r5, r5, #1
 800098e:	42a8      	cmp	r0, r5
 8000990:	d1e6      	bne.n	8000960 <Paint_SetPixel+0x18>
        Y = Paint.HeightMemory - Xpoint - 1;
 8000992:	8960      	ldrh	r0, [r4, #10]
 8000994:	3801      	subs	r0, #1
 8000996:	1ac0      	subs	r0, r0, r3
        break;
 8000998:	000b      	movs	r3, r1
        Y = Paint.HeightMemory - Xpoint - 1;
 800099a:	b281      	uxth	r1, r0
        break;
 800099c:	e7ee      	b.n	800097c <Paint_SetPixel+0x34>
        X = Paint.WidthMemory - Xpoint - 1;
 800099e:	8920      	ldrh	r0, [r4, #8]
 80009a0:	3801      	subs	r0, #1
 80009a2:	1ac3      	subs	r3, r0, r3
        Y = Paint.HeightMemory - Ypoint - 1;
 80009a4:	8960      	ldrh	r0, [r4, #10]
        X = Paint.WidthMemory - Xpoint - 1;
 80009a6:	b29b      	uxth	r3, r3
        Y = Paint.HeightMemory - Ypoint - 1;
 80009a8:	3801      	subs	r0, #1
 80009aa:	1a41      	subs	r1, r0, r1
 80009ac:	b289      	uxth	r1, r1
        break;
 80009ae:	e7e5      	b.n	800097c <Paint_SetPixel+0x34>
        X = Paint.WidthMemory - X - 1;
 80009b0:	8920      	ldrh	r0, [r4, #8]
 80009b2:	3801      	subs	r0, #1
 80009b4:	1ac3      	subs	r3, r0, r3
 80009b6:	b29b      	uxth	r3, r3
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 80009b8:	8920      	ldrh	r0, [r4, #8]
 80009ba:	4298      	cmp	r0, r3
 80009bc:	d3cd      	bcc.n	800095a <Paint_SetPixel+0x12>
 80009be:	8960      	ldrh	r0, [r4, #10]
 80009c0:	4288      	cmp	r0, r1
 80009c2:	d3ca      	bcc.n	800095a <Paint_SetPixel+0x12>
    if(Paint.Scale == 2){
 80009c4:	8ae0      	ldrh	r0, [r4, #22]
 80009c6:	2802      	cmp	r0, #2
 80009c8:	d11c      	bne.n	8000a04 <Paint_SetPixel+0xbc>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 80009ca:	8a60      	ldrh	r0, [r4, #18]
        UBYTE Rdata = Paint.Image[Addr];
 80009cc:	6824      	ldr	r4, [r4, #0]
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 80009ce:	4341      	muls	r1, r0
 80009d0:	08d8      	lsrs	r0, r3, #3
 80009d2:	b280      	uxth	r0, r0
 80009d4:	1809      	adds	r1, r1, r0
        UBYTE Rdata = Paint.Image[Addr];
 80009d6:	1860      	adds	r0, r4, r1
 80009d8:	5c61      	ldrb	r1, [r4, r1]
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 80009da:	2407      	movs	r4, #7
 80009dc:	401c      	ands	r4, r3
 80009de:	2380      	movs	r3, #128	@ 0x80
        if((Color & 0Xff) == BLACK)
 80009e0:	b2d2      	uxtb	r2, r2
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 80009e2:	4123      	asrs	r3, r4
        if((Color & 0Xff) == BLACK)
 80009e4:	2a00      	cmp	r2, #0
 80009e6:	d10b      	bne.n	8000a00 <Paint_SetPixel+0xb8>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 80009e8:	4399      	bics	r1, r3
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 80009ea:	7001      	strb	r1, [r0, #0]
 80009ec:	e7b8      	b.n	8000960 <Paint_SetPixel+0x18>
        X = Paint.WidthMemory - X - 1;
 80009ee:	8920      	ldrh	r0, [r4, #8]
 80009f0:	3801      	subs	r0, #1
 80009f2:	1ac3      	subs	r3, r0, r3
 80009f4:	b29b      	uxth	r3, r3
        Y = Paint.HeightMemory - Y - 1;
 80009f6:	8960      	ldrh	r0, [r4, #10]
 80009f8:	3801      	subs	r0, #1
 80009fa:	1a41      	subs	r1, r0, r1
 80009fc:	b289      	uxth	r1, r1
        break;
 80009fe:	e7db      	b.n	80009b8 <Paint_SetPixel+0x70>
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 8000a00:	4319      	orrs	r1, r3
 8000a02:	e7f2      	b.n	80009ea <Paint_SetPixel+0xa2>
    }else if(Paint.Scale == 4){
 8000a04:	2804      	cmp	r0, #4
 8000a06:	d112      	bne.n	8000a2e <Paint_SetPixel+0xe6>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 8000a08:	8a60      	ldrh	r0, [r4, #18]
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 8000a0a:	26c0      	movs	r6, #192	@ 0xc0
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 8000a0c:	4348      	muls	r0, r1
 8000a0e:	0899      	lsrs	r1, r3, #2
 8000a10:	b289      	uxth	r1, r1
 8000a12:	1840      	adds	r0, r0, r1
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 8000a14:	2103      	movs	r1, #3
 8000a16:	400b      	ands	r3, r1
 8000a18:	005d      	lsls	r5, r3, #1
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 8000a1a:	4011      	ands	r1, r2
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 8000a1c:	412e      	asrs	r6, r5
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 8000a1e:	0189      	lsls	r1, r1, #6
 8000a20:	4129      	asrs	r1, r5
        UBYTE Rdata = Paint.Image[Addr];
 8000a22:	6824      	ldr	r4, [r4, #0]
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 8000a24:	5c23      	ldrb	r3, [r4, r0]
 8000a26:	43b3      	bics	r3, r6
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 8000a28:	430b      	orrs	r3, r1
 8000a2a:	5423      	strb	r3, [r4, r0]
 8000a2c:	e798      	b.n	8000960 <Paint_SetPixel+0x18>
    }else if(Paint.Scale == 16) {
 8000a2e:	2810      	cmp	r0, #16
 8000a30:	d114      	bne.n	8000a5c <Paint_SetPixel+0x114>
        UDOUBLE Addr = X / 2 + Y * Paint.WidthByte;
 8000a32:	8a60      	ldrh	r0, [r4, #18]
        Rdata = Rdata & (~(0xf0 >> ((X % 2)*4)));
 8000a34:	25f0      	movs	r5, #240	@ 0xf0
        UDOUBLE Addr = X / 2 + Y * Paint.WidthByte;
 8000a36:	4341      	muls	r1, r0
 8000a38:	0858      	lsrs	r0, r3, #1
 8000a3a:	b280      	uxth	r0, r0
 8000a3c:	1809      	adds	r1, r1, r0
        Rdata = Rdata & (~(0xf0 >> ((X % 2)*4)));
 8000a3e:	2001      	movs	r0, #1
 8000a40:	4018      	ands	r0, r3
 8000a42:	0080      	lsls	r0, r0, #2
 8000a44:	4105      	asrs	r5, r0
        UBYTE Rdata = Paint.Image[Addr];
 8000a46:	6824      	ldr	r4, [r4, #0]
        Rdata = Rdata & (~(0xf0 >> ((X % 2)*4)));
 8000a48:	5c63      	ldrb	r3, [r4, r1]
 8000a4a:	43ab      	bics	r3, r5
 8000a4c:	001d      	movs	r5, r3
        Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 8000a4e:	230f      	movs	r3, #15
 8000a50:	4013      	ands	r3, r2
 8000a52:	011b      	lsls	r3, r3, #4
 8000a54:	4103      	asrs	r3, r0
 8000a56:	432b      	orrs	r3, r5
 8000a58:	5463      	strb	r3, [r4, r1]
 8000a5a:	e781      	b.n	8000960 <Paint_SetPixel+0x18>
    }else if(Paint.Scale == 65) {
 8000a5c:	2841      	cmp	r0, #65	@ 0x41
 8000a5e:	d000      	beq.n	8000a62 <Paint_SetPixel+0x11a>
 8000a60:	e77e      	b.n	8000960 <Paint_SetPixel+0x18>
        UDOUBLE Addr = X*2 + Y*Paint.WidthByte;
 8000a62:	8a60      	ldrh	r0, [r4, #18]
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	4341      	muls	r1, r0
 8000a68:	18c9      	adds	r1, r1, r3
        Paint.Image[Addr] = 0xff & (Color>>8);
 8000a6a:	6823      	ldr	r3, [r4, #0]
 8000a6c:	0a10      	lsrs	r0, r2, #8
 8000a6e:	5458      	strb	r0, [r3, r1]
        Paint.Image[Addr+1] = 0xff & Color;
 8000a70:	6823      	ldr	r3, [r4, #0]
 8000a72:	185b      	adds	r3, r3, r1
 8000a74:	705a      	strb	r2, [r3, #1]
 8000a76:	e773      	b.n	8000960 <Paint_SetPixel+0x18>
 8000a78:	200001e4 	.word	0x200001e4
 8000a7c:	0800540a 	.word	0x0800540a

08000a80 <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 8000a80:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(Paint.Scale == 2 || Paint.Scale == 4) {
 8000a82:	2402      	movs	r4, #2
 8000a84:	4a26      	ldr	r2, [pc, #152]	@ (8000b20 <Paint_Clear+0xa0>)
 8000a86:	8ad1      	ldrh	r1, [r2, #22]
 8000a88:	1e8b      	subs	r3, r1, #2
 8000a8a:	43a3      	bics	r3, r4
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d111      	bne.n	8000ab6 <Paint_Clear+0x36>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8000a92:	8a91      	ldrh	r1, [r2, #20]
 8000a94:	4299      	cmp	r1, r3
 8000a96:	d80c      	bhi.n	8000ab2 <Paint_Clear+0x32>
                Paint.Image[Addr] = 0x0f & (Color>>8);
                Paint.Image[Addr+1] = 0x0f & Color;
            }
        }
    }
}
 8000a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
                UDOUBLE Addr = X + Y*Paint.WidthByte;
 8000a9a:	435c      	muls	r4, r3
                Paint.Image[Addr] = Color;
 8000a9c:	6815      	ldr	r5, [r2, #0]
 8000a9e:	186d      	adds	r5, r5, r1
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000aa0:	3101      	adds	r1, #1
                Paint.Image[Addr] = Color;
 8000aa2:	5528      	strb	r0, [r5, r4]
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000aa4:	b289      	uxth	r1, r1
 8000aa6:	8a54      	ldrh	r4, [r2, #18]
 8000aa8:	428c      	cmp	r4, r1
 8000aaa:	d8f6      	bhi.n	8000a9a <Paint_Clear+0x1a>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8000aac:	3301      	adds	r3, #1
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	e7ef      	b.n	8000a92 <Paint_Clear+0x12>
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	e7f7      	b.n	8000aa6 <Paint_Clear+0x26>
    }else if(Paint.Scale == 16) {
 8000ab6:	2910      	cmp	r1, #16
 8000ab8:	d115      	bne.n	8000ae6 <Paint_Clear+0x66>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8000aba:	2300      	movs	r3, #0
                Color = Color & 0x0f;
 8000abc:	260f      	movs	r6, #15
 8000abe:	e00d      	b.n	8000adc <Paint_Clear+0x5c>
                UDOUBLE Addr = X + Y*Paint.WidthByte;
 8000ac0:	435c      	muls	r4, r3
                Paint.Image[Addr] = (Color<<4) | Color;
 8000ac2:	6815      	ldr	r5, [r2, #0]
                Color = Color & 0x0f;
 8000ac4:	4030      	ands	r0, r6
                Paint.Image[Addr] = (Color<<4) | Color;
 8000ac6:	0107      	lsls	r7, r0, #4
 8000ac8:	186d      	adds	r5, r5, r1
 8000aca:	4307      	orrs	r7, r0
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000acc:	3101      	adds	r1, #1
                Paint.Image[Addr] = (Color<<4) | Color;
 8000ace:	552f      	strb	r7, [r5, r4]
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000ad0:	b289      	uxth	r1, r1
 8000ad2:	8a54      	ldrh	r4, [r2, #18]
 8000ad4:	428c      	cmp	r4, r1
 8000ad6:	d8f3      	bhi.n	8000ac0 <Paint_Clear+0x40>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8000ad8:	3301      	adds	r3, #1
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	8a91      	ldrh	r1, [r2, #20]
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	d9da      	bls.n	8000a98 <Paint_Clear+0x18>
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	e7f5      	b.n	8000ad2 <Paint_Clear+0x52>
    }else if(Paint.Scale == 65) {
 8000ae6:	2941      	cmp	r1, #65	@ 0x41
 8000ae8:	d1d6      	bne.n	8000a98 <Paint_Clear+0x18>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8000aea:	2300      	movs	r3, #0
                Paint.Image[Addr] = 0x0f & (Color>>8);
 8000aec:	0a05      	lsrs	r5, r0, #8
 8000aee:	3932      	subs	r1, #50	@ 0x32
 8000af0:	400d      	ands	r5, r1
                Paint.Image[Addr+1] = 0x0f & Color;
 8000af2:	4008      	ands	r0, r1
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8000af4:	8a91      	ldrh	r1, [r2, #20]
 8000af6:	4299      	cmp	r1, r3
 8000af8:	d9ce      	bls.n	8000a98 <Paint_Clear+0x18>
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000afa:	2100      	movs	r1, #0
 8000afc:	e009      	b.n	8000b12 <Paint_Clear+0x92>
                UDOUBLE Addr = X*2 + Y*Paint.WidthByte;
 8000afe:	435c      	muls	r4, r3
 8000b00:	004e      	lsls	r6, r1, #1
 8000b02:	1934      	adds	r4, r6, r4
                Paint.Image[Addr] = 0x0f & (Color>>8);
 8000b04:	6816      	ldr	r6, [r2, #0]
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000b06:	3101      	adds	r1, #1
                Paint.Image[Addr] = 0x0f & (Color>>8);
 8000b08:	5535      	strb	r5, [r6, r4]
                Paint.Image[Addr+1] = 0x0f & Color;
 8000b0a:	6816      	ldr	r6, [r2, #0]
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000b0c:	b289      	uxth	r1, r1
                Paint.Image[Addr+1] = 0x0f & Color;
 8000b0e:	1934      	adds	r4, r6, r4
 8000b10:	7060      	strb	r0, [r4, #1]
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000b12:	8a54      	ldrh	r4, [r2, #18]
 8000b14:	428c      	cmp	r4, r1
 8000b16:	d8f2      	bhi.n	8000afe <Paint_Clear+0x7e>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8000b18:	3301      	adds	r3, #1
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	e7ea      	b.n	8000af4 <Paint_Clear+0x74>
 8000b1e:	46c0      	nop			@ (mov r8, r8)
 8000b20:	200001e4 	.word	0x200001e4

08000b24 <Paint_DrawPoint>:
    Dot_Pixel	: point size
    Dot_Style	: point Style
******************************************************************************/
void Paint_DrawPoint(UWORD Xpoint, UWORD Ypoint, UWORD Color,
                     DOT_PIXEL Dot_Pixel, DOT_STYLE Dot_Style)
{
 8000b24:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8000b26:	4c2f      	ldr	r4, [pc, #188]	@ (8000be4 <Paint_DrawPoint+0xc0>)
{
 8000b28:	b087      	sub	sp, #28
 8000b2a:	9002      	str	r0, [sp, #8]
 8000b2c:	9101      	str	r1, [sp, #4]
 8000b2e:	9203      	str	r2, [sp, #12]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8000b30:	88a2      	ldrh	r2, [r4, #4]
{
 8000b32:	001d      	movs	r5, r3
 8000b34:	ab0c      	add	r3, sp, #48	@ 0x30
 8000b36:	781b      	ldrb	r3, [r3, #0]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8000b38:	4282      	cmp	r2, r0
 8000b3a:	d303      	bcc.n	8000b44 <Paint_DrawPoint+0x20>
 8000b3c:	88e2      	ldrh	r2, [r4, #6]
 8000b3e:	9901      	ldr	r1, [sp, #4]
 8000b40:	428a      	cmp	r2, r1
 8000b42:	d20e      	bcs.n	8000b62 <Paint_DrawPoint+0x3e>
        Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
 8000b44:	4828      	ldr	r0, [pc, #160]	@ (8000be8 <Paint_DrawPoint+0xc4>)
 8000b46:	f001 fe35 	bl	80027b4 <puts>
				printf("Xpoint = %d , Paint.Width = %d  \r\n ",Xpoint,Paint.Width);
 8000b4a:	88a2      	ldrh	r2, [r4, #4]
 8000b4c:	9902      	ldr	r1, [sp, #8]
 8000b4e:	4827      	ldr	r0, [pc, #156]	@ (8000bec <Paint_DrawPoint+0xc8>)
 8000b50:	f001 fdca 	bl	80026e8 <iprintf>
				printf("Ypoint = %d , Paint.Height = %d  \r\n ",Ypoint,Paint.Height);
 8000b54:	88e2      	ldrh	r2, [r4, #6]
 8000b56:	4826      	ldr	r0, [pc, #152]	@ (8000bf0 <Paint_DrawPoint+0xcc>)
 8000b58:	9901      	ldr	r1, [sp, #4]
 8000b5a:	f001 fdc5 	bl	80026e8 <iprintf>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
            }
        }
    }
}
 8000b5e:	b007      	add	sp, #28
 8000b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (Dot_Style == DOT_FILL_AROUND) {
 8000b62:	2400      	movs	r4, #0
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d139      	bne.n	8000bdc <Paint_DrawPoint+0xb8>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 8000b68:	006f      	lsls	r7, r5, #1
 8000b6a:	3f01      	subs	r7, #1
 8000b6c:	42bc      	cmp	r4, r7
 8000b6e:	daf6      	bge.n	8000b5e <Paint_DrawPoint+0x3a>
 8000b70:	9b01      	ldr	r3, [sp, #4]
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 8000b72:	b2a2      	uxth	r2, r4
 8000b74:	1b5e      	subs	r6, r3, r5
 8000b76:	b2a3      	uxth	r3, r4
 8000b78:	9304      	str	r3, [sp, #16]
 8000b7a:	9b02      	ldr	r3, [sp, #8]
 8000b7c:	b2b6      	uxth	r6, r6
 8000b7e:	1b5b      	subs	r3, r3, r5
 8000b80:	18d3      	adds	r3, r2, r3
 8000b82:	9305      	str	r3, [sp, #20]
 8000b84:	e00f      	b.n	8000ba6 <Paint_DrawPoint+0x82>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 8000b86:	9a02      	ldr	r2, [sp, #8]
 8000b88:	9901      	ldr	r1, [sp, #4]
 8000b8a:	1912      	adds	r2, r2, r4
 8000b8c:	18cb      	adds	r3, r1, r3
 8000b8e:	1b52      	subs	r2, r2, r5
 8000b90:	1b5b      	subs	r3, r3, r5
 8000b92:	4313      	orrs	r3, r2
 8000b94:	d40d      	bmi.n	8000bb2 <Paint_DrawPoint+0x8e>
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 8000b96:	466b      	mov	r3, sp
 8000b98:	0031      	movs	r1, r6
 8000b9a:	8a98      	ldrh	r0, [r3, #20]
 8000b9c:	9a03      	ldr	r2, [sp, #12]
 8000b9e:	f7ff fed3 	bl	8000948 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8000ba2:	3601      	adds	r6, #1
 8000ba4:	b2b6      	uxth	r6, r6
 8000ba6:	9b01      	ldr	r3, [sp, #4]
 8000ba8:	1aeb      	subs	r3, r5, r3
 8000baa:	18f3      	adds	r3, r6, r3
 8000bac:	b21b      	sxth	r3, r3
 8000bae:	42bb      	cmp	r3, r7
 8000bb0:	dbe9      	blt.n	8000b86 <Paint_DrawPoint+0x62>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 8000bb2:	9c04      	ldr	r4, [sp, #16]
 8000bb4:	3401      	adds	r4, #1
 8000bb6:	b224      	sxth	r4, r4
 8000bb8:	e7d8      	b.n	8000b6c <Paint_DrawPoint+0x48>
 8000bba:	2700      	movs	r7, #0
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 8000bbc:	9b02      	ldr	r3, [sp, #8]
 8000bbe:	1e5e      	subs	r6, r3, #1
 8000bc0:	1936      	adds	r6, r6, r4
 8000bc2:	b2b6      	uxth	r6, r6
 8000bc4:	9b01      	ldr	r3, [sp, #4]
 8000bc6:	0030      	movs	r0, r6
 8000bc8:	1e59      	subs	r1, r3, #1
 8000bca:	19c9      	adds	r1, r1, r7
 8000bcc:	9a03      	ldr	r2, [sp, #12]
 8000bce:	b289      	uxth	r1, r1
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8000bd0:	3701      	adds	r7, #1
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 8000bd2:	f7ff feb9 	bl	8000948 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8000bd6:	42bd      	cmp	r5, r7
 8000bd8:	dcf4      	bgt.n	8000bc4 <Paint_DrawPoint+0xa0>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8000bda:	3401      	adds	r4, #1
 8000bdc:	42a5      	cmp	r5, r4
 8000bde:	dcec      	bgt.n	8000bba <Paint_DrawPoint+0x96>
 8000be0:	e7bd      	b.n	8000b5e <Paint_DrawPoint+0x3a>
 8000be2:	46c0      	nop			@ (mov r8, r8)
 8000be4:	200001e4 	.word	0x200001e4
 8000be8:	0800542f 	.word	0x0800542f
 8000bec:	0800546e 	.word	0x0800546e
 8000bf0:	08005492 	.word	0x08005492

08000bf4 <Paint_DrawLine>:
    Line_width : Line width
    Line_Style: Solid and dotted lines
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 8000bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bf6:	b08f      	sub	sp, #60	@ 0x3c
 8000bf8:	9304      	str	r3, [sp, #16]
 8000bfa:	ab14      	add	r3, sp, #80	@ 0x50
 8000bfc:	881b      	ldrh	r3, [r3, #0]
 8000bfe:	9203      	str	r2, [sp, #12]
 8000c00:	930c      	str	r3, [sp, #48]	@ 0x30
 8000c02:	ab15      	add	r3, sp, #84	@ 0x54
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	0005      	movs	r5, r0
 8000c08:	9306      	str	r3, [sp, #24]
 8000c0a:	ab16      	add	r3, sp, #88	@ 0x58
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	000c      	movs	r4, r1
 8000c10:	9307      	str	r3, [sp, #28]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8000c12:	4b3a      	ldr	r3, [pc, #232]	@ (8000cfc <Paint_DrawLine+0x108>)
 8000c14:	889a      	ldrh	r2, [r3, #4]
 8000c16:	4282      	cmp	r2, r0
 8000c18:	d308      	bcc.n	8000c2c <Paint_DrawLine+0x38>
 8000c1a:	88db      	ldrh	r3, [r3, #6]
 8000c1c:	428b      	cmp	r3, r1
 8000c1e:	d305      	bcc.n	8000c2c <Paint_DrawLine+0x38>
 8000c20:	9903      	ldr	r1, [sp, #12]
 8000c22:	428a      	cmp	r2, r1
 8000c24:	d302      	bcc.n	8000c2c <Paint_DrawLine+0x38>
        Xend > Paint.Width || Yend > Paint.Height) {
 8000c26:	9a04      	ldr	r2, [sp, #16]
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d204      	bcs.n	8000c36 <Paint_DrawLine+0x42>
        Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
 8000c2c:	4834      	ldr	r0, [pc, #208]	@ (8000d00 <Paint_DrawLine+0x10c>)
 8000c2e:	f001 fdc1 	bl	80027b4 <puts>
                break;
            Esp += dx;
            Ypoint += YAddway;
        }
    }
}
 8000c32:	b00f      	add	sp, #60	@ 0x3c
 8000c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 8000c36:	9b03      	ldr	r3, [sp, #12]
 8000c38:	1a1b      	subs	r3, r3, r0
 8000c3a:	17da      	asrs	r2, r3, #31
 8000c3c:	189b      	adds	r3, r3, r2
 8000c3e:	4053      	eors	r3, r2
 8000c40:	9305      	str	r3, [sp, #20]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 8000c42:	9b04      	ldr	r3, [sp, #16]
 8000c44:	1b1b      	subs	r3, r3, r4
 8000c46:	17da      	asrs	r2, r3, #31
 8000c48:	1899      	adds	r1, r3, r2
 8000c4a:	4051      	eors	r1, r2
 8000c4c:	17da      	asrs	r2, r3, #31
 8000c4e:	1ad3      	subs	r3, r2, r3
 8000c50:	4053      	eors	r3, r2
 8000c52:	930d      	str	r3, [sp, #52]	@ 0x34
    int XAddway = Xstart < Xend ? 1 : -1;
 8000c54:	2301      	movs	r3, #1
 8000c56:	930a      	str	r3, [sp, #40]	@ 0x28
 8000c58:	9b03      	ldr	r3, [sp, #12]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 8000c5a:	9108      	str	r1, [sp, #32]
    int XAddway = Xstart < Xend ? 1 : -1;
 8000c5c:	4298      	cmp	r0, r3
 8000c5e:	d302      	bcc.n	8000c66 <Paint_DrawLine+0x72>
 8000c60:	2301      	movs	r3, #1
 8000c62:	425b      	negs	r3, r3
 8000c64:	930a      	str	r3, [sp, #40]	@ 0x28
    int YAddway = Ystart < Yend ? 1 : -1;
 8000c66:	2301      	movs	r3, #1
 8000c68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000c6a:	9b04      	ldr	r3, [sp, #16]
 8000c6c:	429c      	cmp	r4, r3
 8000c6e:	d302      	bcc.n	8000c76 <Paint_DrawLine+0x82>
 8000c70:	2301      	movs	r3, #1
 8000c72:	425b      	negs	r3, r3
 8000c74:	930b      	str	r3, [sp, #44]	@ 0x2c
    char Dotted_Len = 0;
 8000c76:	2600      	movs	r6, #0
    int Esp = dx + dy;
 8000c78:	9b05      	ldr	r3, [sp, #20]
 8000c7a:	9a08      	ldr	r2, [sp, #32]
 8000c7c:	1a9f      	subs	r7, r3, r2
        Dotted_Len++;
 8000c7e:	1c73      	adds	r3, r6, #1
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	9309      	str	r3, [sp, #36]	@ 0x24
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 8000c84:	9b07      	ldr	r3, [sp, #28]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d12e      	bne.n	8000ce8 <Paint_DrawLine+0xf4>
 8000c8a:	2103      	movs	r1, #3
 8000c8c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000c8e:	f7ff fad5 	bl	800023c <__aeabi_uidivmod>
 8000c92:	b2ce      	uxtb	r6, r1
 8000c94:	2e00      	cmp	r6, #0
 8000c96:	d127      	bne.n	8000ce8 <Paint_DrawLine+0xf4>
						if(Color)
 8000c98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d01f      	beq.n	8000cde <Paint_DrawLine+0xea>
							Paint_DrawPoint(Xpoint, Ypoint, BLACK, Line_width, DOT_STYLE_DFT);
 8000c9e:	0032      	movs	r2, r6
 8000ca0:	9b07      	ldr	r3, [sp, #28]
 8000ca2:	9300      	str	r3, [sp, #0]
 8000ca4:	9b06      	ldr	r3, [sp, #24]
							Paint_DrawPoint(Xpoint, Ypoint, WHITE, Line_width, DOT_STYLE_DFT);
 8000ca6:	0021      	movs	r1, r4
 8000ca8:	0028      	movs	r0, r5
 8000caa:	f7ff ff3b 	bl	8000b24 <Paint_DrawPoint>
        if (2 * Esp >= dy) {
 8000cae:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8000cb0:	007b      	lsls	r3, r7, #1
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	dc07      	bgt.n	8000cc6 <Paint_DrawLine+0xd2>
            if (Xpoint == Xend)
 8000cb6:	9b03      	ldr	r3, [sp, #12]
 8000cb8:	42ab      	cmp	r3, r5
 8000cba:	d0ba      	beq.n	8000c32 <Paint_DrawLine+0x3e>
            Esp += dy;
 8000cbc:	9b08      	ldr	r3, [sp, #32]
 8000cbe:	1aff      	subs	r7, r7, r3
            Xpoint += XAddway;
 8000cc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8000cc2:	18ed      	adds	r5, r5, r3
 8000cc4:	b2ad      	uxth	r5, r5
        if (2 * Esp <= dx) {
 8000cc6:	9a05      	ldr	r2, [sp, #20]
 8000cc8:	007b      	lsls	r3, r7, #1
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	dbd7      	blt.n	8000c7e <Paint_DrawLine+0x8a>
            if (Ypoint == Yend)
 8000cce:	9b04      	ldr	r3, [sp, #16]
 8000cd0:	42a3      	cmp	r3, r4
 8000cd2:	d0ae      	beq.n	8000c32 <Paint_DrawLine+0x3e>
            Ypoint += YAddway;
 8000cd4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
            Esp += dx;
 8000cd6:	18bf      	adds	r7, r7, r2
            Ypoint += YAddway;
 8000cd8:	18e4      	adds	r4, r4, r3
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	e7cf      	b.n	8000c7e <Paint_DrawLine+0x8a>
							Paint_DrawPoint(Xpoint, Ypoint, WHITE, Line_width, DOT_STYLE_DFT);
 8000cde:	9b07      	ldr	r3, [sp, #28]
 8000ce0:	4a08      	ldr	r2, [pc, #32]	@ (8000d04 <Paint_DrawLine+0x110>)
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	9b06      	ldr	r3, [sp, #24]
 8000ce6:	e7de      	b.n	8000ca6 <Paint_DrawLine+0xb2>
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 8000ce8:	2301      	movs	r3, #1
 8000cea:	0021      	movs	r1, r4
 8000cec:	9300      	str	r3, [sp, #0]
 8000cee:	0028      	movs	r0, r5
 8000cf0:	9b06      	ldr	r3, [sp, #24]
 8000cf2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8000cf4:	f7ff ff16 	bl	8000b24 <Paint_DrawPoint>
        Dotted_Len++;
 8000cf8:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8000cfa:	e7d8      	b.n	8000cae <Paint_DrawLine+0xba>
 8000cfc:	200001e4 	.word	0x200001e4
 8000d00:	080054b7 	.word	0x080054b7
 8000d04:	0000ffff 	.word	0x0000ffff

08000d08 <Paint_DrawRectangle>:
    Line_width: Line width
    Draw_Fill : Whether to fill the inside of the rectangle
******************************************************************************/
void Paint_DrawRectangle(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                         UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill)
{
 8000d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d0a:	b089      	sub	sp, #36	@ 0x24
 8000d0c:	001e      	movs	r6, r3
 8000d0e:	ab0e      	add	r3, sp, #56	@ 0x38
 8000d10:	881d      	ldrh	r5, [r3, #0]
 8000d12:	ab0f      	add	r3, sp, #60	@ 0x3c
 8000d14:	781f      	ldrb	r7, [r3, #0]
 8000d16:	ab10      	add	r3, sp, #64	@ 0x40
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	9005      	str	r0, [sp, #20]
 8000d1c:	9307      	str	r3, [sp, #28]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8000d1e:	4b27      	ldr	r3, [pc, #156]	@ (8000dbc <Paint_DrawRectangle+0xb4>)
{
 8000d20:	9206      	str	r2, [sp, #24]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8000d22:	889a      	ldrh	r2, [r3, #4]
{
 8000d24:	000c      	movs	r4, r1
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8000d26:	4282      	cmp	r2, r0
 8000d28:	d307      	bcc.n	8000d3a <Paint_DrawRectangle+0x32>
 8000d2a:	88db      	ldrh	r3, [r3, #6]
 8000d2c:	42a3      	cmp	r3, r4
 8000d2e:	d304      	bcc.n	8000d3a <Paint_DrawRectangle+0x32>
 8000d30:	9906      	ldr	r1, [sp, #24]
 8000d32:	428a      	cmp	r2, r1
 8000d34:	d301      	bcc.n	8000d3a <Paint_DrawRectangle+0x32>
        Xend > Paint.Width || Yend > Paint.Height) {
 8000d36:	42b3      	cmp	r3, r6
 8000d38:	d204      	bcs.n	8000d44 <Paint_DrawRectangle+0x3c>
        Debug("Input exceeds the normal display range\r\n");
 8000d3a:	4821      	ldr	r0, [pc, #132]	@ (8000dc0 <Paint_DrawRectangle+0xb8>)
 8000d3c:	f001 fd3a 	bl	80027b4 <puts>
        Paint_DrawLine(Xstart, Ystart, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
        Paint_DrawLine(Xstart, Ystart, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
        Paint_DrawLine(Xend, Yend, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
        Paint_DrawLine(Xend, Yend, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
    }
}
 8000d40:	b009      	add	sp, #36	@ 0x24
 8000d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (Draw_Fill) {
 8000d44:	9b07      	ldr	r3, [sp, #28]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d134      	bne.n	8000db4 <Paint_DrawRectangle+0xac>
        Paint_DrawLine(Xstart, Ystart, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 8000d4a:	9b07      	ldr	r3, [sp, #28]
 8000d4c:	0021      	movs	r1, r4
 8000d4e:	9a06      	ldr	r2, [sp, #24]
 8000d50:	9805      	ldr	r0, [sp, #20]
 8000d52:	9302      	str	r3, [sp, #8]
 8000d54:	9701      	str	r7, [sp, #4]
 8000d56:	0023      	movs	r3, r4
 8000d58:	9500      	str	r5, [sp, #0]
 8000d5a:	f7ff ff4b 	bl	8000bf4 <Paint_DrawLine>
        Paint_DrawLine(Xstart, Ystart, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 8000d5e:	9b07      	ldr	r3, [sp, #28]
 8000d60:	9a05      	ldr	r2, [sp, #20]
 8000d62:	0021      	movs	r1, r4
 8000d64:	0010      	movs	r0, r2
 8000d66:	9302      	str	r3, [sp, #8]
 8000d68:	9701      	str	r7, [sp, #4]
 8000d6a:	0033      	movs	r3, r6
 8000d6c:	9500      	str	r5, [sp, #0]
 8000d6e:	f7ff ff41 	bl	8000bf4 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 8000d72:	9b07      	ldr	r3, [sp, #28]
 8000d74:	9a06      	ldr	r2, [sp, #24]
 8000d76:	0031      	movs	r1, r6
 8000d78:	0010      	movs	r0, r2
 8000d7a:	9302      	str	r3, [sp, #8]
 8000d7c:	9701      	str	r7, [sp, #4]
 8000d7e:	0023      	movs	r3, r4
 8000d80:	9500      	str	r5, [sp, #0]
 8000d82:	f7ff ff37 	bl	8000bf4 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 8000d86:	9b07      	ldr	r3, [sp, #28]
 8000d88:	0031      	movs	r1, r6
 8000d8a:	9302      	str	r3, [sp, #8]
 8000d8c:	9a05      	ldr	r2, [sp, #20]
 8000d8e:	0033      	movs	r3, r6
 8000d90:	9806      	ldr	r0, [sp, #24]
 8000d92:	9701      	str	r7, [sp, #4]
 8000d94:	9500      	str	r5, [sp, #0]
 8000d96:	f7ff ff2d 	bl	8000bf4 <Paint_DrawLine>
 8000d9a:	e7d1      	b.n	8000d40 <Paint_DrawRectangle+0x38>
            Paint_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color , Line_width, LINE_STYLE_SOLID);
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	0021      	movs	r1, r4
 8000da0:	9302      	str	r3, [sp, #8]
 8000da2:	9a06      	ldr	r2, [sp, #24]
 8000da4:	0023      	movs	r3, r4
 8000da6:	9805      	ldr	r0, [sp, #20]
 8000da8:	9701      	str	r7, [sp, #4]
 8000daa:	9500      	str	r5, [sp, #0]
 8000dac:	f7ff ff22 	bl	8000bf4 <Paint_DrawLine>
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 8000db0:	3401      	adds	r4, #1
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	42b4      	cmp	r4, r6
 8000db6:	d3f1      	bcc.n	8000d9c <Paint_DrawRectangle+0x94>
 8000db8:	e7c2      	b.n	8000d40 <Paint_DrawRectangle+0x38>
 8000dba:	46c0      	nop			@ (mov r8, r8)
 8000dbc:	200001e4 	.word	0x200001e4
 8000dc0:	080054f5 	.word	0x080054f5

08000dc4 <Paint_DrawCircle>:
    Line_width: Line width
    Draw_Fill : Whether to fill the inside of the Circle
******************************************************************************/
void Paint_DrawCircle(UWORD X_Center, UWORD Y_Center, UWORD Radius,
                      UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill)
{
 8000dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dc6:	b08f      	sub	sp, #60	@ 0x3c
 8000dc8:	001f      	movs	r7, r3
 8000dca:	ab14      	add	r3, sp, #80	@ 0x50
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	9006      	str	r0, [sp, #24]
 8000dd0:	9307      	str	r3, [sp, #28]
 8000dd2:	ab15      	add	r3, sp, #84	@ 0x54
 8000dd4:	781d      	ldrb	r5, [r3, #0]
    if (X_Center > Paint.Width || Y_Center >= Paint.Height) {
 8000dd6:	4b90      	ldr	r3, [pc, #576]	@ (8001018 <Paint_DrawCircle+0x254>)
{
 8000dd8:	9104      	str	r1, [sp, #16]
    if (X_Center > Paint.Width || Y_Center >= Paint.Height) {
 8000dda:	8899      	ldrh	r1, [r3, #4]
 8000ddc:	4281      	cmp	r1, r0
 8000dde:	d303      	bcc.n	8000de8 <Paint_DrawCircle+0x24>
 8000de0:	88db      	ldrh	r3, [r3, #6]
 8000de2:	9904      	ldr	r1, [sp, #16]
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d804      	bhi.n	8000df2 <Paint_DrawCircle+0x2e>
        Debug("Paint_DrawCircle Input exceeds the normal display range\r\n");
 8000de8:	488c      	ldr	r0, [pc, #560]	@ (800101c <Paint_DrawCircle+0x258>)
 8000dea:	f001 fce3 	bl	80027b4 <puts>
                YCurrent --;
            }
            XCurrent ++;
        }
    }
}
 8000dee:	b00f      	add	sp, #60	@ 0x3c
 8000df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    YCurrent = Radius;
 8000df2:	b213      	sxth	r3, r2
 8000df4:	9303      	str	r3, [sp, #12]
    int16_t Esp = 3 - (Radius << 1 );
 8000df6:	2303      	movs	r3, #3
 8000df8:	0052      	lsls	r2, r2, #1
 8000dfa:	1a9b      	subs	r3, r3, r2
 8000dfc:	b21b      	sxth	r3, r3
 8000dfe:	9305      	str	r3, [sp, #20]
    XCurrent = 0;
 8000e00:	2300      	movs	r3, #0
    if (Draw_Fill == DRAW_FILL_FULL) {
 8000e02:	2d01      	cmp	r5, #1
 8000e04:	d100      	bne.n	8000e08 <Paint_DrawCircle+0x44>
 8000e06:	e0e4      	b.n	8000fd2 <Paint_DrawCircle+0x20e>
            Paint_DrawPoint(X_Center + XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//1
 8000e08:	2401      	movs	r4, #1
    XCurrent = 0;
 8000e0a:	930a      	str	r3, [sp, #40]	@ 0x28
        while (XCurrent <= YCurrent ) {
 8000e0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8000e0e:	9a03      	ldr	r2, [sp, #12]
 8000e10:	4293      	cmp	r3, r2
 8000e12:	dcec      	bgt.n	8000dee <Paint_DrawCircle+0x2a>
            Paint_DrawPoint(X_Center + XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//1
 8000e14:	466b      	mov	r3, sp
 8000e16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000e18:	9308      	str	r3, [sp, #32]
 8000e1a:	9a08      	ldr	r2, [sp, #32]
 8000e1c:	9b06      	ldr	r3, [sp, #24]
 8000e1e:	189b      	adds	r3, r3, r2
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000e24:	466b      	mov	r3, sp
 8000e26:	9a04      	ldr	r2, [sp, #16]
 8000e28:	899b      	ldrh	r3, [r3, #12]
 8000e2a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8000e2c:	189d      	adds	r5, r3, r2
 8000e2e:	b2ad      	uxth	r5, r5
 8000e30:	0029      	movs	r1, r5
 8000e32:	003a      	movs	r2, r7
 8000e34:	9309      	str	r3, [sp, #36]	@ 0x24
 8000e36:	9400      	str	r4, [sp, #0]
 8000e38:	9b07      	ldr	r3, [sp, #28]
 8000e3a:	f7ff fe73 	bl	8000b24 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//2
 8000e3e:	9a08      	ldr	r2, [sp, #32]
 8000e40:	9b06      	ldr	r3, [sp, #24]
 8000e42:	0029      	movs	r1, r5
 8000e44:	1a9b      	subs	r3, r3, r2
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	930c      	str	r3, [sp, #48]	@ 0x30
 8000e4a:	003a      	movs	r2, r7
 8000e4c:	9b07      	ldr	r3, [sp, #28]
 8000e4e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8000e50:	9400      	str	r4, [sp, #0]
 8000e52:	f7ff fe67 	bl	8000b24 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//3
 8000e56:	9b06      	ldr	r3, [sp, #24]
 8000e58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000e5a:	9400      	str	r4, [sp, #0]
 8000e5c:	1a9e      	subs	r6, r3, r2
 8000e5e:	9a08      	ldr	r2, [sp, #32]
 8000e60:	9b04      	ldr	r3, [sp, #16]
 8000e62:	b2b6      	uxth	r6, r6
 8000e64:	189b      	adds	r3, r3, r2
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	930d      	str	r3, [sp, #52]	@ 0x34
 8000e6a:	0030      	movs	r0, r6
 8000e6c:	003a      	movs	r2, r7
 8000e6e:	9b07      	ldr	r3, [sp, #28]
 8000e70:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8000e72:	f7ff fe57 	bl	8000b24 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//4
 8000e76:	9b04      	ldr	r3, [sp, #16]
 8000e78:	9a08      	ldr	r2, [sp, #32]
 8000e7a:	0030      	movs	r0, r6
 8000e7c:	1a9d      	subs	r5, r3, r2
 8000e7e:	b2ad      	uxth	r5, r5
 8000e80:	003a      	movs	r2, r7
 8000e82:	0029      	movs	r1, r5
 8000e84:	9b07      	ldr	r3, [sp, #28]
 8000e86:	9400      	str	r4, [sp, #0]
 8000e88:	f7ff fe4c 	bl	8000b24 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//5
 8000e8c:	9b04      	ldr	r3, [sp, #16]
 8000e8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000e90:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8000e92:	1a9e      	subs	r6, r3, r2
 8000e94:	b2b6      	uxth	r6, r6
 8000e96:	0031      	movs	r1, r6
 8000e98:	003a      	movs	r2, r7
 8000e9a:	9b07      	ldr	r3, [sp, #28]
 8000e9c:	9400      	str	r4, [sp, #0]
 8000e9e:	f7ff fe41 	bl	8000b24 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//6
 8000ea2:	0031      	movs	r1, r6
 8000ea4:	003a      	movs	r2, r7
 8000ea6:	9b07      	ldr	r3, [sp, #28]
 8000ea8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8000eaa:	9400      	str	r4, [sp, #0]
 8000eac:	f7ff fe3a 	bl	8000b24 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//7
 8000eb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000eb2:	9a06      	ldr	r2, [sp, #24]
 8000eb4:	0029      	movs	r1, r5
 8000eb6:	189e      	adds	r6, r3, r2
 8000eb8:	b2b6      	uxth	r6, r6
 8000eba:	003a      	movs	r2, r7
 8000ebc:	0030      	movs	r0, r6
 8000ebe:	9b07      	ldr	r3, [sp, #28]
 8000ec0:	9400      	str	r4, [sp, #0]
 8000ec2:	f7ff fe2f 	bl	8000b24 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//0
 8000ec6:	003a      	movs	r2, r7
 8000ec8:	9b07      	ldr	r3, [sp, #28]
 8000eca:	0030      	movs	r0, r6
 8000ecc:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8000ece:	9400      	str	r4, [sp, #0]
 8000ed0:	f7ff fe28 	bl	8000b24 <Paint_DrawPoint>
                Esp += 4 * XCurrent + 6;
 8000ed4:	466b      	mov	r3, sp
            if (Esp < 0 )
 8000ed6:	9a05      	ldr	r2, [sp, #20]
                Esp += 4 * XCurrent + 6;
 8000ed8:	8a9b      	ldrh	r3, [r3, #20]
            if (Esp < 0 )
 8000eda:	2a00      	cmp	r2, #0
 8000edc:	db00      	blt.n	8000ee0 <Paint_DrawCircle+0x11c>
 8000ede:	e08d      	b.n	8000ffc <Paint_DrawCircle+0x238>
                Esp += 4 * XCurrent + 6;
 8000ee0:	9a08      	ldr	r2, [sp, #32]
 8000ee2:	3306      	adds	r3, #6
 8000ee4:	0092      	lsls	r2, r2, #2
 8000ee6:	189b      	adds	r3, r3, r2
 8000ee8:	b21b      	sxth	r3, r3
 8000eea:	9305      	str	r3, [sp, #20]
            XCurrent ++;
 8000eec:	9b08      	ldr	r3, [sp, #32]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	b21b      	sxth	r3, r3
 8000ef2:	930a      	str	r3, [sp, #40]	@ 0x28
 8000ef4:	e78a      	b.n	8000e0c <Paint_DrawCircle+0x48>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//1
 8000ef6:	9a06      	ldr	r2, [sp, #24]
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	1912      	adds	r2, r2, r4
 8000efc:	b292      	uxth	r2, r2
 8000efe:	920a      	str	r2, [sp, #40]	@ 0x28
 8000f00:	9a04      	ldr	r2, [sp, #16]
 8000f02:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8000f04:	189e      	adds	r6, r3, r2
 8000f06:	b2b6      	uxth	r6, r6
 8000f08:	0031      	movs	r1, r6
 8000f0a:	003a      	movs	r2, r7
 8000f0c:	9307      	str	r3, [sp, #28]
 8000f0e:	9500      	str	r5, [sp, #0]
 8000f10:	2301      	movs	r3, #1
 8000f12:	f7ff fe07 	bl	8000b24 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//2
 8000f16:	9b06      	ldr	r3, [sp, #24]
 8000f18:	0031      	movs	r1, r6
 8000f1a:	1b1b      	subs	r3, r3, r4
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000f20:	003a      	movs	r2, r7
 8000f22:	2301      	movs	r3, #1
 8000f24:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8000f26:	9500      	str	r5, [sp, #0]
 8000f28:	f7ff fdfc 	bl	8000b24 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//3
 8000f2c:	9a07      	ldr	r2, [sp, #28]
 8000f2e:	9b06      	ldr	r3, [sp, #24]
 8000f30:	9500      	str	r5, [sp, #0]
 8000f32:	1a9b      	subs	r3, r3, r2
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	9309      	str	r3, [sp, #36]	@ 0x24
 8000f38:	9b04      	ldr	r3, [sp, #16]
 8000f3a:	003a      	movs	r2, r7
 8000f3c:	191b      	adds	r3, r3, r4
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	930c      	str	r3, [sp, #48]	@ 0x30
 8000f42:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8000f44:	2301      	movs	r3, #1
 8000f46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000f48:	f7ff fdec 	bl	8000b24 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//4
 8000f4c:	9b04      	ldr	r3, [sp, #16]
 8000f4e:	003a      	movs	r2, r7
 8000f50:	1b1c      	subs	r4, r3, r4
 8000f52:	b2a4      	uxth	r4, r4
 8000f54:	2301      	movs	r3, #1
 8000f56:	0021      	movs	r1, r4
 8000f58:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000f5a:	9500      	str	r5, [sp, #0]
 8000f5c:	f7ff fde2 	bl	8000b24 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//5
 8000f60:	9b04      	ldr	r3, [sp, #16]
 8000f62:	9a07      	ldr	r2, [sp, #28]
 8000f64:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8000f66:	1a9e      	subs	r6, r3, r2
 8000f68:	b2b6      	uxth	r6, r6
 8000f6a:	0031      	movs	r1, r6
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	003a      	movs	r2, r7
 8000f70:	9500      	str	r5, [sp, #0]
 8000f72:	f7ff fdd7 	bl	8000b24 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//6
 8000f76:	0031      	movs	r1, r6
 8000f78:	2301      	movs	r3, #1
 8000f7a:	003a      	movs	r2, r7
 8000f7c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8000f7e:	9500      	str	r5, [sp, #0]
 8000f80:	f7ff fdd0 	bl	8000b24 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//7
 8000f84:	9b07      	ldr	r3, [sp, #28]
 8000f86:	003a      	movs	r2, r7
 8000f88:	005e      	lsls	r6, r3, #1
 8000f8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000f8c:	0021      	movs	r1, r4
 8000f8e:	199e      	adds	r6, r3, r6
 8000f90:	b2b6      	uxth	r6, r6
 8000f92:	2301      	movs	r3, #1
 8000f94:	0030      	movs	r0, r6
 8000f96:	9500      	str	r5, [sp, #0]
 8000f98:	f7ff fdc4 	bl	8000b24 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	003a      	movs	r2, r7
 8000fa0:	0030      	movs	r0, r6
 8000fa2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8000fa4:	9500      	str	r5, [sp, #0]
 8000fa6:	f7ff fdbd 	bl	8000b24 <Paint_DrawPoint>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 8000faa:	9b07      	ldr	r3, [sp, #28]
 8000fac:	3301      	adds	r3, #1
 8000fae:	b21b      	sxth	r3, r3
 8000fb0:	466a      	mov	r2, sp
 8000fb2:	8c14      	ldrh	r4, [r2, #32]
 8000fb4:	9a03      	ldr	r2, [sp, #12]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	da9d      	bge.n	8000ef6 <Paint_DrawCircle+0x132>
                Esp += 4 * XCurrent + 6;
 8000fba:	466b      	mov	r3, sp
            if (Esp < 0 )
 8000fbc:	9a05      	ldr	r2, [sp, #20]
                Esp += 4 * XCurrent + 6;
 8000fbe:	8a9b      	ldrh	r3, [r3, #20]
            if (Esp < 0 )
 8000fc0:	2a00      	cmp	r2, #0
 8000fc2:	da0e      	bge.n	8000fe2 <Paint_DrawCircle+0x21e>
                Esp += 4 * XCurrent + 6;
 8000fc4:	3306      	adds	r3, #6
 8000fc6:	00a2      	lsls	r2, r4, #2
 8000fc8:	189b      	adds	r3, r3, r2
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	9305      	str	r3, [sp, #20]
            XCurrent ++;
 8000fce:	3401      	adds	r4, #1
 8000fd0:	b223      	sxth	r3, r4
    XCurrent = 0;
 8000fd2:	9308      	str	r3, [sp, #32]
        while (XCurrent <= YCurrent ) { //Realistic circles
 8000fd4:	9b08      	ldr	r3, [sp, #32]
 8000fd6:	9a03      	ldr	r2, [sp, #12]
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	dd00      	ble.n	8000fde <Paint_DrawCircle+0x21a>
 8000fdc:	e707      	b.n	8000dee <Paint_DrawCircle+0x2a>
 8000fde:	9b08      	ldr	r3, [sp, #32]
 8000fe0:	e7e6      	b.n	8000fb0 <Paint_DrawCircle+0x1ec>
                Esp += 10 + 4 * (XCurrent - YCurrent );
 8000fe2:	9903      	ldr	r1, [sp, #12]
 8000fe4:	9a08      	ldr	r2, [sp, #32]
 8000fe6:	330a      	adds	r3, #10
 8000fe8:	1a52      	subs	r2, r2, r1
 8000fea:	0092      	lsls	r2, r2, #2
 8000fec:	18d3      	adds	r3, r2, r3
 8000fee:	b21b      	sxth	r3, r3
 8000ff0:	9305      	str	r3, [sp, #20]
                YCurrent --;
 8000ff2:	000b      	movs	r3, r1
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	b21b      	sxth	r3, r3
 8000ff8:	9303      	str	r3, [sp, #12]
 8000ffa:	e7e8      	b.n	8000fce <Paint_DrawCircle+0x20a>
                Esp += 10 + 4 * (XCurrent - YCurrent );
 8000ffc:	9903      	ldr	r1, [sp, #12]
 8000ffe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8001000:	330a      	adds	r3, #10
 8001002:	1a52      	subs	r2, r2, r1
 8001004:	0092      	lsls	r2, r2, #2
 8001006:	18d3      	adds	r3, r2, r3
 8001008:	b21b      	sxth	r3, r3
 800100a:	9305      	str	r3, [sp, #20]
                YCurrent --;
 800100c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800100e:	3b01      	subs	r3, #1
 8001010:	b21b      	sxth	r3, r3
 8001012:	9303      	str	r3, [sp, #12]
 8001014:	e76a      	b.n	8000eec <Paint_DrawCircle+0x128>
 8001016:	46c0      	nop			@ (mov r8, r8)
 8001018:	200001e4 	.word	0x200001e4
 800101c:	08005524 	.word	0x08005524

08001020 <Paint_DrawChar>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8001020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001022:	b087      	sub	sp, #28
 8001024:	001c      	movs	r4, r3
 8001026:	ab0c      	add	r3, sp, #48	@ 0x30
 8001028:	881b      	ldrh	r3, [r3, #0]
 800102a:	9002      	str	r0, [sp, #8]
 800102c:	9304      	str	r3, [sp, #16]
 800102e:	ab0d      	add	r3, sp, #52	@ 0x34
 8001030:	881b      	ldrh	r3, [r3, #0]
 8001032:	9103      	str	r1, [sp, #12]
 8001034:	9305      	str	r3, [sp, #20]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8001036:	4b24      	ldr	r3, [pc, #144]	@ (80010c8 <Paint_DrawChar+0xa8>)
 8001038:	8899      	ldrh	r1, [r3, #4]
 800103a:	4281      	cmp	r1, r0
 800103c:	d303      	bcc.n	8001046 <Paint_DrawChar+0x26>
 800103e:	88db      	ldrh	r3, [r3, #6]
 8001040:	9903      	ldr	r1, [sp, #12]
 8001042:	428b      	cmp	r3, r1
 8001044:	d204      	bcs.n	8001050 <Paint_DrawChar+0x30>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 8001046:	4821      	ldr	r0, [pc, #132]	@ (80010cc <Paint_DrawChar+0xac>)
 8001048:	f001 fbb4 	bl	80027b4 <puts>
                ptr++;
        }// Write a line
        if (Font->Width % 8 != 0)
            ptr++;
    }// Write all
}
 800104c:	b007      	add	sp, #28
 800104e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8001050:	2307      	movs	r3, #7
 8001052:	88a1      	ldrh	r1, [r4, #4]
 8001054:	3a20      	subs	r2, #32
 8001056:	400b      	ands	r3, r1
 8001058:	1e58      	subs	r0, r3, #1
 800105a:	4183      	sbcs	r3, r0
 800105c:	08c9      	lsrs	r1, r1, #3
 800105e:	185b      	adds	r3, r3, r1
 8001060:	0011      	movs	r1, r2
 8001062:	88e2      	ldrh	r2, [r4, #6]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8001064:	6825      	ldr	r5, [r4, #0]
    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8001066:	434a      	muls	r2, r1
 8001068:	435a      	muls	r2, r3
    for (Page = 0; Page < Font->Height; Page ++ ) {
 800106a:	2300      	movs	r3, #0
    const unsigned char *ptr = &Font->table[Char_Offset];
 800106c:	18ad      	adds	r5, r5, r2
    for (Page = 0; Page < Font->Height; Page ++ ) {
 800106e:	9301      	str	r3, [sp, #4]
 8001070:	88e3      	ldrh	r3, [r4, #6]
 8001072:	9a01      	ldr	r2, [sp, #4]
 8001074:	4293      	cmp	r3, r2
 8001076:	d9e9      	bls.n	800104c <Paint_DrawChar+0x2c>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8001078:	2600      	movs	r6, #0
 800107a:	e016      	b.n	80010aa <Paint_DrawChar+0x8a>
					Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800107c:	9b02      	ldr	r3, [sp, #8]
 800107e:	9a01      	ldr	r2, [sp, #4]
 8001080:	1998      	adds	r0, r3, r6
 8001082:	9b03      	ldr	r3, [sp, #12]
 8001084:	2707      	movs	r7, #7
 8001086:	1899      	adds	r1, r3, r2
				if (*ptr & (0x80 >> (Column % 8))){
 8001088:	2280      	movs	r2, #128	@ 0x80
 800108a:	4037      	ands	r7, r6
 800108c:	413a      	asrs	r2, r7
 800108e:	782b      	ldrb	r3, [r5, #0]
					Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8001090:	b280      	uxth	r0, r0
 8001092:	b289      	uxth	r1, r1
				if (*ptr & (0x80 >> (Column % 8))){
 8001094:	421a      	tst	r2, r3
 8001096:	d014      	beq.n	80010c2 <Paint_DrawChar+0xa2>
					Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8001098:	9a04      	ldr	r2, [sp, #16]
                ptr++;
 800109a:	3f07      	subs	r7, #7
 800109c:	427b      	negs	r3, r7
 800109e:	415f      	adcs	r7, r3
					Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 80010a0:	f7ff fc52 	bl	8000948 <Paint_SetPixel>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 80010a4:	3601      	adds	r6, #1
                ptr++;
 80010a6:	19ed      	adds	r5, r5, r7
        for (Column = 0; Column < Font->Width; Column ++ ) {
 80010a8:	b2b6      	uxth	r6, r6
 80010aa:	88a3      	ldrh	r3, [r4, #4]
 80010ac:	429e      	cmp	r6, r3
 80010ae:	d3e5      	bcc.n	800107c <Paint_DrawChar+0x5c>
        if (Font->Width % 8 != 0)
 80010b0:	2207      	movs	r2, #7
 80010b2:	4013      	ands	r3, r2
            ptr++;
 80010b4:	1e5a      	subs	r2, r3, #1
 80010b6:	4193      	sbcs	r3, r2
 80010b8:	18ed      	adds	r5, r5, r3
    for (Page = 0; Page < Font->Height; Page ++ ) {
 80010ba:	9b01      	ldr	r3, [sp, #4]
 80010bc:	3301      	adds	r3, #1
 80010be:	b29b      	uxth	r3, r3
 80010c0:	e7d5      	b.n	800106e <Paint_DrawChar+0x4e>
					Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 80010c2:	9a05      	ldr	r2, [sp, #20]
 80010c4:	e7e9      	b.n	800109a <Paint_DrawChar+0x7a>
 80010c6:	46c0      	nop			@ (mov r8, r8)
 80010c8:	200001e4 	.word	0x200001e4
 80010cc:	08005564 	.word	0x08005564

080010d0 <Paint_DrawString_EN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 80010d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010d2:	b087      	sub	sp, #28
 80010d4:	001f      	movs	r7, r3
 80010d6:	ab0c      	add	r3, sp, #48	@ 0x30
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	9102      	str	r1, [sp, #8]
 80010dc:	9304      	str	r3, [sp, #16]
 80010de:	ab0d      	add	r3, sp, #52	@ 0x34
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	9203      	str	r2, [sp, #12]
 80010e4:	9305      	str	r3, [sp, #20]
    UWORD Xpoint = Xstart;
    UWORD Ypoint = Ystart;
    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 80010e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001150 <Paint_DrawString_EN+0x80>)
{
 80010e8:	0006      	movs	r6, r0
    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 80010ea:	889a      	ldrh	r2, [r3, #4]
 80010ec:	4282      	cmp	r2, r0
 80010ee:	d304      	bcc.n	80010fa <Paint_DrawString_EN+0x2a>
 80010f0:	88db      	ldrh	r3, [r3, #6]
 80010f2:	000c      	movs	r4, r1
 80010f4:	0005      	movs	r5, r0
 80010f6:	428b      	cmp	r3, r1
 80010f8:	d224      	bcs.n	8001144 <Paint_DrawString_EN+0x74>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 80010fa:	4816      	ldr	r0, [pc, #88]	@ (8001154 <Paint_DrawString_EN+0x84>)
 80010fc:	f001 fb5a 	bl	80027b4 <puts>
        pString ++;

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
    }
}
 8001100:	b007      	add	sp, #28
 8001102:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 8001104:	4812      	ldr	r0, [pc, #72]	@ (8001150 <Paint_DrawString_EN+0x80>)
 8001106:	88b9      	ldrh	r1, [r7, #4]
 8001108:	8880      	ldrh	r0, [r0, #4]
 800110a:	1949      	adds	r1, r1, r5
            Ypoint += Font->Height;
 800110c:	88fb      	ldrh	r3, [r7, #6]
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 800110e:	4281      	cmp	r1, r0
 8001110:	dd02      	ble.n	8001118 <Paint_DrawString_EN+0x48>
            Ypoint += Font->Height;
 8001112:	0035      	movs	r5, r6
 8001114:	191c      	adds	r4, r3, r4
 8001116:	b2a4      	uxth	r4, r4
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 8001118:	490d      	ldr	r1, [pc, #52]	@ (8001150 <Paint_DrawString_EN+0x80>)
 800111a:	18e3      	adds	r3, r4, r3
 800111c:	88c9      	ldrh	r1, [r1, #6]
 800111e:	428b      	cmp	r3, r1
 8001120:	dd01      	ble.n	8001126 <Paint_DrawString_EN+0x56>
 8001122:	0035      	movs	r5, r6
 8001124:	9c02      	ldr	r4, [sp, #8]
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Foreground, Color_Background);
 8001126:	9b05      	ldr	r3, [sp, #20]
 8001128:	0028      	movs	r0, r5
 800112a:	9301      	str	r3, [sp, #4]
 800112c:	9b04      	ldr	r3, [sp, #16]
 800112e:	0021      	movs	r1, r4
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	003b      	movs	r3, r7
 8001134:	f7ff ff74 	bl	8001020 <Paint_DrawChar>
        pString ++;
 8001138:	9b03      	ldr	r3, [sp, #12]
 800113a:	3301      	adds	r3, #1
 800113c:	9303      	str	r3, [sp, #12]
        Xpoint += Font->Width;
 800113e:	88bb      	ldrh	r3, [r7, #4]
 8001140:	18ed      	adds	r5, r5, r3
 8001142:	b2ad      	uxth	r5, r5
    while (* pString != '\0') {
 8001144:	9b03      	ldr	r3, [sp, #12]
 8001146:	781a      	ldrb	r2, [r3, #0]
 8001148:	2a00      	cmp	r2, #0
 800114a:	d1db      	bne.n	8001104 <Paint_DrawString_EN+0x34>
 800114c:	e7d8      	b.n	8001100 <Paint_DrawString_EN+0x30>
 800114e:	46c0      	nop			@ (mov r8, r8)
 8001150:	200001e4 	.word	0x200001e4
 8001154:	080055a2 	.word	0x080055a2

08001158 <Paint_DrawString_CN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_CN(UWORD Xstart, UWORD Ystart, const char * pString, cFONT* font,
                        UWORD Color_Foreground, UWORD Color_Background)
{
 8001158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800115a:	b087      	sub	sp, #28
 800115c:	001f      	movs	r7, r3
 800115e:	ab0c      	add	r3, sp, #48	@ 0x30
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	9103      	str	r1, [sp, #12]
 8001164:	9304      	str	r3, [sp, #16]
 8001166:	ab0d      	add	r3, sp, #52	@ 0x34
 8001168:	881b      	ldrh	r3, [r3, #0]
 800116a:	9201      	str	r2, [sp, #4]
 800116c:	9305      	str	r3, [sp, #20]
    const char* p_text = pString;
    int x = Xstart, y = Ystart;
 800116e:	9000      	str	r0, [sp, #0]
    int i, j,Num;

    /* Send the string character by character on EPD */
    while (*p_text != 0) {
 8001170:	9b01      	ldr	r3, [sp, #4]
 8001172:	781a      	ldrb	r2, [r3, #0]
 8001174:	2a00      	cmp	r2, #0
 8001176:	d101      	bne.n	800117c <Paint_DrawString_CN+0x24>
            p_text += 3;
            /* Decrement the column position by 16 */
            x += font->Width;
        }
    }
}
 8001178:	b007      	add	sp, #28
 800117a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            for(Num = 0; Num < font->size; Num++) {
 800117c:	2300      	movs	r3, #0
        if(*p_text <= 0x7F) {  //ASCII < 126
 800117e:	b251      	sxtb	r1, r2
            for(Num = 0; Num < font->size; Num++) {
 8001180:	88b8      	ldrh	r0, [r7, #4]
        if(*p_text <= 0x7F) {  //ASCII < 126
 8001182:	4299      	cmp	r1, r3
 8001184:	da3f      	bge.n	8001206 <Paint_DrawString_CN+0xae>
            for(Num = 0; Num < font->size; Num++) {
 8001186:	4283      	cmp	r3, r0
 8001188:	da12      	bge.n	80011b0 <Paint_DrawString_CN+0x58>
                if((*p_text== font->table[Num].index[0]) && (*(p_text+1) == font->table[Num].index[1])) {
 800118a:	21a6      	movs	r1, #166	@ 0xa6
 800118c:	4359      	muls	r1, r3
 800118e:	683d      	ldr	r5, [r7, #0]
 8001190:	186c      	adds	r4, r5, r1
 8001192:	5c69      	ldrb	r1, [r5, r1]
 8001194:	4291      	cmp	r1, r2
 8001196:	d173      	bne.n	8001280 <Paint_DrawString_CN+0x128>
 8001198:	9901      	ldr	r1, [sp, #4]
 800119a:	784d      	ldrb	r5, [r1, #1]
 800119c:	7861      	ldrb	r1, [r4, #1]
 800119e:	428d      	cmp	r5, r1
 80011a0:	d16e      	bne.n	8001280 <Paint_DrawString_CN+0x128>
                    for (j = 0; j < font->Height; j++) {
 80011a2:	2300      	movs	r3, #0
                    const char* ptr = &font->table[Num].matrix[0];
 80011a4:	3402      	adds	r4, #2
                    for (j = 0; j < font->Height; j++) {
 80011a6:	9302      	str	r3, [sp, #8]
 80011a8:	897b      	ldrh	r3, [r7, #10]
 80011aa:	9a02      	ldr	r2, [sp, #8]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	db65      	blt.n	800127c <Paint_DrawString_CN+0x124>
            p_text += 3;
 80011b0:	9b01      	ldr	r3, [sp, #4]
 80011b2:	3303      	adds	r3, #3
 80011b4:	9301      	str	r3, [sp, #4]
            x += font->Width;
 80011b6:	893b      	ldrh	r3, [r7, #8]
 80011b8:	e039      	b.n	800122e <Paint_DrawString_CN+0xd6>
									Paint_SetPixel(x + i, y + j, Color_Foreground);
 80011ba:	9b00      	ldr	r3, [sp, #0]
 80011bc:	9a02      	ldr	r2, [sp, #8]
 80011be:	18f0      	adds	r0, r6, r3
 80011c0:	9b03      	ldr	r3, [sp, #12]
								if (*ptr & (0x80 >> (i % 8))){
 80011c2:	2507      	movs	r5, #7
									Paint_SetPixel(x + i, y + j, Color_Foreground);
 80011c4:	1899      	adds	r1, r3, r2
								if (*ptr & (0x80 >> (i % 8))){
 80011c6:	2280      	movs	r2, #128	@ 0x80
 80011c8:	4035      	ands	r5, r6
 80011ca:	412a      	asrs	r2, r5
 80011cc:	7823      	ldrb	r3, [r4, #0]
									Paint_SetPixel(x + i, y + j, Color_Foreground);
 80011ce:	b280      	uxth	r0, r0
 80011d0:	b289      	uxth	r1, r1
								if (*ptr & (0x80 >> (i % 8))){
 80011d2:	421a      	tst	r2, r3
 80011d4:	d012      	beq.n	80011fc <Paint_DrawString_CN+0xa4>
									Paint_SetPixel(x + i, y + j, Color_Foreground);
 80011d6:	9a04      	ldr	r2, [sp, #16]
                                ptr++;
 80011d8:	3d07      	subs	r5, #7
 80011da:	426b      	negs	r3, r5
 80011dc:	415d      	adcs	r5, r3
									Paint_SetPixel(x + i, y + j, Color_Background);
 80011de:	f7ff fbb3 	bl	8000948 <Paint_SetPixel>
                                ptr++;
 80011e2:	1964      	adds	r4, r4, r5
                        for (i = 0; i < font->Width; i++) {
 80011e4:	3601      	adds	r6, #1
 80011e6:	893b      	ldrh	r3, [r7, #8]
 80011e8:	42b3      	cmp	r3, r6
 80011ea:	dce6      	bgt.n	80011ba <Paint_DrawString_CN+0x62>
                        if (font->Width % 8 != 0) {
 80011ec:	2207      	movs	r2, #7
 80011ee:	4013      	ands	r3, r2
                            ptr++;
 80011f0:	1e5a      	subs	r2, r3, #1
 80011f2:	4193      	sbcs	r3, r2
 80011f4:	18e4      	adds	r4, r4, r3
                    for (j = 0; j < font->Height; j++) {
 80011f6:	9b02      	ldr	r3, [sp, #8]
 80011f8:	3301      	adds	r3, #1
 80011fa:	e00f      	b.n	800121c <Paint_DrawString_CN+0xc4>
									Paint_SetPixel(x + i, y + j, Color_Background);
 80011fc:	9a05      	ldr	r2, [sp, #20]
 80011fe:	e7eb      	b.n	80011d8 <Paint_DrawString_CN+0x80>
                        for (i = 0; i < font->Width; i++) {
 8001200:	2600      	movs	r6, #0
 8001202:	e7f0      	b.n	80011e6 <Paint_DrawString_CN+0x8e>
            for(Num = 0; Num < font->size; Num++) {
 8001204:	3301      	adds	r3, #1
 8001206:	4283      	cmp	r3, r0
 8001208:	da0d      	bge.n	8001226 <Paint_DrawString_CN+0xce>
                if(*p_text== font->table[Num].index[0]) {
 800120a:	21a6      	movs	r1, #166	@ 0xa6
 800120c:	4359      	muls	r1, r3
 800120e:	683d      	ldr	r5, [r7, #0]
 8001210:	186c      	adds	r4, r5, r1
 8001212:	5c69      	ldrb	r1, [r5, r1]
 8001214:	4291      	cmp	r1, r2
 8001216:	d1f5      	bne.n	8001204 <Paint_DrawString_CN+0xac>
                    for (j = 0; j < font->Height; j++) {
 8001218:	2300      	movs	r3, #0
                    const char* ptr = &font->table[Num].matrix[0];
 800121a:	3402      	adds	r4, #2
                    for (j = 0; j < font->Height; j++) {
 800121c:	9302      	str	r3, [sp, #8]
 800121e:	897b      	ldrh	r3, [r7, #10]
 8001220:	9a02      	ldr	r2, [sp, #8]
 8001222:	4293      	cmp	r3, r2
 8001224:	dcec      	bgt.n	8001200 <Paint_DrawString_CN+0xa8>
            p_text += 1;
 8001226:	9b01      	ldr	r3, [sp, #4]
 8001228:	3301      	adds	r3, #1
 800122a:	9301      	str	r3, [sp, #4]
            x += font->ASCII_Width;
 800122c:	88fb      	ldrh	r3, [r7, #6]
            x += font->Width;
 800122e:	9a00      	ldr	r2, [sp, #0]
 8001230:	18d3      	adds	r3, r2, r3
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	e79c      	b.n	8001170 <Paint_DrawString_CN+0x18>
									Paint_SetPixel(x + i, y + j, Color_Foreground);
 8001236:	9b00      	ldr	r3, [sp, #0]
 8001238:	9a02      	ldr	r2, [sp, #8]
 800123a:	18f0      	adds	r0, r6, r3
 800123c:	9b03      	ldr	r3, [sp, #12]
								if (*ptr & (0x80 >> (i % 8))){
 800123e:	2507      	movs	r5, #7
									Paint_SetPixel(x + i, y + j, Color_Foreground);
 8001240:	1899      	adds	r1, r3, r2
								if (*ptr & (0x80 >> (i % 8))){
 8001242:	2280      	movs	r2, #128	@ 0x80
 8001244:	4035      	ands	r5, r6
 8001246:	412a      	asrs	r2, r5
 8001248:	7823      	ldrb	r3, [r4, #0]
									Paint_SetPixel(x + i, y + j, Color_Foreground);
 800124a:	b280      	uxth	r0, r0
 800124c:	b289      	uxth	r1, r1
								if (*ptr & (0x80 >> (i % 8))){
 800124e:	421a      	tst	r2, r3
 8001250:	d012      	beq.n	8001278 <Paint_DrawString_CN+0x120>
									Paint_SetPixel(x + i, y + j, Color_Foreground);
 8001252:	9a04      	ldr	r2, [sp, #16]
                                ptr++;
 8001254:	3d07      	subs	r5, #7
 8001256:	426b      	negs	r3, r5
 8001258:	415d      	adcs	r5, r3
									Paint_SetPixel(x + i, y + j, Color_Background);
 800125a:	f7ff fb75 	bl	8000948 <Paint_SetPixel>
                                ptr++;
 800125e:	1964      	adds	r4, r4, r5
                        for (i = 0; i < font->Width; i++) {
 8001260:	3601      	adds	r6, #1
 8001262:	893b      	ldrh	r3, [r7, #8]
 8001264:	429e      	cmp	r6, r3
 8001266:	dbe6      	blt.n	8001236 <Paint_DrawString_CN+0xde>
                        if (font->Width % 8 != 0) {
 8001268:	2207      	movs	r2, #7
 800126a:	4013      	ands	r3, r2
                            ptr++;
 800126c:	1e5a      	subs	r2, r3, #1
 800126e:	4193      	sbcs	r3, r2
 8001270:	18e4      	adds	r4, r4, r3
                    for (j = 0; j < font->Height; j++) {
 8001272:	9b02      	ldr	r3, [sp, #8]
 8001274:	3301      	adds	r3, #1
 8001276:	e796      	b.n	80011a6 <Paint_DrawString_CN+0x4e>
									Paint_SetPixel(x + i, y + j, Color_Background);
 8001278:	9a05      	ldr	r2, [sp, #20]
 800127a:	e7eb      	b.n	8001254 <Paint_DrawString_CN+0xfc>
                        for (i = 0; i < font->Width; i++) {
 800127c:	2600      	movs	r6, #0
 800127e:	e7f0      	b.n	8001262 <Paint_DrawString_CN+0x10a>
            for(Num = 0; Num < font->size; Num++) {
 8001280:	3301      	adds	r3, #1
 8001282:	e780      	b.n	8001186 <Paint_DrawString_CN+0x2e>

08001284 <OLED_1in51_WriteReg>:
/*******************************************************************************
function:
            Write register address and data
*******************************************************************************/
static void OLED_1in51_WriteReg(uint8_t Reg)
{
 8001284:	b570      	push	{r4, r5, r6, lr}
 8001286:	0005      	movs	r5, r0

#if USE_SPI_4W
    OLED_DC_0;
 8001288:	4c09      	ldr	r4, [pc, #36]	@ (80012b0 <OLED_1in51_WriteReg+0x2c>)
 800128a:	2200      	movs	r2, #0
 800128c:	0020      	movs	r0, r4
 800128e:	2102      	movs	r1, #2
 8001290:	f000 f9f0 	bl	8001674 <HAL_GPIO_WritePin>
    OLED_CS_0;
 8001294:	2200      	movs	r2, #0
 8001296:	2101      	movs	r1, #1
 8001298:	0020      	movs	r0, r4
 800129a:	f000 f9eb 	bl	8001674 <HAL_GPIO_WritePin>
    SPI4W_Write_Byte(Reg);
 800129e:	0028      	movs	r0, r5
 80012a0:	f7ff f9fe 	bl	80006a0 <SPI4W_Write_Byte>
    OLED_CS_1;
 80012a4:	2201      	movs	r2, #1
 80012a6:	0020      	movs	r0, r4
 80012a8:	0011      	movs	r1, r2
 80012aa:	f000 f9e3 	bl	8001674 <HAL_GPIO_WritePin>
	iic_wait_for_ack();
	iic_write_byte(Reg);
	iic_wait_for_ack();
	iic_stop();
#endif
}
 80012ae:	bd70      	pop	{r4, r5, r6, pc}
 80012b0:	48000400 	.word	0x48000400

080012b4 <OLED_1in51_WriteData>:

static void OLED_1in51_WriteData(uint8_t Data)
{
 80012b4:	b570      	push	{r4, r5, r6, lr}
 80012b6:	0005      	movs	r5, r0
    
#if USE_SPI_4W
    OLED_DC_1;
 80012b8:	4c09      	ldr	r4, [pc, #36]	@ (80012e0 <OLED_1in51_WriteData+0x2c>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	0020      	movs	r0, r4
 80012be:	2102      	movs	r1, #2
 80012c0:	f000 f9d8 	bl	8001674 <HAL_GPIO_WritePin>
    OLED_CS_0;
 80012c4:	2200      	movs	r2, #0
 80012c6:	2101      	movs	r1, #1
 80012c8:	0020      	movs	r0, r4
 80012ca:	f000 f9d3 	bl	8001674 <HAL_GPIO_WritePin>
    SPI4W_Write_Byte(Data);
 80012ce:	0028      	movs	r0, r5
 80012d0:	f7ff f9e6 	bl	80006a0 <SPI4W_Write_Byte>
    OLED_CS_1;
 80012d4:	2201      	movs	r2, #1
 80012d6:	0020      	movs	r0, r4
 80012d8:	0011      	movs	r1, r2
 80012da:	f000 f9cb 	bl	8001674 <HAL_GPIO_WritePin>
	iic_wait_for_ack();
	iic_write_byte(Data);
	iic_wait_for_ack();
	iic_stop();
#endif
}
 80012de:	bd70      	pop	{r4, r5, r6, pc}
 80012e0:	48000400 	.word	0x48000400

080012e4 <OLED_1IN51_Init>:
/********************************************************************************
function:
            initialization
********************************************************************************/
void OLED_1IN51_Init()
{
 80012e4:	b510      	push	{r4, lr}
    OLED_RST_1;
 80012e6:	4c2c      	ldr	r4, [pc, #176]	@ (8001398 <OLED_1IN51_Init+0xb4>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	2110      	movs	r1, #16
 80012ec:	0020      	movs	r0, r4
 80012ee:	f000 f9c1 	bl	8001674 <HAL_GPIO_WritePin>
    Driver_Delay_ms(100);
 80012f2:	2064      	movs	r0, #100	@ 0x64
 80012f4:	f7ff f9f8 	bl	80006e8 <Driver_Delay_ms>
    OLED_RST_0;
 80012f8:	2200      	movs	r2, #0
 80012fa:	2110      	movs	r1, #16
 80012fc:	0020      	movs	r0, r4
 80012fe:	f000 f9b9 	bl	8001674 <HAL_GPIO_WritePin>
    Driver_Delay_ms(100);
 8001302:	2064      	movs	r0, #100	@ 0x64
 8001304:	f7ff f9f0 	bl	80006e8 <Driver_Delay_ms>
    OLED_RST_1;
 8001308:	2201      	movs	r2, #1
 800130a:	2110      	movs	r1, #16
 800130c:	0020      	movs	r0, r4
 800130e:	f000 f9b1 	bl	8001674 <HAL_GPIO_WritePin>
    Driver_Delay_ms(100);
 8001312:	2064      	movs	r0, #100	@ 0x64
 8001314:	f7ff f9e8 	bl	80006e8 <Driver_Delay_ms>
    OLED_1in51_WriteReg(0xAE);//--turn off oled panel
 8001318:	20ae      	movs	r0, #174	@ 0xae
 800131a:	f7ff ffb3 	bl	8001284 <OLED_1in51_WriteReg>
    OLED_1in51_WriteReg(0x00);//---set low column address
 800131e:	2000      	movs	r0, #0
 8001320:	f7ff ffb0 	bl	8001284 <OLED_1in51_WriteReg>
    OLED_1in51_WriteReg(0x10);//---set high column address
 8001324:	2010      	movs	r0, #16
 8001326:	f7ff ffad 	bl	8001284 <OLED_1in51_WriteReg>
		OLED_1in51_WriteReg(0x20);
 800132a:	2020      	movs	r0, #32
 800132c:	f7ff ffaa 	bl	8001284 <OLED_1in51_WriteReg>
    OLED_1in51_WriteReg(0x00);
 8001330:	2000      	movs	r0, #0
 8001332:	f7ff ffa7 	bl	8001284 <OLED_1in51_WriteReg>
    OLED_1in51_WriteReg(0xFF);
 8001336:	20ff      	movs	r0, #255	@ 0xff
 8001338:	f7ff ffa4 	bl	8001284 <OLED_1in51_WriteReg>
    OLED_1in51_WriteReg(0xA6);
 800133c:	20a6      	movs	r0, #166	@ 0xa6
 800133e:	f7ff ffa1 	bl	8001284 <OLED_1in51_WriteReg>
    OLED_1in51_WriteReg(0xA8); 
 8001342:	20a8      	movs	r0, #168	@ 0xa8
 8001344:	f7ff ff9e 	bl	8001284 <OLED_1in51_WriteReg>
    OLED_1in51_WriteReg(0x3F);
 8001348:	203f      	movs	r0, #63	@ 0x3f
 800134a:	f7ff ff9b 	bl	8001284 <OLED_1in51_WriteReg>
    OLED_1in51_WriteReg(0xD3);
 800134e:	20d3      	movs	r0, #211	@ 0xd3
 8001350:	f7ff ff98 	bl	8001284 <OLED_1in51_WriteReg>
    OLED_1in51_WriteReg(0x00);
 8001354:	2000      	movs	r0, #0
 8001356:	f7ff ff95 	bl	8001284 <OLED_1in51_WriteReg>
    OLED_1in51_WriteReg(0xD5);
 800135a:	20d5      	movs	r0, #213	@ 0xd5
 800135c:	f7ff ff92 	bl	8001284 <OLED_1in51_WriteReg>
    OLED_1in51_WriteReg(0x80);
 8001360:	2080      	movs	r0, #128	@ 0x80
 8001362:	f7ff ff8f 	bl	8001284 <OLED_1in51_WriteReg>
    OLED_1in51_WriteReg(0xD9);
 8001366:	20d9      	movs	r0, #217	@ 0xd9
 8001368:	f7ff ff8c 	bl	8001284 <OLED_1in51_WriteReg>
    OLED_1in51_WriteReg(0x22);
 800136c:	2022      	movs	r0, #34	@ 0x22
 800136e:	f7ff ff89 	bl	8001284 <OLED_1in51_WriteReg>
    OLED_1in51_WriteReg(0xDA);
 8001372:	20da      	movs	r0, #218	@ 0xda
 8001374:	f7ff ff86 	bl	8001284 <OLED_1in51_WriteReg>
    OLED_1in51_WriteReg(0x12);
 8001378:	2012      	movs	r0, #18
 800137a:	f7ff ff83 	bl	8001284 <OLED_1in51_WriteReg>
    OLED_1in51_WriteReg(0xDB);
 800137e:	20db      	movs	r0, #219	@ 0xdb
 8001380:	f7ff ff80 	bl	8001284 <OLED_1in51_WriteReg>
    OLED_1in51_WriteReg(0x40);
 8001384:	2040      	movs	r0, #64	@ 0x40
 8001386:	f7ff ff7d 	bl	8001284 <OLED_1in51_WriteReg>
    //Hardware reset
    OLED_1in51_Reset();

    //Set the initialization register
    OLED_1in51_InitReg();
    Driver_Delay_ms(200);
 800138a:	20c8      	movs	r0, #200	@ 0xc8
 800138c:	f7ff f9ac 	bl	80006e8 <Driver_Delay_ms>

    //Turn on the OLED display
    OLED_1in51_WriteReg(0xaf);
 8001390:	20af      	movs	r0, #175	@ 0xaf
 8001392:	f7ff ff77 	bl	8001284 <OLED_1in51_WriteReg>
}
 8001396:	bd10      	pop	{r4, pc}
 8001398:	48000400 	.word	0x48000400

0800139c <OLED_1IN51_Display>:

/********************************************************************************
function:	Update memory to OLED
********************************************************************************/
void OLED_1IN51_Display(const UBYTE *Image)
{
 800139c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800139e:	0005      	movs	r5, r0
 80013a0:	2407      	movs	r4, #7
    UWORD page, column, temp;

    for (page=0; page<8; page++) {
        /* set page address */
        OLED_1in51_WriteReg(0xB0 + page);
 80013a2:	2349      	movs	r3, #73	@ 0x49
 80013a4:	425b      	negs	r3, r3
 80013a6:	1b18      	subs	r0, r3, r4
 80013a8:	b2c0      	uxtb	r0, r0
 80013aa:	f7ff ff6b 	bl	8001284 <OLED_1in51_WriteReg>
        /* set low column address */
        OLED_1in51_WriteReg(0x00);
 80013ae:	2000      	movs	r0, #0
 80013b0:	f7ff ff68 	bl	8001284 <OLED_1in51_WriteReg>
        /* set high column address */
        OLED_1in51_WriteReg(0x10);
 80013b4:	2010      	movs	r0, #16
 80013b6:	f7ff ff65 	bl	8001284 <OLED_1in51_WriteReg>

        /* write data */
        for(column=0; column<128; column++) {
 80013ba:	2380      	movs	r3, #128	@ 0x80
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	18ef      	adds	r7, r5, r3
 80013c0:	1966      	adds	r6, r4, r5
 80013c2:	193f      	adds	r7, r7, r4
            temp = Image[(7-page) + column*8];
            OLED_1in51_WriteData(temp);
 80013c4:	7830      	ldrb	r0, [r6, #0]
        for(column=0; column<128; column++) {
 80013c6:	3608      	adds	r6, #8
            OLED_1in51_WriteData(temp);
 80013c8:	f7ff ff74 	bl	80012b4 <OLED_1in51_WriteData>
        for(column=0; column<128; column++) {
 80013cc:	42be      	cmp	r6, r7
 80013ce:	d1f9      	bne.n	80013c4 <OLED_1IN51_Display+0x28>
    for (page=0; page<8; page++) {
 80013d0:	3c01      	subs	r4, #1
 80013d2:	d2e6      	bcs.n	80013a2 <OLED_1IN51_Display+0x6>
        }       
    }
}
 80013d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080013d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d8:	b570      	push	{r4, r5, r6, lr}
 80013da:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013dc:	20fa      	movs	r0, #250	@ 0xfa
 80013de:	4b0d      	ldr	r3, [pc, #52]	@ (8001414 <HAL_InitTick+0x3c>)
 80013e0:	0080      	lsls	r0, r0, #2
 80013e2:	7819      	ldrb	r1, [r3, #0]
 80013e4:	f7fe fea4 	bl	8000130 <__udivsi3>
 80013e8:	4c0b      	ldr	r4, [pc, #44]	@ (8001418 <HAL_InitTick+0x40>)
 80013ea:	0001      	movs	r1, r0
 80013ec:	6820      	ldr	r0, [r4, #0]
 80013ee:	f7fe fe9f 	bl	8000130 <__udivsi3>
 80013f2:	f000 f873 	bl	80014dc <HAL_SYSTICK_Config>
 80013f6:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 80013f8:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013fa:	2c00      	cmp	r4, #0
 80013fc:	d109      	bne.n	8001412 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013fe:	2d03      	cmp	r5, #3
 8001400:	d807      	bhi.n	8001412 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001402:	3802      	subs	r0, #2
 8001404:	0022      	movs	r2, r4
 8001406:	0029      	movs	r1, r5
 8001408:	f000 f83e 	bl	8001488 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800140c:	0020      	movs	r0, r4
 800140e:	4b03      	ldr	r3, [pc, #12]	@ (800141c <HAL_InitTick+0x44>)
 8001410:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8001412:	bd70      	pop	{r4, r5, r6, pc}
 8001414:	20000024 	.word	0x20000024
 8001418:	20000000 	.word	0x20000000
 800141c:	20000028 	.word	0x20000028

08001420 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001420:	2310      	movs	r3, #16
 8001422:	4a06      	ldr	r2, [pc, #24]	@ (800143c <HAL_Init+0x1c>)
{
 8001424:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001426:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001428:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800142a:	430b      	orrs	r3, r1
 800142c:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800142e:	f7ff ffd3 	bl	80013d8 <HAL_InitTick>
  HAL_MspInit();
 8001432:	f7fe ffe3 	bl	80003fc <HAL_MspInit>
}
 8001436:	2000      	movs	r0, #0
 8001438:	bd10      	pop	{r4, pc}
 800143a:	46c0      	nop			@ (mov r8, r8)
 800143c:	40022000 	.word	0x40022000

08001440 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001440:	4a03      	ldr	r2, [pc, #12]	@ (8001450 <HAL_IncTick+0x10>)
 8001442:	4b04      	ldr	r3, [pc, #16]	@ (8001454 <HAL_IncTick+0x14>)
 8001444:	6811      	ldr	r1, [r2, #0]
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	185b      	adds	r3, r3, r1
 800144a:	6013      	str	r3, [r2, #0]
}
 800144c:	4770      	bx	lr
 800144e:	46c0      	nop			@ (mov r8, r8)
 8001450:	200001fc 	.word	0x200001fc
 8001454:	20000024 	.word	0x20000024

08001458 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001458:	4b01      	ldr	r3, [pc, #4]	@ (8001460 <HAL_GetTick+0x8>)
 800145a:	6818      	ldr	r0, [r3, #0]
}
 800145c:	4770      	bx	lr
 800145e:	46c0      	nop			@ (mov r8, r8)
 8001460:	200001fc 	.word	0x200001fc

08001464 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001464:	b570      	push	{r4, r5, r6, lr}
 8001466:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001468:	f7ff fff6 	bl	8001458 <HAL_GetTick>
 800146c:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800146e:	1c63      	adds	r3, r4, #1
 8001470:	d002      	beq.n	8001478 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001472:	4b04      	ldr	r3, [pc, #16]	@ (8001484 <HAL_Delay+0x20>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001478:	f7ff ffee 	bl	8001458 <HAL_GetTick>
 800147c:	1b40      	subs	r0, r0, r5
 800147e:	42a0      	cmp	r0, r4
 8001480:	d3fa      	bcc.n	8001478 <HAL_Delay+0x14>
  {
  }
}
 8001482:	bd70      	pop	{r4, r5, r6, pc}
 8001484:	20000024 	.word	0x20000024

08001488 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001488:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800148a:	24ff      	movs	r4, #255	@ 0xff
 800148c:	2203      	movs	r2, #3
 800148e:	000b      	movs	r3, r1
 8001490:	0021      	movs	r1, r4
 8001492:	4002      	ands	r2, r0
 8001494:	00d2      	lsls	r2, r2, #3
 8001496:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001498:	019b      	lsls	r3, r3, #6
 800149a:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800149c:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800149e:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 80014a0:	2800      	cmp	r0, #0
 80014a2:	db0a      	blt.n	80014ba <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014a4:	24c0      	movs	r4, #192	@ 0xc0
 80014a6:	4a0b      	ldr	r2, [pc, #44]	@ (80014d4 <HAL_NVIC_SetPriority+0x4c>)
 80014a8:	0880      	lsrs	r0, r0, #2
 80014aa:	0080      	lsls	r0, r0, #2
 80014ac:	1880      	adds	r0, r0, r2
 80014ae:	00a4      	lsls	r4, r4, #2
 80014b0:	5902      	ldr	r2, [r0, r4]
 80014b2:	400a      	ands	r2, r1
 80014b4:	4313      	orrs	r3, r2
 80014b6:	5103      	str	r3, [r0, r4]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80014b8:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014ba:	220f      	movs	r2, #15
 80014bc:	4010      	ands	r0, r2
 80014be:	3808      	subs	r0, #8
 80014c0:	4a05      	ldr	r2, [pc, #20]	@ (80014d8 <HAL_NVIC_SetPriority+0x50>)
 80014c2:	0880      	lsrs	r0, r0, #2
 80014c4:	0080      	lsls	r0, r0, #2
 80014c6:	1880      	adds	r0, r0, r2
 80014c8:	69c2      	ldr	r2, [r0, #28]
 80014ca:	4011      	ands	r1, r2
 80014cc:	4319      	orrs	r1, r3
 80014ce:	61c1      	str	r1, [r0, #28]
 80014d0:	e7f2      	b.n	80014b8 <HAL_NVIC_SetPriority+0x30>
 80014d2:	46c0      	nop			@ (mov r8, r8)
 80014d4:	e000e100 	.word	0xe000e100
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014dc:	2280      	movs	r2, #128	@ 0x80
 80014de:	1e43      	subs	r3, r0, #1
 80014e0:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80014e2:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d20d      	bcs.n	8001504 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014e8:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ea:	4a07      	ldr	r2, [pc, #28]	@ (8001508 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014ec:	4807      	ldr	r0, [pc, #28]	@ (800150c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ee:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014f0:	6a03      	ldr	r3, [r0, #32]
 80014f2:	0609      	lsls	r1, r1, #24
 80014f4:	021b      	lsls	r3, r3, #8
 80014f6:	0a1b      	lsrs	r3, r3, #8
 80014f8:	430b      	orrs	r3, r1
 80014fa:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014fc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014fe:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001500:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001502:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001504:	4770      	bx	lr
 8001506:	46c0      	nop			@ (mov r8, r8)
 8001508:	e000e010 	.word	0xe000e010
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8001510:	2300      	movs	r3, #0
{
 8001512:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001514:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001516:	680a      	ldr	r2, [r1, #0]
 8001518:	0014      	movs	r4, r2
 800151a:	40dc      	lsrs	r4, r3
 800151c:	d101      	bne.n	8001522 <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 800151e:	b007      	add	sp, #28
 8001520:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001522:	2501      	movs	r5, #1
 8001524:	0014      	movs	r4, r2
 8001526:	409d      	lsls	r5, r3
 8001528:	402c      	ands	r4, r5
 800152a:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 800152c:	422a      	tst	r2, r5
 800152e:	d100      	bne.n	8001532 <HAL_GPIO_Init+0x22>
 8001530:	e094      	b.n	800165c <HAL_GPIO_Init+0x14c>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001532:	684a      	ldr	r2, [r1, #4]
 8001534:	005f      	lsls	r7, r3, #1
 8001536:	4694      	mov	ip, r2
 8001538:	2203      	movs	r2, #3
 800153a:	4664      	mov	r4, ip
 800153c:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800153e:	2403      	movs	r4, #3
 8001540:	40bc      	lsls	r4, r7
 8001542:	43e4      	mvns	r4, r4
 8001544:	9401      	str	r4, [sp, #4]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001546:	1e54      	subs	r4, r2, #1
 8001548:	2c01      	cmp	r4, #1
 800154a:	d82e      	bhi.n	80015aa <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 800154c:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800154e:	9c01      	ldr	r4, [sp, #4]
 8001550:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001552:	68cc      	ldr	r4, [r1, #12]
 8001554:	40bc      	lsls	r4, r7
 8001556:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8001558:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800155a:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800155c:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800155e:	43ac      	bics	r4, r5
 8001560:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001562:	4664      	mov	r4, ip
 8001564:	0924      	lsrs	r4, r4, #4
 8001566:	4034      	ands	r4, r6
 8001568:	409c      	lsls	r4, r3
 800156a:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 800156c:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 800156e:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001570:	9c01      	ldr	r4, [sp, #4]
 8001572:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001574:	688c      	ldr	r4, [r1, #8]
 8001576:	40bc      	lsls	r4, r7
 8001578:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 800157a:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800157c:	2a02      	cmp	r2, #2
 800157e:	d116      	bne.n	80015ae <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001580:	2507      	movs	r5, #7
 8001582:	260f      	movs	r6, #15
 8001584:	401d      	ands	r5, r3
 8001586:	00ad      	lsls	r5, r5, #2
 8001588:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 800158a:	08dc      	lsrs	r4, r3, #3
 800158c:	00a4      	lsls	r4, r4, #2
 800158e:	1904      	adds	r4, r0, r4
 8001590:	9402      	str	r4, [sp, #8]
 8001592:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001594:	9603      	str	r6, [sp, #12]
 8001596:	0026      	movs	r6, r4
 8001598:	9c03      	ldr	r4, [sp, #12]
 800159a:	43a6      	bics	r6, r4
 800159c:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800159e:	690e      	ldr	r6, [r1, #16]
 80015a0:	40ae      	lsls	r6, r5
 80015a2:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 80015a4:	9c02      	ldr	r4, [sp, #8]
 80015a6:	6226      	str	r6, [r4, #32]
 80015a8:	e001      	b.n	80015ae <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015aa:	2a03      	cmp	r2, #3
 80015ac:	d1df      	bne.n	800156e <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015ae:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 80015b0:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80015b2:	9d01      	ldr	r5, [sp, #4]
 80015b4:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015b6:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015b8:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 80015ba:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015bc:	4662      	mov	r2, ip
 80015be:	02a4      	lsls	r4, r4, #10
 80015c0:	4222      	tst	r2, r4
 80015c2:	d04b      	beq.n	800165c <HAL_GPIO_Init+0x14c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c4:	2501      	movs	r5, #1
 80015c6:	4a26      	ldr	r2, [pc, #152]	@ (8001660 <HAL_GPIO_Init+0x150>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015c8:	2790      	movs	r7, #144	@ 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ca:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015cc:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ce:	432c      	orrs	r4, r5
 80015d0:	6194      	str	r4, [r2, #24]
 80015d2:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 80015d4:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d6:	402a      	ands	r2, r5
 80015d8:	9205      	str	r2, [sp, #20]
 80015da:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 80015dc:	4a21      	ldr	r2, [pc, #132]	@ (8001664 <HAL_GPIO_Init+0x154>)
 80015de:	00a4      	lsls	r4, r4, #2
 80015e0:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015e2:	220f      	movs	r2, #15
 80015e4:	3502      	adds	r5, #2
 80015e6:	401d      	ands	r5, r3
 80015e8:	00ad      	lsls	r5, r5, #2
 80015ea:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 80015ec:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015ee:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015f0:	2200      	movs	r2, #0
 80015f2:	42b8      	cmp	r0, r7
 80015f4:	d008      	beq.n	8001608 <HAL_GPIO_Init+0xf8>
 80015f6:	4f1c      	ldr	r7, [pc, #112]	@ (8001668 <HAL_GPIO_Init+0x158>)
 80015f8:	3201      	adds	r2, #1
 80015fa:	42b8      	cmp	r0, r7
 80015fc:	d004      	beq.n	8001608 <HAL_GPIO_Init+0xf8>
 80015fe:	4f1b      	ldr	r7, [pc, #108]	@ (800166c <HAL_GPIO_Init+0x15c>)
 8001600:	3204      	adds	r2, #4
 8001602:	42b8      	cmp	r0, r7
 8001604:	d100      	bne.n	8001608 <HAL_GPIO_Init+0xf8>
 8001606:	3a03      	subs	r2, #3
 8001608:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800160a:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800160c:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 800160e:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 8001610:	4a17      	ldr	r2, [pc, #92]	@ (8001670 <HAL_GPIO_Init+0x160>)
        temp &= ~(iocurrent);
 8001612:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->RTSR;
 8001614:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8001616:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 8001618:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 800161a:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800161c:	02ff      	lsls	r7, r7, #11
 800161e:	d401      	bmi.n	8001624 <HAL_GPIO_Init+0x114>
        temp &= ~(iocurrent);
 8001620:	0035      	movs	r5, r6
 8001622:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001624:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8001626:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8001628:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 800162a:	9d00      	ldr	r5, [sp, #0]
 800162c:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800162e:	02bf      	lsls	r7, r7, #10
 8001630:	d401      	bmi.n	8001636 <HAL_GPIO_Init+0x126>
        temp &= ~(iocurrent);
 8001632:	0035      	movs	r5, r6
 8001634:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001636:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 8001638:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 800163a:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 800163c:	9d00      	ldr	r5, [sp, #0]
 800163e:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001640:	03bf      	lsls	r7, r7, #14
 8001642:	d401      	bmi.n	8001648 <HAL_GPIO_Init+0x138>
        temp &= ~(iocurrent);
 8001644:	0035      	movs	r5, r6
 8001646:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001648:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 800164a:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 800164c:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 800164e:	9e00      	ldr	r6, [sp, #0]
 8001650:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001652:	03ff      	lsls	r7, r7, #15
 8001654:	d401      	bmi.n	800165a <HAL_GPIO_Init+0x14a>
        temp &= ~(iocurrent);
 8001656:	4025      	ands	r5, r4
 8001658:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 800165a:	6016      	str	r6, [r2, #0]
    position++;
 800165c:	3301      	adds	r3, #1
 800165e:	e75a      	b.n	8001516 <HAL_GPIO_Init+0x6>
 8001660:	40021000 	.word	0x40021000
 8001664:	40010000 	.word	0x40010000
 8001668:	48000400 	.word	0x48000400
 800166c:	48000800 	.word	0x48000800
 8001670:	40010400 	.word	0x40010400

08001674 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001674:	2a00      	cmp	r2, #0
 8001676:	d001      	beq.n	800167c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001678:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800167a:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800167c:	6281      	str	r1, [r0, #40]	@ 0x28
}
 800167e:	e7fc      	b.n	800167a <HAL_GPIO_WritePin+0x6>

08001680 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001682:	0004      	movs	r4, r0
 8001684:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001686:	2800      	cmp	r0, #0
 8001688:	d102      	bne.n	8001690 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800168a:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 800168c:	b005      	add	sp, #20
 800168e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001690:	6803      	ldr	r3, [r0, #0]
 8001692:	07db      	lsls	r3, r3, #31
 8001694:	d433      	bmi.n	80016fe <HAL_RCC_OscConfig+0x7e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001696:	6823      	ldr	r3, [r4, #0]
 8001698:	079b      	lsls	r3, r3, #30
 800169a:	d500      	bpl.n	800169e <HAL_RCC_OscConfig+0x1e>
 800169c:	e087      	b.n	80017ae <HAL_RCC_OscConfig+0x12e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800169e:	6823      	ldr	r3, [r4, #0]
 80016a0:	071b      	lsls	r3, r3, #28
 80016a2:	d500      	bpl.n	80016a6 <HAL_RCC_OscConfig+0x26>
 80016a4:	e0c8      	b.n	8001838 <HAL_RCC_OscConfig+0x1b8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016a6:	6823      	ldr	r3, [r4, #0]
 80016a8:	075b      	lsls	r3, r3, #29
 80016aa:	d500      	bpl.n	80016ae <HAL_RCC_OscConfig+0x2e>
 80016ac:	e0eb      	b.n	8001886 <HAL_RCC_OscConfig+0x206>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80016ae:	6823      	ldr	r3, [r4, #0]
 80016b0:	06db      	lsls	r3, r3, #27
 80016b2:	d51a      	bpl.n	80016ea <HAL_RCC_OscConfig+0x6a>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80016b4:	6962      	ldr	r2, [r4, #20]
 80016b6:	2304      	movs	r3, #4
 80016b8:	4db9      	ldr	r5, [pc, #740]	@ (80019a0 <HAL_RCC_OscConfig+0x320>)
 80016ba:	2a01      	cmp	r2, #1
 80016bc:	d000      	beq.n	80016c0 <HAL_RCC_OscConfig+0x40>
 80016be:	e154      	b.n	800196a <HAL_RCC_OscConfig+0x2ea>
      __HAL_RCC_HSI14ADC_DISABLE();
 80016c0:	6b69      	ldr	r1, [r5, #52]	@ 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80016c2:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80016c4:	430b      	orrs	r3, r1
 80016c6:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_ENABLE();
 80016c8:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80016ca:	431a      	orrs	r2, r3
 80016cc:	636a      	str	r2, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 80016ce:	f7ff fec3 	bl	8001458 <HAL_GetTick>
 80016d2:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80016d4:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80016d6:	423b      	tst	r3, r7
 80016d8:	d100      	bne.n	80016dc <HAL_RCC_OscConfig+0x5c>
 80016da:	e13f      	b.n	800195c <HAL_RCC_OscConfig+0x2dc>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80016dc:	21f8      	movs	r1, #248	@ 0xf8
 80016de:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 80016e0:	69a3      	ldr	r3, [r4, #24]
 80016e2:	438a      	bics	r2, r1
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	4313      	orrs	r3, r2
 80016e8:	636b      	str	r3, [r5, #52]	@ 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016ea:	6823      	ldr	r3, [r4, #0]
 80016ec:	069b      	lsls	r3, r3, #26
 80016ee:	d500      	bpl.n	80016f2 <HAL_RCC_OscConfig+0x72>
 80016f0:	e162      	b.n	80019b8 <HAL_RCC_OscConfig+0x338>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016f2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d000      	beq.n	80016fa <HAL_RCC_OscConfig+0x7a>
 80016f8:	e1a1      	b.n	8001a3e <HAL_RCC_OscConfig+0x3be>
  return HAL_OK;
 80016fa:	2000      	movs	r0, #0
 80016fc:	e7c6      	b.n	800168c <HAL_RCC_OscConfig+0xc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016fe:	220c      	movs	r2, #12
 8001700:	4da7      	ldr	r5, [pc, #668]	@ (80019a0 <HAL_RCC_OscConfig+0x320>)
 8001702:	686b      	ldr	r3, [r5, #4]
 8001704:	4013      	ands	r3, r2
 8001706:	2b04      	cmp	r3, #4
 8001708:	d00b      	beq.n	8001722 <HAL_RCC_OscConfig+0xa2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800170a:	686b      	ldr	r3, [r5, #4]
 800170c:	4013      	ands	r3, r2
 800170e:	2b08      	cmp	r3, #8
 8001710:	d10e      	bne.n	8001730 <HAL_RCC_OscConfig+0xb0>
 8001712:	22c0      	movs	r2, #192	@ 0xc0
 8001714:	686b      	ldr	r3, [r5, #4]
 8001716:	0252      	lsls	r2, r2, #9
 8001718:	4013      	ands	r3, r2
 800171a:	2280      	movs	r2, #128	@ 0x80
 800171c:	0252      	lsls	r2, r2, #9
 800171e:	4293      	cmp	r3, r2
 8001720:	d106      	bne.n	8001730 <HAL_RCC_OscConfig+0xb0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001722:	682b      	ldr	r3, [r5, #0]
 8001724:	039b      	lsls	r3, r3, #14
 8001726:	d5b6      	bpl.n	8001696 <HAL_RCC_OscConfig+0x16>
 8001728:	6863      	ldr	r3, [r4, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1b3      	bne.n	8001696 <HAL_RCC_OscConfig+0x16>
 800172e:	e7ac      	b.n	800168a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001730:	6863      	ldr	r3, [r4, #4]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d113      	bne.n	800175e <HAL_RCC_OscConfig+0xde>
 8001736:	2380      	movs	r3, #128	@ 0x80
 8001738:	682a      	ldr	r2, [r5, #0]
 800173a:	025b      	lsls	r3, r3, #9
 800173c:	4313      	orrs	r3, r2
 800173e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001740:	f7ff fe8a 	bl	8001458 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001744:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8001746:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001748:	02bf      	lsls	r7, r7, #10
 800174a:	682b      	ldr	r3, [r5, #0]
 800174c:	423b      	tst	r3, r7
 800174e:	d1a2      	bne.n	8001696 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001750:	f7ff fe82 	bl	8001458 <HAL_GetTick>
 8001754:	1b80      	subs	r0, r0, r6
 8001756:	2864      	cmp	r0, #100	@ 0x64
 8001758:	d9f7      	bls.n	800174a <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 800175a:	2003      	movs	r0, #3
 800175c:	e796      	b.n	800168c <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800175e:	2b00      	cmp	r3, #0
 8001760:	d115      	bne.n	800178e <HAL_RCC_OscConfig+0x10e>
 8001762:	682b      	ldr	r3, [r5, #0]
 8001764:	4a8f      	ldr	r2, [pc, #572]	@ (80019a4 <HAL_RCC_OscConfig+0x324>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001766:	2780      	movs	r7, #128	@ 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001768:	4013      	ands	r3, r2
 800176a:	602b      	str	r3, [r5, #0]
 800176c:	682b      	ldr	r3, [r5, #0]
 800176e:	4a8e      	ldr	r2, [pc, #568]	@ (80019a8 <HAL_RCC_OscConfig+0x328>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001770:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001772:	4013      	ands	r3, r2
 8001774:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001776:	f7ff fe6f 	bl	8001458 <HAL_GetTick>
 800177a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177c:	682b      	ldr	r3, [r5, #0]
 800177e:	423b      	tst	r3, r7
 8001780:	d089      	beq.n	8001696 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001782:	f7ff fe69 	bl	8001458 <HAL_GetTick>
 8001786:	1b80      	subs	r0, r0, r6
 8001788:	2864      	cmp	r0, #100	@ 0x64
 800178a:	d9f7      	bls.n	800177c <HAL_RCC_OscConfig+0xfc>
 800178c:	e7e5      	b.n	800175a <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800178e:	2b05      	cmp	r3, #5
 8001790:	d105      	bne.n	800179e <HAL_RCC_OscConfig+0x11e>
 8001792:	2380      	movs	r3, #128	@ 0x80
 8001794:	682a      	ldr	r2, [r5, #0]
 8001796:	02db      	lsls	r3, r3, #11
 8001798:	4313      	orrs	r3, r2
 800179a:	602b      	str	r3, [r5, #0]
 800179c:	e7cb      	b.n	8001736 <HAL_RCC_OscConfig+0xb6>
 800179e:	682b      	ldr	r3, [r5, #0]
 80017a0:	4a80      	ldr	r2, [pc, #512]	@ (80019a4 <HAL_RCC_OscConfig+0x324>)
 80017a2:	4013      	ands	r3, r2
 80017a4:	602b      	str	r3, [r5, #0]
 80017a6:	682b      	ldr	r3, [r5, #0]
 80017a8:	4a7f      	ldr	r2, [pc, #508]	@ (80019a8 <HAL_RCC_OscConfig+0x328>)
 80017aa:	4013      	ands	r3, r2
 80017ac:	e7c7      	b.n	800173e <HAL_RCC_OscConfig+0xbe>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80017ae:	220c      	movs	r2, #12
 80017b0:	4d7b      	ldr	r5, [pc, #492]	@ (80019a0 <HAL_RCC_OscConfig+0x320>)
 80017b2:	686b      	ldr	r3, [r5, #4]
 80017b4:	4213      	tst	r3, r2
 80017b6:	d00b      	beq.n	80017d0 <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80017b8:	686b      	ldr	r3, [r5, #4]
 80017ba:	4013      	ands	r3, r2
 80017bc:	2b08      	cmp	r3, #8
 80017be:	d116      	bne.n	80017ee <HAL_RCC_OscConfig+0x16e>
 80017c0:	22c0      	movs	r2, #192	@ 0xc0
 80017c2:	686b      	ldr	r3, [r5, #4]
 80017c4:	0252      	lsls	r2, r2, #9
 80017c6:	4013      	ands	r3, r2
 80017c8:	2280      	movs	r2, #128	@ 0x80
 80017ca:	0212      	lsls	r2, r2, #8
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d10e      	bne.n	80017ee <HAL_RCC_OscConfig+0x16e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017d0:	682b      	ldr	r3, [r5, #0]
 80017d2:	079b      	lsls	r3, r3, #30
 80017d4:	d503      	bpl.n	80017de <HAL_RCC_OscConfig+0x15e>
 80017d6:	68e3      	ldr	r3, [r4, #12]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d000      	beq.n	80017de <HAL_RCC_OscConfig+0x15e>
 80017dc:	e755      	b.n	800168a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017de:	21f8      	movs	r1, #248	@ 0xf8
 80017e0:	682a      	ldr	r2, [r5, #0]
 80017e2:	6923      	ldr	r3, [r4, #16]
 80017e4:	438a      	bics	r2, r1
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	4313      	orrs	r3, r2
 80017ea:	602b      	str	r3, [r5, #0]
 80017ec:	e757      	b.n	800169e <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017ee:	68e2      	ldr	r2, [r4, #12]
 80017f0:	2301      	movs	r3, #1
 80017f2:	2a00      	cmp	r2, #0
 80017f4:	d00f      	beq.n	8001816 <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_HSI_ENABLE();
 80017f6:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f8:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 80017fa:	4313      	orrs	r3, r2
 80017fc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80017fe:	f7ff fe2b 	bl	8001458 <HAL_GetTick>
 8001802:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001804:	682b      	ldr	r3, [r5, #0]
 8001806:	423b      	tst	r3, r7
 8001808:	d1e9      	bne.n	80017de <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800180a:	f7ff fe25 	bl	8001458 <HAL_GetTick>
 800180e:	1b80      	subs	r0, r0, r6
 8001810:	2802      	cmp	r0, #2
 8001812:	d9f7      	bls.n	8001804 <HAL_RCC_OscConfig+0x184>
 8001814:	e7a1      	b.n	800175a <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI_DISABLE();
 8001816:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001818:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 800181a:	439a      	bics	r2, r3
 800181c:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 800181e:	f7ff fe1b 	bl	8001458 <HAL_GetTick>
 8001822:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001824:	682b      	ldr	r3, [r5, #0]
 8001826:	423b      	tst	r3, r7
 8001828:	d100      	bne.n	800182c <HAL_RCC_OscConfig+0x1ac>
 800182a:	e738      	b.n	800169e <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800182c:	f7ff fe14 	bl	8001458 <HAL_GetTick>
 8001830:	1b80      	subs	r0, r0, r6
 8001832:	2802      	cmp	r0, #2
 8001834:	d9f6      	bls.n	8001824 <HAL_RCC_OscConfig+0x1a4>
 8001836:	e790      	b.n	800175a <HAL_RCC_OscConfig+0xda>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001838:	69e2      	ldr	r2, [r4, #28]
 800183a:	2301      	movs	r3, #1
 800183c:	4d58      	ldr	r5, [pc, #352]	@ (80019a0 <HAL_RCC_OscConfig+0x320>)
 800183e:	2a00      	cmp	r2, #0
 8001840:	d010      	beq.n	8001864 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_LSI_ENABLE();
 8001842:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001844:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8001846:	4313      	orrs	r3, r2
 8001848:	626b      	str	r3, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 800184a:	f7ff fe05 	bl	8001458 <HAL_GetTick>
 800184e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001850:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8001852:	423b      	tst	r3, r7
 8001854:	d000      	beq.n	8001858 <HAL_RCC_OscConfig+0x1d8>
 8001856:	e726      	b.n	80016a6 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001858:	f7ff fdfe 	bl	8001458 <HAL_GetTick>
 800185c:	1b80      	subs	r0, r0, r6
 800185e:	2802      	cmp	r0, #2
 8001860:	d9f6      	bls.n	8001850 <HAL_RCC_OscConfig+0x1d0>
 8001862:	e77a      	b.n	800175a <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_LSI_DISABLE();
 8001864:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001866:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8001868:	439a      	bics	r2, r3
 800186a:	626a      	str	r2, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 800186c:	f7ff fdf4 	bl	8001458 <HAL_GetTick>
 8001870:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001872:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8001874:	423b      	tst	r3, r7
 8001876:	d100      	bne.n	800187a <HAL_RCC_OscConfig+0x1fa>
 8001878:	e715      	b.n	80016a6 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800187a:	f7ff fded 	bl	8001458 <HAL_GetTick>
 800187e:	1b80      	subs	r0, r0, r6
 8001880:	2802      	cmp	r0, #2
 8001882:	d9f6      	bls.n	8001872 <HAL_RCC_OscConfig+0x1f2>
 8001884:	e769      	b.n	800175a <HAL_RCC_OscConfig+0xda>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001886:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001888:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800188a:	4d45      	ldr	r5, [pc, #276]	@ (80019a0 <HAL_RCC_OscConfig+0x320>)
 800188c:	0552      	lsls	r2, r2, #21
 800188e:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001890:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001892:	4213      	tst	r3, r2
 8001894:	d108      	bne.n	80018a8 <HAL_RCC_OscConfig+0x228>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001896:	69eb      	ldr	r3, [r5, #28]
 8001898:	4313      	orrs	r3, r2
 800189a:	61eb      	str	r3, [r5, #28]
 800189c:	69eb      	ldr	r3, [r5, #28]
 800189e:	4013      	ands	r3, r2
 80018a0:	9303      	str	r3, [sp, #12]
 80018a2:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80018a4:	2301      	movs	r3, #1
 80018a6:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a8:	2780      	movs	r7, #128	@ 0x80
 80018aa:	4e40      	ldr	r6, [pc, #256]	@ (80019ac <HAL_RCC_OscConfig+0x32c>)
 80018ac:	007f      	lsls	r7, r7, #1
 80018ae:	6833      	ldr	r3, [r6, #0]
 80018b0:	423b      	tst	r3, r7
 80018b2:	d015      	beq.n	80018e0 <HAL_RCC_OscConfig+0x260>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018b4:	68a3      	ldr	r3, [r4, #8]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d122      	bne.n	8001900 <HAL_RCC_OscConfig+0x280>
 80018ba:	6a2a      	ldr	r2, [r5, #32]
 80018bc:	4313      	orrs	r3, r2
 80018be:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80018c0:	f7ff fdca 	bl	8001458 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c4:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 80018c6:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c8:	6a2b      	ldr	r3, [r5, #32]
 80018ca:	423b      	tst	r3, r7
 80018cc:	d03f      	beq.n	800194e <HAL_RCC_OscConfig+0x2ce>
    if(pwrclkchanged == SET)
 80018ce:	9b00      	ldr	r3, [sp, #0]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d000      	beq.n	80018d6 <HAL_RCC_OscConfig+0x256>
 80018d4:	e6eb      	b.n	80016ae <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80018d6:	69eb      	ldr	r3, [r5, #28]
 80018d8:	4a35      	ldr	r2, [pc, #212]	@ (80019b0 <HAL_RCC_OscConfig+0x330>)
 80018da:	4013      	ands	r3, r2
 80018dc:	61eb      	str	r3, [r5, #28]
 80018de:	e6e6      	b.n	80016ae <HAL_RCC_OscConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018e0:	6833      	ldr	r3, [r6, #0]
 80018e2:	433b      	orrs	r3, r7
 80018e4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80018e6:	f7ff fdb7 	bl	8001458 <HAL_GetTick>
 80018ea:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ec:	6833      	ldr	r3, [r6, #0]
 80018ee:	423b      	tst	r3, r7
 80018f0:	d1e0      	bne.n	80018b4 <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018f2:	f7ff fdb1 	bl	8001458 <HAL_GetTick>
 80018f6:	9b01      	ldr	r3, [sp, #4]
 80018f8:	1ac0      	subs	r0, r0, r3
 80018fa:	2864      	cmp	r0, #100	@ 0x64
 80018fc:	d9f6      	bls.n	80018ec <HAL_RCC_OscConfig+0x26c>
 80018fe:	e72c      	b.n	800175a <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001900:	2201      	movs	r2, #1
 8001902:	2b00      	cmp	r3, #0
 8001904:	d114      	bne.n	8001930 <HAL_RCC_OscConfig+0x2b0>
 8001906:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001908:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800190a:	4393      	bics	r3, r2
 800190c:	622b      	str	r3, [r5, #32]
 800190e:	6a2b      	ldr	r3, [r5, #32]
 8001910:	3203      	adds	r2, #3
 8001912:	4393      	bics	r3, r2
 8001914:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8001916:	f7ff fd9f 	bl	8001458 <HAL_GetTick>
 800191a:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800191c:	6a2b      	ldr	r3, [r5, #32]
 800191e:	423b      	tst	r3, r7
 8001920:	d0d5      	beq.n	80018ce <HAL_RCC_OscConfig+0x24e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001922:	f7ff fd99 	bl	8001458 <HAL_GetTick>
 8001926:	4b23      	ldr	r3, [pc, #140]	@ (80019b4 <HAL_RCC_OscConfig+0x334>)
 8001928:	1b80      	subs	r0, r0, r6
 800192a:	4298      	cmp	r0, r3
 800192c:	d9f6      	bls.n	800191c <HAL_RCC_OscConfig+0x29c>
 800192e:	e714      	b.n	800175a <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001930:	2b05      	cmp	r3, #5
 8001932:	d105      	bne.n	8001940 <HAL_RCC_OscConfig+0x2c0>
 8001934:	6a29      	ldr	r1, [r5, #32]
 8001936:	3b01      	subs	r3, #1
 8001938:	430b      	orrs	r3, r1
 800193a:	622b      	str	r3, [r5, #32]
 800193c:	6a2b      	ldr	r3, [r5, #32]
 800193e:	e7bd      	b.n	80018bc <HAL_RCC_OscConfig+0x23c>
 8001940:	6a2b      	ldr	r3, [r5, #32]
 8001942:	4393      	bics	r3, r2
 8001944:	2204      	movs	r2, #4
 8001946:	622b      	str	r3, [r5, #32]
 8001948:	6a2b      	ldr	r3, [r5, #32]
 800194a:	4393      	bics	r3, r2
 800194c:	e7b7      	b.n	80018be <HAL_RCC_OscConfig+0x23e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800194e:	f7ff fd83 	bl	8001458 <HAL_GetTick>
 8001952:	4b18      	ldr	r3, [pc, #96]	@ (80019b4 <HAL_RCC_OscConfig+0x334>)
 8001954:	1b80      	subs	r0, r0, r6
 8001956:	4298      	cmp	r0, r3
 8001958:	d9b6      	bls.n	80018c8 <HAL_RCC_OscConfig+0x248>
 800195a:	e6fe      	b.n	800175a <HAL_RCC_OscConfig+0xda>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800195c:	f7ff fd7c 	bl	8001458 <HAL_GetTick>
 8001960:	1b80      	subs	r0, r0, r6
 8001962:	2802      	cmp	r0, #2
 8001964:	d800      	bhi.n	8001968 <HAL_RCC_OscConfig+0x2e8>
 8001966:	e6b5      	b.n	80016d4 <HAL_RCC_OscConfig+0x54>
 8001968:	e6f7      	b.n	800175a <HAL_RCC_OscConfig+0xda>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800196a:	3205      	adds	r2, #5
 800196c:	d103      	bne.n	8001976 <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI14ADC_ENABLE();
 800196e:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8001970:	439a      	bics	r2, r3
 8001972:	636a      	str	r2, [r5, #52]	@ 0x34
 8001974:	e6b2      	b.n	80016dc <HAL_RCC_OscConfig+0x5c>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001976:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001978:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800197a:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 800197c:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 800197e:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001980:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001982:	4393      	bics	r3, r2
 8001984:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8001986:	f7ff fd67 	bl	8001458 <HAL_GetTick>
 800198a:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800198c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800198e:	423b      	tst	r3, r7
 8001990:	d100      	bne.n	8001994 <HAL_RCC_OscConfig+0x314>
 8001992:	e6aa      	b.n	80016ea <HAL_RCC_OscConfig+0x6a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001994:	f7ff fd60 	bl	8001458 <HAL_GetTick>
 8001998:	1b80      	subs	r0, r0, r6
 800199a:	2802      	cmp	r0, #2
 800199c:	d9f6      	bls.n	800198c <HAL_RCC_OscConfig+0x30c>
 800199e:	e6dc      	b.n	800175a <HAL_RCC_OscConfig+0xda>
 80019a0:	40021000 	.word	0x40021000
 80019a4:	fffeffff 	.word	0xfffeffff
 80019a8:	fffbffff 	.word	0xfffbffff
 80019ac:	40007000 	.word	0x40007000
 80019b0:	efffffff 	.word	0xefffffff
 80019b4:	00001388 	.word	0x00001388
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80019b8:	220c      	movs	r2, #12
 80019ba:	4d55      	ldr	r5, [pc, #340]	@ (8001b10 <HAL_RCC_OscConfig+0x490>)
 80019bc:	686b      	ldr	r3, [r5, #4]
 80019be:	4013      	ands	r3, r2
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d009      	beq.n	80019d8 <HAL_RCC_OscConfig+0x358>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80019c4:	686b      	ldr	r3, [r5, #4]
 80019c6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80019c8:	2b08      	cmp	r3, #8
 80019ca:	d10e      	bne.n	80019ea <HAL_RCC_OscConfig+0x36a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80019cc:	22c0      	movs	r2, #192	@ 0xc0
 80019ce:	686b      	ldr	r3, [r5, #4]
 80019d0:	0252      	lsls	r2, r2, #9
 80019d2:	4013      	ands	r3, r2
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d108      	bne.n	80019ea <HAL_RCC_OscConfig+0x36a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80019d8:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80019da:	039b      	lsls	r3, r3, #14
 80019dc:	d400      	bmi.n	80019e0 <HAL_RCC_OscConfig+0x360>
 80019de:	e688      	b.n	80016f2 <HAL_RCC_OscConfig+0x72>
 80019e0:	6a23      	ldr	r3, [r4, #32]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d000      	beq.n	80019e8 <HAL_RCC_OscConfig+0x368>
 80019e6:	e650      	b.n	800168a <HAL_RCC_OscConfig+0xa>
 80019e8:	e683      	b.n	80016f2 <HAL_RCC_OscConfig+0x72>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019ea:	6a23      	ldr	r3, [r4, #32]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d013      	beq.n	8001a18 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_HSI48_ENABLE();
 80019f0:	2380      	movs	r3, #128	@ 0x80
 80019f2:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 80019f4:	025b      	lsls	r3, r3, #9
 80019f6:	4313      	orrs	r3, r2
 80019f8:	636b      	str	r3, [r5, #52]	@ 0x34
        tickstart = HAL_GetTick();
 80019fa:	f7ff fd2d 	bl	8001458 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80019fe:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8001a00:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001a02:	02bf      	lsls	r7, r7, #10
 8001a04:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001a06:	423b      	tst	r3, r7
 8001a08:	d000      	beq.n	8001a0c <HAL_RCC_OscConfig+0x38c>
 8001a0a:	e672      	b.n	80016f2 <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a0c:	f7ff fd24 	bl	8001458 <HAL_GetTick>
 8001a10:	1b80      	subs	r0, r0, r6
 8001a12:	2802      	cmp	r0, #2
 8001a14:	d9f6      	bls.n	8001a04 <HAL_RCC_OscConfig+0x384>
 8001a16:	e6a0      	b.n	800175a <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI48_DISABLE();
 8001a18:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001a1a:	4a3e      	ldr	r2, [pc, #248]	@ (8001b14 <HAL_RCC_OscConfig+0x494>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001a1c:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI48_DISABLE();
 8001a1e:	4013      	ands	r3, r2
 8001a20:	636b      	str	r3, [r5, #52]	@ 0x34
        tickstart = HAL_GetTick();
 8001a22:	f7ff fd19 	bl	8001458 <HAL_GetTick>
 8001a26:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001a28:	02bf      	lsls	r7, r7, #10
 8001a2a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001a2c:	423b      	tst	r3, r7
 8001a2e:	d100      	bne.n	8001a32 <HAL_RCC_OscConfig+0x3b2>
 8001a30:	e65f      	b.n	80016f2 <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a32:	f7ff fd11 	bl	8001458 <HAL_GetTick>
 8001a36:	1b80      	subs	r0, r0, r6
 8001a38:	2802      	cmp	r0, #2
 8001a3a:	d9f6      	bls.n	8001a2a <HAL_RCC_OscConfig+0x3aa>
 8001a3c:	e68d      	b.n	800175a <HAL_RCC_OscConfig+0xda>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a3e:	210c      	movs	r1, #12
 8001a40:	4d33      	ldr	r5, [pc, #204]	@ (8001b10 <HAL_RCC_OscConfig+0x490>)
 8001a42:	686a      	ldr	r2, [r5, #4]
 8001a44:	400a      	ands	r2, r1
 8001a46:	2a08      	cmp	r2, #8
 8001a48:	d047      	beq.n	8001ada <HAL_RCC_OscConfig+0x45a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a4a:	4a33      	ldr	r2, [pc, #204]	@ (8001b18 <HAL_RCC_OscConfig+0x498>)
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d132      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x436>
        __HAL_RCC_PLL_DISABLE();
 8001a50:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a52:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8001a54:	4013      	ands	r3, r2
 8001a56:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001a58:	f7ff fcfe 	bl	8001458 <HAL_GetTick>
 8001a5c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a5e:	04bf      	lsls	r7, r7, #18
 8001a60:	682b      	ldr	r3, [r5, #0]
 8001a62:	423b      	tst	r3, r7
 8001a64:	d121      	bne.n	8001aaa <HAL_RCC_OscConfig+0x42a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a66:	220f      	movs	r2, #15
 8001a68:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a6a:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a6c:	4393      	bics	r3, r2
 8001a6e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a70:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a72:	4313      	orrs	r3, r2
 8001a74:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8001a76:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001a78:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001a7a:	686a      	ldr	r2, [r5, #4]
 8001a7c:	430b      	orrs	r3, r1
 8001a7e:	4927      	ldr	r1, [pc, #156]	@ (8001b1c <HAL_RCC_OscConfig+0x49c>)
 8001a80:	400a      	ands	r2, r1
 8001a82:	4313      	orrs	r3, r2
 8001a84:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001a86:	2380      	movs	r3, #128	@ 0x80
 8001a88:	682a      	ldr	r2, [r5, #0]
 8001a8a:	045b      	lsls	r3, r3, #17
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001a90:	f7ff fce2 	bl	8001458 <HAL_GetTick>
 8001a94:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a96:	682b      	ldr	r3, [r5, #0]
 8001a98:	4233      	tst	r3, r6
 8001a9a:	d000      	beq.n	8001a9e <HAL_RCC_OscConfig+0x41e>
 8001a9c:	e62d      	b.n	80016fa <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a9e:	f7ff fcdb 	bl	8001458 <HAL_GetTick>
 8001aa2:	1b00      	subs	r0, r0, r4
 8001aa4:	2802      	cmp	r0, #2
 8001aa6:	d9f6      	bls.n	8001a96 <HAL_RCC_OscConfig+0x416>
 8001aa8:	e657      	b.n	800175a <HAL_RCC_OscConfig+0xda>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aaa:	f7ff fcd5 	bl	8001458 <HAL_GetTick>
 8001aae:	1b80      	subs	r0, r0, r6
 8001ab0:	2802      	cmp	r0, #2
 8001ab2:	d9d5      	bls.n	8001a60 <HAL_RCC_OscConfig+0x3e0>
 8001ab4:	e651      	b.n	800175a <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_PLL_DISABLE();
 8001ab6:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab8:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8001aba:	4013      	ands	r3, r2
 8001abc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001abe:	f7ff fccb 	bl	8001458 <HAL_GetTick>
 8001ac2:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac4:	04b6      	lsls	r6, r6, #18
 8001ac6:	682b      	ldr	r3, [r5, #0]
 8001ac8:	4233      	tst	r3, r6
 8001aca:	d100      	bne.n	8001ace <HAL_RCC_OscConfig+0x44e>
 8001acc:	e615      	b.n	80016fa <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ace:	f7ff fcc3 	bl	8001458 <HAL_GetTick>
 8001ad2:	1b00      	subs	r0, r0, r4
 8001ad4:	2802      	cmp	r0, #2
 8001ad6:	d9f6      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x446>
 8001ad8:	e63f      	b.n	800175a <HAL_RCC_OscConfig+0xda>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d100      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x460>
 8001ade:	e5d4      	b.n	800168a <HAL_RCC_OscConfig+0xa>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae0:	22c0      	movs	r2, #192	@ 0xc0
        pll_config  = RCC->CFGR;
 8001ae2:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001ae6:	0252      	lsls	r2, r2, #9
        pll_config2 = RCC->CFGR2;
 8001ae8:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aea:	4002      	ands	r2, r0
 8001aec:	428a      	cmp	r2, r1
 8001aee:	d000      	beq.n	8001af2 <HAL_RCC_OscConfig+0x472>
 8001af0:	e5cb      	b.n	800168a <HAL_RCC_OscConfig+0xa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001af2:	220f      	movs	r2, #15
 8001af4:	4013      	ands	r3, r2
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d000      	beq.n	8001afe <HAL_RCC_OscConfig+0x47e>
 8001afc:	e5c5      	b.n	800168a <HAL_RCC_OscConfig+0xa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001afe:	23f0      	movs	r3, #240	@ 0xf0
 8001b00:	039b      	lsls	r3, r3, #14
 8001b02:	4018      	ands	r0, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b04:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001b06:	1ac0      	subs	r0, r0, r3
 8001b08:	1e43      	subs	r3, r0, #1
 8001b0a:	4198      	sbcs	r0, r3
 8001b0c:	b2c0      	uxtb	r0, r0
 8001b0e:	e5bd      	b.n	800168c <HAL_RCC_OscConfig+0xc>
 8001b10:	40021000 	.word	0x40021000
 8001b14:	fffeffff 	.word	0xfffeffff
 8001b18:	feffffff 	.word	0xfeffffff
 8001b1c:	ffc27fff 	.word	0xffc27fff

08001b20 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b20:	200c      	movs	r0, #12
{
 8001b22:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8001b24:	4d13      	ldr	r5, [pc, #76]	@ (8001b74 <HAL_RCC_GetSysClockFreq+0x54>)
 8001b26:	686b      	ldr	r3, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001b28:	4018      	ands	r0, r3
 8001b2a:	2808      	cmp	r0, #8
 8001b2c:	d008      	beq.n	8001b40 <HAL_RCC_GetSysClockFreq+0x20>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b2e:	380c      	subs	r0, #12
 8001b30:	4243      	negs	r3, r0
 8001b32:	4158      	adcs	r0, r3
 8001b34:	4b10      	ldr	r3, [pc, #64]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x58>)
 8001b36:	4240      	negs	r0, r0
 8001b38:	4018      	ands	r0, r3
 8001b3a:	4b10      	ldr	r3, [pc, #64]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x5c>)
 8001b3c:	18c0      	adds	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001b3e:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001b40:	200f      	movs	r0, #15
 8001b42:	490f      	ldr	r1, [pc, #60]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0x60>)
 8001b44:	0c9a      	lsrs	r2, r3, #18
 8001b46:	4002      	ands	r2, r0
 8001b48:	5c8c      	ldrb	r4, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001b4a:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8001b4c:	490d      	ldr	r1, [pc, #52]	@ (8001b84 <HAL_RCC_GetSysClockFreq+0x64>)
 8001b4e:	4002      	ands	r2, r0
 8001b50:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001b52:	22c0      	movs	r2, #192	@ 0xc0
 8001b54:	2080      	movs	r0, #128	@ 0x80
 8001b56:	0252      	lsls	r2, r2, #9
 8001b58:	4013      	ands	r3, r2
 8001b5a:	0240      	lsls	r0, r0, #9
 8001b5c:	4283      	cmp	r3, r0
 8001b5e:	d101      	bne.n	8001b64 <HAL_RCC_GetSysClockFreq+0x44>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b60:	4806      	ldr	r0, [pc, #24]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x5c>)
 8001b62:	e002      	b.n	8001b6a <HAL_RCC_GetSysClockFreq+0x4a>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d1fb      	bne.n	8001b60 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b68:	4807      	ldr	r0, [pc, #28]	@ (8001b88 <HAL_RCC_GetSysClockFreq+0x68>)
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b6a:	f7fe fae1 	bl	8000130 <__udivsi3>
 8001b6e:	4360      	muls	r0, r4
 8001b70:	e7e5      	b.n	8001b3e <HAL_RCC_GetSysClockFreq+0x1e>
 8001b72:	46c0      	nop			@ (mov r8, r8)
 8001b74:	40021000 	.word	0x40021000
 8001b78:	02625a00 	.word	0x02625a00
 8001b7c:	007a1200 	.word	0x007a1200
 8001b80:	080055f5 	.word	0x080055f5
 8001b84:	080055e5 	.word	0x080055e5
 8001b88:	02dc6c00 	.word	0x02dc6c00

08001b8c <HAL_RCC_ClockConfig>:
{
 8001b8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001b8e:	0004      	movs	r4, r0
 8001b90:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 8001b92:	2800      	cmp	r0, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8001b96:	2001      	movs	r0, #1
}
 8001b98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	4d3a      	ldr	r5, [pc, #232]	@ (8001c88 <HAL_RCC_ClockConfig+0xfc>)
 8001b9e:	682b      	ldr	r3, [r5, #0]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	428b      	cmp	r3, r1
 8001ba4:	d31c      	bcc.n	8001be0 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba6:	6822      	ldr	r2, [r4, #0]
 8001ba8:	0793      	lsls	r3, r2, #30
 8001baa:	d422      	bmi.n	8001bf2 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bac:	07d2      	lsls	r2, r2, #31
 8001bae:	d42f      	bmi.n	8001c10 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	682a      	ldr	r2, [r5, #0]
 8001bb4:	401a      	ands	r2, r3
 8001bb6:	42ba      	cmp	r2, r7
 8001bb8:	d857      	bhi.n	8001c6a <HAL_RCC_ClockConfig+0xde>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bba:	6823      	ldr	r3, [r4, #0]
 8001bbc:	4d33      	ldr	r5, [pc, #204]	@ (8001c8c <HAL_RCC_ClockConfig+0x100>)
 8001bbe:	075b      	lsls	r3, r3, #29
 8001bc0:	d45a      	bmi.n	8001c78 <HAL_RCC_ClockConfig+0xec>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001bc2:	f7ff ffad 	bl	8001b20 <HAL_RCC_GetSysClockFreq>
 8001bc6:	686b      	ldr	r3, [r5, #4]
 8001bc8:	4a31      	ldr	r2, [pc, #196]	@ (8001c90 <HAL_RCC_ClockConfig+0x104>)
 8001bca:	061b      	lsls	r3, r3, #24
 8001bcc:	0f1b      	lsrs	r3, r3, #28
 8001bce:	5cd3      	ldrb	r3, [r2, r3]
 8001bd0:	4930      	ldr	r1, [pc, #192]	@ (8001c94 <HAL_RCC_ClockConfig+0x108>)
 8001bd2:	40d8      	lsrs	r0, r3
 8001bd4:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	f7ff fbfe 	bl	80013d8 <HAL_InitTick>
  return HAL_OK;
 8001bdc:	2000      	movs	r0, #0
 8001bde:	e7db      	b.n	8001b98 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be0:	682b      	ldr	r3, [r5, #0]
 8001be2:	4393      	bics	r3, r2
 8001be4:	430b      	orrs	r3, r1
 8001be6:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be8:	682b      	ldr	r3, [r5, #0]
 8001bea:	4013      	ands	r3, r2
 8001bec:	428b      	cmp	r3, r1
 8001bee:	d1d2      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xa>
 8001bf0:	e7d9      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf2:	4926      	ldr	r1, [pc, #152]	@ (8001c8c <HAL_RCC_ClockConfig+0x100>)
 8001bf4:	0753      	lsls	r3, r2, #29
 8001bf6:	d504      	bpl.n	8001c02 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001bf8:	23e0      	movs	r3, #224	@ 0xe0
 8001bfa:	6848      	ldr	r0, [r1, #4]
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	4303      	orrs	r3, r0
 8001c00:	604b      	str	r3, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c02:	20f0      	movs	r0, #240	@ 0xf0
 8001c04:	684b      	ldr	r3, [r1, #4]
 8001c06:	4383      	bics	r3, r0
 8001c08:	68a0      	ldr	r0, [r4, #8]
 8001c0a:	4303      	orrs	r3, r0
 8001c0c:	604b      	str	r3, [r1, #4]
 8001c0e:	e7cd      	b.n	8001bac <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c10:	6862      	ldr	r2, [r4, #4]
 8001c12:	4e1e      	ldr	r6, [pc, #120]	@ (8001c8c <HAL_RCC_ClockConfig+0x100>)
 8001c14:	2a01      	cmp	r2, #1
 8001c16:	d103      	bne.n	8001c20 <HAL_RCC_ClockConfig+0x94>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c18:	6833      	ldr	r3, [r6, #0]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001c1a:	039b      	lsls	r3, r3, #14
 8001c1c:	d405      	bmi.n	8001c2a <HAL_RCC_ClockConfig+0x9e>
 8001c1e:	e7ba      	b.n	8001b96 <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c20:	2a02      	cmp	r2, #2
 8001c22:	d11a      	bne.n	8001c5a <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c24:	6833      	ldr	r3, [r6, #0]
 8001c26:	019b      	lsls	r3, r3, #6
 8001c28:	d5b5      	bpl.n	8001b96 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c2a:	2103      	movs	r1, #3
 8001c2c:	6873      	ldr	r3, [r6, #4]
 8001c2e:	438b      	bics	r3, r1
 8001c30:	4313      	orrs	r3, r2
 8001c32:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001c34:	f7ff fc10 	bl	8001458 <HAL_GetTick>
 8001c38:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c3a:	230c      	movs	r3, #12
 8001c3c:	6872      	ldr	r2, [r6, #4]
 8001c3e:	401a      	ands	r2, r3
 8001c40:	6863      	ldr	r3, [r4, #4]
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d0b3      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c48:	f7ff fc06 	bl	8001458 <HAL_GetTick>
 8001c4c:	9b01      	ldr	r3, [sp, #4]
 8001c4e:	1ac0      	subs	r0, r0, r3
 8001c50:	4b11      	ldr	r3, [pc, #68]	@ (8001c98 <HAL_RCC_ClockConfig+0x10c>)
 8001c52:	4298      	cmp	r0, r3
 8001c54:	d9f1      	bls.n	8001c3a <HAL_RCC_ClockConfig+0xae>
        return HAL_TIMEOUT;
 8001c56:	2003      	movs	r0, #3
 8001c58:	e79e      	b.n	8001b98 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001c5a:	2a03      	cmp	r2, #3
 8001c5c:	d101      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xd6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001c5e:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 8001c60:	e7db      	b.n	8001c1a <HAL_RCC_ClockConfig+0x8e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c62:	6833      	ldr	r3, [r6, #0]
 8001c64:	079b      	lsls	r3, r3, #30
 8001c66:	d4e0      	bmi.n	8001c2a <HAL_RCC_ClockConfig+0x9e>
 8001c68:	e795      	b.n	8001b96 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6a:	682a      	ldr	r2, [r5, #0]
 8001c6c:	439a      	bics	r2, r3
 8001c6e:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c70:	682a      	ldr	r2, [r5, #0]
 8001c72:	421a      	tst	r2, r3
 8001c74:	d0a1      	beq.n	8001bba <HAL_RCC_ClockConfig+0x2e>
 8001c76:	e78e      	b.n	8001b96 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c78:	686b      	ldr	r3, [r5, #4]
 8001c7a:	4a08      	ldr	r2, [pc, #32]	@ (8001c9c <HAL_RCC_ClockConfig+0x110>)
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	68e2      	ldr	r2, [r4, #12]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	606b      	str	r3, [r5, #4]
 8001c84:	e79d      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x36>
 8001c86:	46c0      	nop			@ (mov r8, r8)
 8001c88:	40022000 	.word	0x40022000
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	080033a0 	.word	0x080033a0
 8001c94:	20000000 	.word	0x20000000
 8001c98:	00001388 	.word	0x00001388
 8001c9c:	fffff8ff 	.word	0xfffff8ff

08001ca0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001ca0:	4b04      	ldr	r3, [pc, #16]	@ (8001cb4 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8001ca2:	4a05      	ldr	r2, [pc, #20]	@ (8001cb8 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	4905      	ldr	r1, [pc, #20]	@ (8001cbc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001ca8:	055b      	lsls	r3, r3, #21
 8001caa:	0f5b      	lsrs	r3, r3, #29
 8001cac:	5ccb      	ldrb	r3, [r1, r3]
 8001cae:	6810      	ldr	r0, [r2, #0]
 8001cb0:	40d8      	lsrs	r0, r3
}    
 8001cb2:	4770      	bx	lr
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	20000000 	.word	0x20000000
 8001cbc:	08003398 	.word	0x08003398

08001cc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cc0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001cc2:	6803      	ldr	r3, [r0, #0]
{
 8001cc4:	0005      	movs	r5, r0
 8001cc6:	b085      	sub	sp, #20
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001cc8:	03db      	lsls	r3, r3, #15
 8001cca:	d52b      	bpl.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x64>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ccc:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001cce:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cd0:	4c41      	ldr	r4, [pc, #260]	@ (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001cd2:	0552      	lsls	r2, r2, #21
 8001cd4:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001cd6:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cd8:	4213      	tst	r3, r2
 8001cda:	d108      	bne.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cdc:	69e3      	ldr	r3, [r4, #28]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	61e3      	str	r3, [r4, #28]
 8001ce2:	69e3      	ldr	r3, [r4, #28]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	9303      	str	r3, [sp, #12]
 8001ce8:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001cea:	2301      	movs	r3, #1
 8001cec:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cee:	2780      	movs	r7, #128	@ 0x80
 8001cf0:	4e3a      	ldr	r6, [pc, #232]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8001cf2:	007f      	lsls	r7, r7, #1
 8001cf4:	6833      	ldr	r3, [r6, #0]
 8001cf6:	423b      	tst	r3, r7
 8001cf8:	d034      	beq.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0xa4>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001cfa:	6a21      	ldr	r1, [r4, #32]
 8001cfc:	22c0      	movs	r2, #192	@ 0xc0
 8001cfe:	0008      	movs	r0, r1
 8001d00:	0092      	lsls	r2, r2, #2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d02:	686b      	ldr	r3, [r5, #4]
 8001d04:	4e36      	ldr	r6, [pc, #216]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d06:	4010      	ands	r0, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d08:	4211      	tst	r1, r2
 8001d0a:	d13d      	bne.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0xc8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d0c:	6a23      	ldr	r3, [r4, #32]
 8001d0e:	686a      	ldr	r2, [r5, #4]
 8001d10:	4033      	ands	r3, r6
 8001d12:	4313      	orrs	r3, r2
 8001d14:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d16:	9b00      	ldr	r3, [sp, #0]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d103      	bne.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d1c:	69e3      	ldr	r3, [r4, #28]
 8001d1e:	4a31      	ldr	r2, [pc, #196]	@ (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001d20:	4013      	ands	r3, r2
 8001d22:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d24:	682b      	ldr	r3, [r5, #0]
 8001d26:	07da      	lsls	r2, r3, #31
 8001d28:	d506      	bpl.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d2a:	2003      	movs	r0, #3
 8001d2c:	492a      	ldr	r1, [pc, #168]	@ (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001d2e:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8001d30:	4382      	bics	r2, r0
 8001d32:	68a8      	ldr	r0, [r5, #8]
 8001d34:	4302      	orrs	r2, r0
 8001d36:	630a      	str	r2, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d38:	069a      	lsls	r2, r3, #26
 8001d3a:	d506      	bpl.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d3c:	2010      	movs	r0, #16
 8001d3e:	4926      	ldr	r1, [pc, #152]	@ (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001d40:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8001d42:	4382      	bics	r2, r0
 8001d44:	68e8      	ldr	r0, [r5, #12]
 8001d46:	4302      	orrs	r2, r0
 8001d48:	630a      	str	r2, [r1, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001d4a:	039a      	lsls	r2, r3, #14
 8001d4c:	d506      	bpl.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d4e:	2080      	movs	r0, #128	@ 0x80
 8001d50:	4921      	ldr	r1, [pc, #132]	@ (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001d52:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8001d54:	4382      	bics	r2, r0
 8001d56:	6968      	ldr	r0, [r5, #20]
 8001d58:	4302      	orrs	r2, r0
 8001d5a:	630a      	str	r2, [r1, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001d5c:	055b      	lsls	r3, r3, #21
 8001d5e:	d433      	bmi.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001d60:	2000      	movs	r0, #0
 8001d62:	e00f      	b.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d64:	6833      	ldr	r3, [r6, #0]
 8001d66:	433b      	orrs	r3, r7
 8001d68:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001d6a:	f7ff fb75 	bl	8001458 <HAL_GetTick>
 8001d6e:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d70:	6833      	ldr	r3, [r6, #0]
 8001d72:	423b      	tst	r3, r7
 8001d74:	d1c1      	bne.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d76:	f7ff fb6f 	bl	8001458 <HAL_GetTick>
 8001d7a:	9b01      	ldr	r3, [sp, #4]
 8001d7c:	1ac0      	subs	r0, r0, r3
 8001d7e:	2864      	cmp	r0, #100	@ 0x64
 8001d80:	d9f6      	bls.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0xb0>
          return HAL_TIMEOUT;
 8001d82:	2003      	movs	r0, #3
}
 8001d84:	b005      	add	sp, #20
 8001d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d88:	4013      	ands	r3, r2
 8001d8a:	4283      	cmp	r3, r0
 8001d8c:	d0be      	beq.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x4c>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d8e:	2280      	movs	r2, #128	@ 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d90:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d92:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d94:	0019      	movs	r1, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d96:	0252      	lsls	r2, r2, #9
 8001d98:	4302      	orrs	r2, r0
 8001d9a:	6222      	str	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d9c:	6a22      	ldr	r2, [r4, #32]
 8001d9e:	4812      	ldr	r0, [pc, #72]	@ (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x128>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001da0:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001da2:	4002      	ands	r2, r0
 8001da4:	6222      	str	r2, [r4, #32]
      RCC->BDCR = temp_reg;
 8001da6:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001da8:	07db      	lsls	r3, r3, #31
 8001daa:	d5af      	bpl.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x4c>
        tickstart = HAL_GetTick();
 8001dac:	f7ff fb54 	bl	8001458 <HAL_GetTick>
 8001db0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db2:	2202      	movs	r2, #2
 8001db4:	6a23      	ldr	r3, [r4, #32]
 8001db6:	4213      	tst	r3, r2
 8001db8:	d1a8      	bne.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x4c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dba:	f7ff fb4d 	bl	8001458 <HAL_GetTick>
 8001dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8001dc0:	1bc0      	subs	r0, r0, r7
 8001dc2:	4298      	cmp	r0, r3
 8001dc4:	d9f5      	bls.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0xf2>
 8001dc6:	e7dc      	b.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001dc8:	2140      	movs	r1, #64	@ 0x40
 8001dca:	4a03      	ldr	r2, [pc, #12]	@ (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001dcc:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8001dce:	438b      	bics	r3, r1
 8001dd0:	6929      	ldr	r1, [r5, #16]
 8001dd2:	430b      	orrs	r3, r1
 8001dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd6:	e7c3      	b.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40007000 	.word	0x40007000
 8001de0:	fffffcff 	.word	0xfffffcff
 8001de4:	efffffff 	.word	0xefffffff
 8001de8:	fffeffff 	.word	0xfffeffff
 8001dec:	00001388 	.word	0x00001388

08001df0 <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 8001df0:	b570      	push	{r4, r5, r6, lr}
 8001df2:	0004      	movs	r4, r0
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
  {
    return HAL_ERROR;
 8001df4:	2001      	movs	r0, #1
  if (hsmbus == NULL)
 8001df6:	2c00      	cmp	r4, #0
 8001df8:	d053      	beq.n	8001ea2 <HAL_SMBUS_Init+0xb2>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 8001dfa:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d105      	bne.n	8001e0c <HAL_SMBUS_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 8001e00:	0022      	movs	r2, r4
 8001e02:	3244      	adds	r2, #68	@ 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 8001e04:	0020      	movs	r0, r4
    hsmbus->Lock = HAL_UNLOCKED;
 8001e06:	7013      	strb	r3, [r2, #0]
    HAL_SMBUS_MspInit(hsmbus);
 8001e08:	f7fe fb10 	bl	800042c <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8001e0c:	2302      	movs	r3, #2

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 8001e0e:	2101      	movs	r1, #1
  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8001e10:	64a3      	str	r3, [r4, #72]	@ 0x48
  __HAL_SMBUS_DISABLE(hsmbus);
 8001e12:	6823      	ldr	r3, [r4, #0]
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  if (hsmbus->Init.OwnAddress1 != 0UL)
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 8001e14:	6920      	ldr	r0, [r4, #16]
  __HAL_SMBUS_DISABLE(hsmbus);
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	438a      	bics	r2, r1
 8001e1a:	601a      	str	r2, [r3, #0]
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 8001e1c:	4926      	ldr	r1, [pc, #152]	@ (8001eb8 <HAL_SMBUS_Init+0xc8>)
 8001e1e:	6862      	ldr	r2, [r4, #4]
 8001e20:	400a      	ands	r2, r1
 8001e22:	611a      	str	r2, [r3, #16]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 8001e24:	695a      	ldr	r2, [r3, #20]
 8001e26:	4925      	ldr	r1, [pc, #148]	@ (8001ebc <HAL_SMBUS_Init+0xcc>)
 8001e28:	400a      	ands	r2, r1
 8001e2a:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 8001e2c:	695a      	ldr	r2, [r3, #20]
 8001e2e:	0052      	lsls	r2, r2, #1
 8001e30:	0852      	lsrs	r2, r2, #1
 8001e32:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 8001e34:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8001e36:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e38:	689a      	ldr	r2, [r3, #8]
 8001e3a:	400a      	ands	r2, r1
  if (hsmbus->Init.OwnAddress1 != 0UL)
 8001e3c:	68e1      	ldr	r1, [r4, #12]
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e3e:	609a      	str	r2, [r3, #8]
  if (hsmbus->Init.OwnAddress1 != 0UL)
 8001e40:	2900      	cmp	r1, #0
 8001e42:	d033      	beq.n	8001eac <HAL_SMBUS_Init+0xbc>
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 8001e44:	2801      	cmp	r0, #1
 8001e46:	d12d      	bne.n	8001ea4 <HAL_SMBUS_Init+0xb4>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 8001e48:	2280      	movs	r2, #128	@ 0x80
 8001e4a:	0212      	lsls	r2, r2, #8
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	609a      	str	r2, [r3, #8]
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e50:	6859      	ldr	r1, [r3, #4]
 8001e52:	4a1b      	ldr	r2, [pc, #108]	@ (8001ec0 <HAL_SMBUS_Init+0xd0>)
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
                            (hsmbus->Init.OwnAddress2Masks << 8U));

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8001e54:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e56:	430a      	orrs	r2, r1
 8001e58:	605a      	str	r2, [r3, #4]
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8001e5a:	69a1      	ldr	r1, [r4, #24]
 8001e5c:	6962      	ldr	r2, [r4, #20]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8001e5e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8001e60:	430a      	orrs	r2, r1
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 8001e62:	69e1      	ldr	r1, [r4, #28]
 8001e64:	0209      	lsls	r1, r1, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8001e66:	430a      	orrs	r2, r1
 8001e68:	60da      	str	r2, [r3, #12]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8001e6a:	6a22      	ldr	r2, [r4, #32]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8001e6c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8001e6e:	432a      	orrs	r2, r5
 8001e70:	4302      	orrs	r2, r0
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8001e72:	68a5      	ldr	r5, [r4, #8]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	432a      	orrs	r2, r5
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8001e78:	601a      	str	r2, [r3, #0]
                           hsmbus->Init.AnalogFilter);

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8001e7a:	2280      	movs	r2, #128	@ 0x80
 8001e7c:	0412      	lsls	r2, r2, #16
 8001e7e:	4290      	cmp	r0, r2
 8001e80:	d107      	bne.n	8001e92 <HAL_SMBUS_Init+0xa2>
 8001e82:	4a10      	ldr	r2, [pc, #64]	@ (8001ec4 <HAL_SMBUS_Init+0xd4>)
 8001e84:	4211      	tst	r1, r2
 8001e86:	d104      	bne.n	8001e92 <HAL_SMBUS_Init+0xa2>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 8001e88:	2280      	movs	r2, #128	@ 0x80
 8001e8a:	6819      	ldr	r1, [r3, #0]
 8001e8c:	0252      	lsls	r2, r2, #9
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 8001e92:	2201      	movs	r2, #1

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8001e94:	2000      	movs	r0, #0
  __HAL_SMBUS_ENABLE(hsmbus);
 8001e96:	6819      	ldr	r1, [r3, #0]
 8001e98:	4311      	orrs	r1, r2
 8001e9a:	6019      	str	r1, [r3, #0]
  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8001e9c:	64e0      	str	r0, [r4, #76]	@ 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 8001e9e:	6422      	str	r2, [r4, #64]	@ 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 8001ea0:	64a2      	str	r2, [r4, #72]	@ 0x48

  return HAL_OK;
}
 8001ea2:	bd70      	pop	{r4, r5, r6, pc}
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 8001ea4:	2284      	movs	r2, #132	@ 0x84
 8001ea6:	0212      	lsls	r2, r2, #8
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	609a      	str	r2, [r3, #8]
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 8001eac:	2802      	cmp	r0, #2
 8001eae:	d1cf      	bne.n	8001e50 <HAL_SMBUS_Init+0x60>
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 8001eb0:	2280      	movs	r2, #128	@ 0x80
 8001eb2:	0112      	lsls	r2, r2, #4
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	e7cb      	b.n	8001e50 <HAL_SMBUS_Init+0x60>
 8001eb8:	f0ffffff 	.word	0xf0ffffff
 8001ebc:	ffff7fff 	.word	0xffff7fff
 8001ec0:	02008000 	.word	0x02008000
 8001ec4:	ffdfffff 	.word	0xffdfffff

08001ec8 <HAL_SMBUS_EnableAlert_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
  /* Enable SMBus alert */
  hsmbus->Instance->CR1 |= I2C_CR1_ALERTEN;
 8001ec8:	2280      	movs	r2, #128	@ 0x80
 8001eca:	6803      	ldr	r3, [r0, #0]
 8001ecc:	03d2      	lsls	r2, r2, #15
 8001ece:	6819      	ldr	r1, [r3, #0]

  /* Enable Alert Interrupt */
  SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_ALERT);

  return HAL_OK;
}
 8001ed0:	2000      	movs	r0, #0
  hsmbus->Instance->CR1 |= I2C_CR1_ALERTEN;
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	601a      	str	r2, [r3, #0]
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
 8001ed6:	2280      	movs	r2, #128	@ 0x80
 8001ed8:	0192      	lsls	r2, r2, #6
 8001eda:	61da      	str	r2, [r3, #28]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of SMBUS interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_SMBUS_ENABLE_IT(hsmbus, tmpisr);
 8001edc:	2280      	movs	r2, #128	@ 0x80
 8001ede:	6819      	ldr	r1, [r3, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	601a      	str	r2, [r3, #0]
}
 8001ee4:	4770      	bx	lr
	...

08001ee8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eea:	0004      	movs	r4, r0
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
  {
    return HAL_ERROR;
 8001eec:	2001      	movs	r0, #1
  if (hspi == NULL)
 8001eee:	2c00      	cmp	r4, #0
 8001ef0:	d067      	beq.n	8001fc2 <HAL_SPI_Init+0xda>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ef2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d165      	bne.n	8001fc4 <HAL_SPI_Init+0xdc>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ef8:	2282      	movs	r2, #130	@ 0x82
 8001efa:	6861      	ldr	r1, [r4, #4]
 8001efc:	0052      	lsls	r2, r2, #1
 8001efe:	4291      	cmp	r1, r2
 8001f00:	d000      	beq.n	8001f04 <HAL_SPI_Init+0x1c>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f02:	61e3      	str	r3, [r4, #28]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f04:	2300      	movs	r3, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f06:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f08:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f0a:	355d      	adds	r5, #93	@ 0x5d
 8001f0c:	782b      	ldrb	r3, [r5, #0]
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d105      	bne.n	8001f20 <HAL_SPI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f14:	0023      	movs	r3, r4
 8001f16:	335c      	adds	r3, #92	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f18:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8001f1a:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 8001f1c:	f7fe fac4 	bl	80004a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f20:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f22:	2240      	movs	r2, #64	@ 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8001f24:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8001f26:	6821      	ldr	r1, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f28:	68e6      	ldr	r6, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8001f2a:	680b      	ldr	r3, [r1, #0]
 8001f2c:	4393      	bics	r3, r2
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f2e:	22e0      	movs	r2, #224	@ 0xe0
  __HAL_SPI_DISABLE(hspi);
 8001f30:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f32:	00d2      	lsls	r2, r2, #3
 8001f34:	2300      	movs	r3, #0
 8001f36:	4296      	cmp	r6, r2
 8001f38:	d948      	bls.n	8001fcc <HAL_SPI_Init+0xe4>
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001f3a:	22f0      	movs	r2, #240	@ 0xf0
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001f3c:	0018      	movs	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001f3e:	0112      	lsls	r2, r2, #4
 8001f40:	4296      	cmp	r6, r2
 8001f42:	d000      	beq.n	8001f46 <HAL_SPI_Init+0x5e>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f44:	62a3      	str	r3, [r4, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f46:	2282      	movs	r2, #130	@ 0x82
 8001f48:	2784      	movs	r7, #132	@ 0x84
 8001f4a:	6863      	ldr	r3, [r4, #4]
 8001f4c:	0052      	lsls	r2, r2, #1
 8001f4e:	4013      	ands	r3, r2
 8001f50:	68a2      	ldr	r2, [r4, #8]
 8001f52:	023f      	lsls	r7, r7, #8
 8001f54:	403a      	ands	r2, r7
 8001f56:	2702      	movs	r7, #2
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	6922      	ldr	r2, [r4, #16]
 8001f5c:	69a5      	ldr	r5, [r4, #24]
 8001f5e:	403a      	ands	r2, r7
 8001f60:	4313      	orrs	r3, r2
 8001f62:	2201      	movs	r2, #1
 8001f64:	6967      	ldr	r7, [r4, #20]
 8001f66:	4017      	ands	r7, r2
 8001f68:	433b      	orrs	r3, r7
 8001f6a:	2780      	movs	r7, #128	@ 0x80
 8001f6c:	00bf      	lsls	r7, r7, #2
 8001f6e:	402f      	ands	r7, r5
 8001f70:	433b      	orrs	r3, r7
 8001f72:	69e7      	ldr	r7, [r4, #28]
 8001f74:	3237      	adds	r2, #55	@ 0x37
 8001f76:	4017      	ands	r7, r2
 8001f78:	433b      	orrs	r3, r7
 8001f7a:	6a27      	ldr	r7, [r4, #32]
 8001f7c:	3248      	adds	r2, #72	@ 0x48
 8001f7e:	4017      	ands	r7, r2
 8001f80:	2280      	movs	r2, #128	@ 0x80
 8001f82:	433b      	orrs	r3, r7
 8001f84:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
 8001f86:	0192      	lsls	r2, r2, #6
 8001f88:	4017      	ands	r7, r2
 8001f8a:	433b      	orrs	r3, r7
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001f8c:	2710      	movs	r7, #16
 8001f8e:	2208      	movs	r2, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f90:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001f92:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001f94:	0c2d      	lsrs	r5, r5, #16
 8001f96:	403b      	ands	r3, r7
 8001f98:	6b67      	ldr	r7, [r4, #52]	@ 0x34
 8001f9a:	4017      	ands	r7, r2
 8001f9c:	433b      	orrs	r3, r7
 8001f9e:	27f0      	movs	r7, #240	@ 0xf0
 8001fa0:	013f      	lsls	r7, r7, #4
 8001fa2:	403e      	ands	r6, r7
 8001fa4:	4333      	orrs	r3, r6
 8001fa6:	2604      	movs	r6, #4
 8001fa8:	4035      	ands	r5, r6
 8001faa:	432b      	orrs	r3, r5
 8001fac:	4303      	orrs	r3, r0
 8001fae:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001fb0:	69cb      	ldr	r3, [r1, #28]
 8001fb2:	4808      	ldr	r0, [pc, #32]	@ (8001fd4 <HAL_SPI_Init+0xec>)
 8001fb4:	4003      	ands	r3, r0
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fb6:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001fb8:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8001fba:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fbc:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001fbe:	345d      	adds	r4, #93	@ 0x5d
 8001fc0:	7023      	strb	r3, [r4, #0]

  return HAL_OK;
}
 8001fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001fc8:	6163      	str	r3, [r4, #20]
 8001fca:	e79b      	b.n	8001f04 <HAL_SPI_Init+0x1c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001fcc:	2080      	movs	r0, #128	@ 0x80
 8001fce:	0140      	lsls	r0, r0, #5
 8001fd0:	e7b6      	b.n	8001f40 <HAL_SPI_Init+0x58>
 8001fd2:	46c0      	nop			@ (mov r8, r8)
 8001fd4:	fffff7ff 	.word	0xfffff7ff

08001fd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001fd8:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fda:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001fe4:	6801      	ldr	r1, [r0, #0]
 8001fe6:	4d12      	ldr	r5, [pc, #72]	@ (8002030 <UART_EndRxTransfer+0x58>)
 8001fe8:	680b      	ldr	r3, [r1, #0]
 8001fea:	402b      	ands	r3, r5
 8001fec:	600b      	str	r3, [r1, #0]
 8001fee:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ff2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ff6:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ffa:	6801      	ldr	r1, [r0, #0]
 8001ffc:	688b      	ldr	r3, [r1, #8]
 8001ffe:	4393      	bics	r3, r2
 8002000:	608b      	str	r3, [r1, #8]
 8002002:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002006:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8002008:	4293      	cmp	r3, r2
 800200a:	d10a      	bne.n	8002022 <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800200c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002010:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002014:	2410      	movs	r4, #16
 8002016:	6802      	ldr	r2, [r0, #0]
 8002018:	6813      	ldr	r3, [r2, #0]
 800201a:	43a3      	bics	r3, r4
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002022:	2220      	movs	r2, #32
 8002024:	1d03      	adds	r3, r0, #4
 8002026:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002028:	2300      	movs	r3, #0
 800202a:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800202c:	6683      	str	r3, [r0, #104]	@ 0x68
}
 800202e:	bd30      	pop	{r4, r5, pc}
 8002030:	fffffedf 	.word	0xfffffedf

08002034 <UART_SetConfig>:
{
 8002034:	b570      	push	{r4, r5, r6, lr}
 8002036:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002038:	6925      	ldr	r5, [r4, #16]
 800203a:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800203c:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800203e:	4329      	orrs	r1, r5
 8002040:	6965      	ldr	r5, [r4, #20]
 8002042:	69c2      	ldr	r2, [r0, #28]
 8002044:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002046:	6818      	ldr	r0, [r3, #0]
 8002048:	4d3d      	ldr	r5, [pc, #244]	@ (8002140 <UART_SetConfig+0x10c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800204a:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800204c:	4028      	ands	r0, r5
 800204e:	4301      	orrs	r1, r0
 8002050:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002052:	6859      	ldr	r1, [r3, #4]
 8002054:	483b      	ldr	r0, [pc, #236]	@ (8002144 <UART_SetConfig+0x110>)
  tmpreg |= huart->Init.OneBitSampling;
 8002056:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002058:	4001      	ands	r1, r0
 800205a:	68e0      	ldr	r0, [r4, #12]
 800205c:	4301      	orrs	r1, r0
 800205e:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002060:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002062:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8002064:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002066:	4d38      	ldr	r5, [pc, #224]	@ (8002148 <UART_SetConfig+0x114>)
 8002068:	4028      	ands	r0, r5
 800206a:	4301      	orrs	r1, r0
 800206c:	6099      	str	r1, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800206e:	4937      	ldr	r1, [pc, #220]	@ (800214c <UART_SetConfig+0x118>)
 8002070:	428b      	cmp	r3, r1
 8002072:	d115      	bne.n	80020a0 <UART_SetConfig+0x6c>
 8002074:	2103      	movs	r1, #3
 8002076:	4b36      	ldr	r3, [pc, #216]	@ (8002150 <UART_SetConfig+0x11c>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207a:	400b      	ands	r3, r1
 800207c:	3b01      	subs	r3, #1
 800207e:	2b02      	cmp	r3, #2
 8002080:	d851      	bhi.n	8002126 <UART_SetConfig+0xf2>
 8002082:	4934      	ldr	r1, [pc, #208]	@ (8002154 <UART_SetConfig+0x120>)
 8002084:	5cc8      	ldrb	r0, [r1, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002086:	2380      	movs	r3, #128	@ 0x80
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	429a      	cmp	r2, r3
 800208c:	d127      	bne.n	80020de <UART_SetConfig+0xaa>
    switch (clocksource)
 800208e:	2808      	cmp	r0, #8
 8002090:	d847      	bhi.n	8002122 <UART_SetConfig+0xee>
 8002092:	f7fe f839 	bl	8000108 <__gnu_thumb1_case_uqi>
 8002096:	464c      	.short	0x464c
 8002098:	460b460e 	.word	0x460b460e
 800209c:	4646      	.short	0x4646
 800209e:	0f          	.byte	0x0f
 800209f:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80020a0:	492d      	ldr	r1, [pc, #180]	@ (8002158 <UART_SetConfig+0x124>)
 80020a2:	185b      	adds	r3, r3, r1
 80020a4:	1e59      	subs	r1, r3, #1
 80020a6:	418b      	sbcs	r3, r1
 80020a8:	0118      	lsls	r0, r3, #4
 80020aa:	e7ec      	b.n	8002086 <UART_SetConfig+0x52>
        pclk = HAL_RCC_GetSysClockFreq();
 80020ac:	f7ff fd38 	bl	8001b20 <HAL_RCC_GetSysClockFreq>
 80020b0:	e03f      	b.n	8002132 <UART_SetConfig+0xfe>
    switch (clocksource)
 80020b2:	4a2a      	ldr	r2, [pc, #168]	@ (800215c <UART_SetConfig+0x128>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80020b4:	6861      	ldr	r1, [r4, #4]
 80020b6:	0052      	lsls	r2, r2, #1
 80020b8:	0848      	lsrs	r0, r1, #1
 80020ba:	1810      	adds	r0, r2, r0
 80020bc:	f7fe f838 	bl	8000130 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80020c0:	0002      	movs	r2, r0
 80020c2:	4b27      	ldr	r3, [pc, #156]	@ (8002160 <UART_SetConfig+0x12c>)
 80020c4:	3a10      	subs	r2, #16
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d82b      	bhi.n	8002122 <UART_SetConfig+0xee>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80020ca:	230f      	movs	r3, #15
 80020cc:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80020ce:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80020d0:	439a      	bics	r2, r3
 80020d2:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80020d4:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 80020d6:	6822      	ldr	r2, [r4, #0]
 80020d8:	4303      	orrs	r3, r0
 80020da:	60d3      	str	r3, [r2, #12]
 80020dc:	e02b      	b.n	8002136 <UART_SetConfig+0x102>
    switch (clocksource)
 80020de:	2808      	cmp	r0, #8
 80020e0:	d81f      	bhi.n	8002122 <UART_SetConfig+0xee>
 80020e2:	f7fe f811 	bl	8000108 <__gnu_thumb1_case_uqi>
 80020e6:	1e13      	.short	0x1e13
 80020e8:	1e181e05 	.word	0x1e181e05
 80020ec:	1e1e      	.short	0x1e1e
 80020ee:	1b          	.byte	0x1b
 80020ef:	00          	.byte	0x00
        pclk = (uint32_t) HSI_VALUE;
 80020f0:	481a      	ldr	r0, [pc, #104]	@ (800215c <UART_SetConfig+0x128>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80020f2:	6861      	ldr	r1, [r4, #4]
 80020f4:	084b      	lsrs	r3, r1, #1
 80020f6:	1818      	adds	r0, r3, r0
 80020f8:	f7fe f81a 	bl	8000130 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80020fc:	0002      	movs	r2, r0
 80020fe:	4b18      	ldr	r3, [pc, #96]	@ (8002160 <UART_SetConfig+0x12c>)
 8002100:	3a10      	subs	r2, #16
 8002102:	429a      	cmp	r2, r3
 8002104:	d80d      	bhi.n	8002122 <UART_SetConfig+0xee>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002106:	6823      	ldr	r3, [r4, #0]
 8002108:	60d8      	str	r0, [r3, #12]
 800210a:	e014      	b.n	8002136 <UART_SetConfig+0x102>
        pclk = HAL_RCC_GetPCLK1Freq();
 800210c:	f7ff fdc8 	bl	8001ca0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002110:	2800      	cmp	r0, #0
 8002112:	d010      	beq.n	8002136 <UART_SetConfig+0x102>
 8002114:	e7ed      	b.n	80020f2 <UART_SetConfig+0xbe>
        pclk = HAL_RCC_GetSysClockFreq();
 8002116:	f7ff fd03 	bl	8001b20 <HAL_RCC_GetSysClockFreq>
        break;
 800211a:	e7f9      	b.n	8002110 <UART_SetConfig+0xdc>
    switch (clocksource)
 800211c:	2080      	movs	r0, #128	@ 0x80
 800211e:	0200      	lsls	r0, r0, #8
 8002120:	e7e7      	b.n	80020f2 <UART_SetConfig+0xbe>
        ret = HAL_ERROR;
 8002122:	2001      	movs	r0, #1
 8002124:	e008      	b.n	8002138 <UART_SetConfig+0x104>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002126:	2380      	movs	r3, #128	@ 0x80
 8002128:	021b      	lsls	r3, r3, #8
 800212a:	429a      	cmp	r2, r3
 800212c:	d1ee      	bne.n	800210c <UART_SetConfig+0xd8>
        pclk = HAL_RCC_GetPCLK1Freq();
 800212e:	f7ff fdb7 	bl	8001ca0 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8002132:	1e02      	subs	r2, r0, #0
    if (pclk != 0U)
 8002134:	d1be      	bne.n	80020b4 <UART_SetConfig+0x80>
        pclk = (uint32_t) HSI_VALUE;
 8002136:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8002138:	2300      	movs	r3, #0
 800213a:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 800213c:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 800213e:	bd70      	pop	{r4, r5, r6, pc}
 8002140:	efff69f3 	.word	0xefff69f3
 8002144:	ffffcfff 	.word	0xffffcfff
 8002148:	fffff4ff 	.word	0xfffff4ff
 800214c:	40013800 	.word	0x40013800
 8002150:	40021000 	.word	0x40021000
 8002154:	08005605 	.word	0x08005605
 8002158:	bfffbc00 	.word	0xbfffbc00
 800215c:	007a1200 	.word	0x007a1200
 8002160:	0000ffef 	.word	0x0000ffef

08002164 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002164:	6a43      	ldr	r3, [r0, #36]	@ 0x24
{
 8002166:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002168:	071a      	lsls	r2, r3, #28
 800216a:	d506      	bpl.n	800217a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800216c:	6801      	ldr	r1, [r0, #0]
 800216e:	4c28      	ldr	r4, [pc, #160]	@ (8002210 <UART_AdvFeatureConfig+0xac>)
 8002170:	684a      	ldr	r2, [r1, #4]
 8002172:	4022      	ands	r2, r4
 8002174:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8002176:	4322      	orrs	r2, r4
 8002178:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800217a:	07da      	lsls	r2, r3, #31
 800217c:	d506      	bpl.n	800218c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800217e:	6801      	ldr	r1, [r0, #0]
 8002180:	4c24      	ldr	r4, [pc, #144]	@ (8002214 <UART_AdvFeatureConfig+0xb0>)
 8002182:	684a      	ldr	r2, [r1, #4]
 8002184:	4022      	ands	r2, r4
 8002186:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8002188:	4322      	orrs	r2, r4
 800218a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800218c:	079a      	lsls	r2, r3, #30
 800218e:	d506      	bpl.n	800219e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002190:	6801      	ldr	r1, [r0, #0]
 8002192:	4c21      	ldr	r4, [pc, #132]	@ (8002218 <UART_AdvFeatureConfig+0xb4>)
 8002194:	684a      	ldr	r2, [r1, #4]
 8002196:	4022      	ands	r2, r4
 8002198:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800219a:	4322      	orrs	r2, r4
 800219c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800219e:	075a      	lsls	r2, r3, #29
 80021a0:	d506      	bpl.n	80021b0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80021a2:	6801      	ldr	r1, [r0, #0]
 80021a4:	4c1d      	ldr	r4, [pc, #116]	@ (800221c <UART_AdvFeatureConfig+0xb8>)
 80021a6:	684a      	ldr	r2, [r1, #4]
 80021a8:	4022      	ands	r2, r4
 80021aa:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80021ac:	4322      	orrs	r2, r4
 80021ae:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80021b0:	06da      	lsls	r2, r3, #27
 80021b2:	d506      	bpl.n	80021c2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80021b4:	6801      	ldr	r1, [r0, #0]
 80021b6:	4c1a      	ldr	r4, [pc, #104]	@ (8002220 <UART_AdvFeatureConfig+0xbc>)
 80021b8:	688a      	ldr	r2, [r1, #8]
 80021ba:	4022      	ands	r2, r4
 80021bc:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80021be:	4322      	orrs	r2, r4
 80021c0:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80021c2:	069a      	lsls	r2, r3, #26
 80021c4:	d506      	bpl.n	80021d4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80021c6:	6801      	ldr	r1, [r0, #0]
 80021c8:	4c16      	ldr	r4, [pc, #88]	@ (8002224 <UART_AdvFeatureConfig+0xc0>)
 80021ca:	688a      	ldr	r2, [r1, #8]
 80021cc:	4022      	ands	r2, r4
 80021ce:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80021d0:	4322      	orrs	r2, r4
 80021d2:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80021d4:	065a      	lsls	r2, r3, #25
 80021d6:	d510      	bpl.n	80021fa <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80021d8:	6801      	ldr	r1, [r0, #0]
 80021da:	4d13      	ldr	r5, [pc, #76]	@ (8002228 <UART_AdvFeatureConfig+0xc4>)
 80021dc:	684a      	ldr	r2, [r1, #4]
 80021de:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 80021e0:	402a      	ands	r2, r5
 80021e2:	4322      	orrs	r2, r4
 80021e4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80021e6:	2280      	movs	r2, #128	@ 0x80
 80021e8:	0352      	lsls	r2, r2, #13
 80021ea:	4294      	cmp	r4, r2
 80021ec:	d105      	bne.n	80021fa <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80021ee:	684a      	ldr	r2, [r1, #4]
 80021f0:	4c0e      	ldr	r4, [pc, #56]	@ (800222c <UART_AdvFeatureConfig+0xc8>)
 80021f2:	4022      	ands	r2, r4
 80021f4:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 80021f6:	4322      	orrs	r2, r4
 80021f8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80021fa:	061b      	lsls	r3, r3, #24
 80021fc:	d506      	bpl.n	800220c <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80021fe:	6802      	ldr	r2, [r0, #0]
 8002200:	490b      	ldr	r1, [pc, #44]	@ (8002230 <UART_AdvFeatureConfig+0xcc>)
 8002202:	6853      	ldr	r3, [r2, #4]
 8002204:	400b      	ands	r3, r1
 8002206:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8002208:	430b      	orrs	r3, r1
 800220a:	6053      	str	r3, [r2, #4]
}
 800220c:	bd30      	pop	{r4, r5, pc}
 800220e:	46c0      	nop			@ (mov r8, r8)
 8002210:	ffff7fff 	.word	0xffff7fff
 8002214:	fffdffff 	.word	0xfffdffff
 8002218:	fffeffff 	.word	0xfffeffff
 800221c:	fffbffff 	.word	0xfffbffff
 8002220:	ffffefff 	.word	0xffffefff
 8002224:	ffffdfff 	.word	0xffffdfff
 8002228:	ffefffff 	.word	0xffefffff
 800222c:	ff9fffff 	.word	0xff9fffff
 8002230:	fff7ffff 	.word	0xfff7ffff

08002234 <UART_WaitOnFlagUntilTimeout>:
{
 8002234:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002236:	0004      	movs	r4, r0
 8002238:	000d      	movs	r5, r1
 800223a:	0017      	movs	r7, r2
 800223c:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800223e:	6822      	ldr	r2, [r4, #0]
 8002240:	69d3      	ldr	r3, [r2, #28]
 8002242:	402b      	ands	r3, r5
 8002244:	1b5b      	subs	r3, r3, r5
 8002246:	4259      	negs	r1, r3
 8002248:	414b      	adcs	r3, r1
 800224a:	42bb      	cmp	r3, r7
 800224c:	d001      	beq.n	8002252 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 800224e:	2000      	movs	r0, #0
 8002250:	e025      	b.n	800229e <UART_WaitOnFlagUntilTimeout+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8002252:	9b08      	ldr	r3, [sp, #32]
 8002254:	3301      	adds	r3, #1
 8002256:	d0f3      	beq.n	8002240 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002258:	f7ff f8fe 	bl	8001458 <HAL_GetTick>
 800225c:	9b00      	ldr	r3, [sp, #0]
 800225e:	1ac0      	subs	r0, r0, r3
 8002260:	9b08      	ldr	r3, [sp, #32]
 8002262:	4298      	cmp	r0, r3
 8002264:	d82c      	bhi.n	80022c0 <UART_WaitOnFlagUntilTimeout+0x8c>
 8002266:	2b00      	cmp	r3, #0
 8002268:	d02a      	beq.n	80022c0 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800226a:	6823      	ldr	r3, [r4, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	0752      	lsls	r2, r2, #29
 8002270:	d5e5      	bpl.n	800223e <UART_WaitOnFlagUntilTimeout+0xa>
 8002272:	002a      	movs	r2, r5
 8002274:	2140      	movs	r1, #64	@ 0x40
 8002276:	3a40      	subs	r2, #64	@ 0x40
 8002278:	438a      	bics	r2, r1
 800227a:	d0e0      	beq.n	800223e <UART_WaitOnFlagUntilTimeout+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800227c:	69da      	ldr	r2, [r3, #28]
 800227e:	2608      	movs	r6, #8
 8002280:	0011      	movs	r1, r2
 8002282:	4031      	ands	r1, r6
 8002284:	9101      	str	r1, [sp, #4]
 8002286:	4232      	tst	r2, r6
 8002288:	d00a      	beq.n	80022a0 <UART_WaitOnFlagUntilTimeout+0x6c>
          UART_EndRxTransfer(huart);
 800228a:	0020      	movs	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800228c:	621e      	str	r6, [r3, #32]
          UART_EndRxTransfer(huart);
 800228e:	f7ff fea3 	bl	8001fd8 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002292:	19a3      	adds	r3, r4, r6
 8002294:	67de      	str	r6, [r3, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 8002296:	2300      	movs	r3, #0
          return HAL_ERROR;
 8002298:	2001      	movs	r0, #1
          __HAL_UNLOCK(huart);
 800229a:	3478      	adds	r4, #120	@ 0x78
 800229c:	7023      	strb	r3, [r4, #0]
}
 800229e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80022a0:	2280      	movs	r2, #128	@ 0x80
 80022a2:	69d9      	ldr	r1, [r3, #28]
 80022a4:	0112      	lsls	r2, r2, #4
 80022a6:	4211      	tst	r1, r2
 80022a8:	d0c9      	beq.n	800223e <UART_WaitOnFlagUntilTimeout+0xa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80022aa:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 80022ac:	0020      	movs	r0, r4
 80022ae:	f7ff fe93 	bl	8001fd8 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80022b2:	0023      	movs	r3, r4
 80022b4:	2220      	movs	r2, #32
 80022b6:	3308      	adds	r3, #8
 80022b8:	67da      	str	r2, [r3, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 80022ba:	9b01      	ldr	r3, [sp, #4]
 80022bc:	3478      	adds	r4, #120	@ 0x78
 80022be:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 80022c0:	2003      	movs	r0, #3
 80022c2:	e7ec      	b.n	800229e <UART_WaitOnFlagUntilTimeout+0x6a>

080022c4 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022c4:	0003      	movs	r3, r0
{
 80022c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022c8:	2500      	movs	r5, #0
{
 80022ca:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022cc:	3308      	adds	r3, #8
 80022ce:	67dd      	str	r5, [r3, #124]	@ 0x7c
  tickstart = HAL_GetTick();
 80022d0:	f7ff f8c2 	bl	8001458 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80022d4:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80022d6:	0006      	movs	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	071b      	lsls	r3, r3, #28
 80022dc:	d51d      	bpl.n	800231a <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80022de:	2180      	movs	r1, #128	@ 0x80
 80022e0:	4b26      	ldr	r3, [pc, #152]	@ (800237c <UART_CheckIdleState+0xb8>)
 80022e2:	002a      	movs	r2, r5
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	0389      	lsls	r1, r1, #14
 80022e8:	0003      	movs	r3, r0
 80022ea:	0020      	movs	r0, r4
 80022ec:	f7ff ffa2 	bl	8002234 <UART_WaitOnFlagUntilTimeout>
 80022f0:	42a8      	cmp	r0, r5
 80022f2:	d012      	beq.n	800231a <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022f4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022f8:	2301      	movs	r3, #1
 80022fa:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80022fe:	2080      	movs	r0, #128	@ 0x80
 8002300:	6822      	ldr	r2, [r4, #0]
 8002302:	6813      	ldr	r3, [r2, #0]
 8002304:	4383      	bics	r3, r0
 8002306:	6013      	str	r3, [r2, #0]
 8002308:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 800230c:	2320      	movs	r3, #32
 800230e:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8002310:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8002312:	2300      	movs	r3, #0
 8002314:	3478      	adds	r4, #120	@ 0x78
 8002316:	7023      	strb	r3, [r4, #0]
}
 8002318:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800231a:	0025      	movs	r5, r4
 800231c:	cd08      	ldmia	r5!, {r3}
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	075b      	lsls	r3, r3, #29
 8002322:	d523      	bpl.n	800236c <UART_CheckIdleState+0xa8>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002324:	2180      	movs	r1, #128	@ 0x80
 8002326:	4b15      	ldr	r3, [pc, #84]	@ (800237c <UART_CheckIdleState+0xb8>)
 8002328:	2200      	movs	r2, #0
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	0020      	movs	r0, r4
 800232e:	0033      	movs	r3, r6
 8002330:	03c9      	lsls	r1, r1, #15
 8002332:	f7ff ff7f 	bl	8002234 <UART_WaitOnFlagUntilTimeout>
 8002336:	2800      	cmp	r0, #0
 8002338:	d018      	beq.n	800236c <UART_CheckIdleState+0xa8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800233a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800233e:	2201      	movs	r2, #1
 8002340:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002344:	6821      	ldr	r1, [r4, #0]
 8002346:	4e0e      	ldr	r6, [pc, #56]	@ (8002380 <UART_CheckIdleState+0xbc>)
 8002348:	680b      	ldr	r3, [r1, #0]
 800234a:	4033      	ands	r3, r6
 800234c:	600b      	str	r3, [r1, #0]
 800234e:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002352:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002356:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800235a:	6821      	ldr	r1, [r4, #0]
 800235c:	688b      	ldr	r3, [r1, #8]
 800235e:	4393      	bics	r3, r2
 8002360:	608b      	str	r3, [r1, #8]
 8002362:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8002366:	2320      	movs	r3, #32
 8002368:	67eb      	str	r3, [r5, #124]	@ 0x7c
      return HAL_TIMEOUT;
 800236a:	e7d1      	b.n	8002310 <UART_CheckIdleState+0x4c>
  huart->gState = HAL_UART_STATE_READY;
 800236c:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800236e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002370:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002372:	67eb      	str	r3, [r5, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002374:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002376:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 8002378:	e7cb      	b.n	8002312 <UART_CheckIdleState+0x4e>
 800237a:	46c0      	nop			@ (mov r8, r8)
 800237c:	01ffffff 	.word	0x01ffffff
 8002380:	fffffedf 	.word	0xfffffedf

08002384 <HAL_UART_Init>:
{
 8002384:	b510      	push	{r4, lr}
 8002386:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002388:	d101      	bne.n	800238e <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800238a:	2001      	movs	r0, #1
}
 800238c:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800238e:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8002390:	2b00      	cmp	r3, #0
 8002392:	d104      	bne.n	800239e <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8002394:	0002      	movs	r2, r0
 8002396:	3278      	adds	r2, #120	@ 0x78
 8002398:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800239a:	f7fe f8b5 	bl	8000508 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800239e:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 80023a0:	2101      	movs	r1, #1
 80023a2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80023a4:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 80023a6:	6813      	ldr	r3, [r2, #0]
 80023a8:	438b      	bics	r3, r1
 80023aa:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023ac:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d002      	beq.n	80023b8 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 80023b2:	0020      	movs	r0, r4
 80023b4:	f7ff fed6 	bl	8002164 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023b8:	0020      	movs	r0, r4
 80023ba:	f7ff fe3b 	bl	8002034 <UART_SetConfig>
 80023be:	2801      	cmp	r0, #1
 80023c0:	d0e3      	beq.n	800238a <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023c2:	6823      	ldr	r3, [r4, #0]
 80023c4:	4907      	ldr	r1, [pc, #28]	@ (80023e4 <HAL_UART_Init+0x60>)
 80023c6:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80023c8:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023ca:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023cc:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	438a      	bics	r2, r1
 80023d4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80023d6:	2201      	movs	r2, #1
 80023d8:	6819      	ldr	r1, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80023de:	f7ff ff71 	bl	80022c4 <UART_CheckIdleState>
 80023e2:	e7d3      	b.n	800238c <HAL_UART_Init+0x8>
 80023e4:	ffffb7ff 	.word	0xffffb7ff

080023e8 <malloc>:
 80023e8:	b510      	push	{r4, lr}
 80023ea:	4b03      	ldr	r3, [pc, #12]	@ (80023f8 <malloc+0x10>)
 80023ec:	0001      	movs	r1, r0
 80023ee:	6818      	ldr	r0, [r3, #0]
 80023f0:	f000 f826 	bl	8002440 <_malloc_r>
 80023f4:	bd10      	pop	{r4, pc}
 80023f6:	46c0      	nop			@ (mov r8, r8)
 80023f8:	20000038 	.word	0x20000038

080023fc <sbrk_aligned>:
 80023fc:	b570      	push	{r4, r5, r6, lr}
 80023fe:	4e0f      	ldr	r6, [pc, #60]	@ (800243c <sbrk_aligned+0x40>)
 8002400:	000d      	movs	r5, r1
 8002402:	6831      	ldr	r1, [r6, #0]
 8002404:	0004      	movs	r4, r0
 8002406:	2900      	cmp	r1, #0
 8002408:	d102      	bne.n	8002410 <sbrk_aligned+0x14>
 800240a:	f000 fb0b 	bl	8002a24 <_sbrk_r>
 800240e:	6030      	str	r0, [r6, #0]
 8002410:	0029      	movs	r1, r5
 8002412:	0020      	movs	r0, r4
 8002414:	f000 fb06 	bl	8002a24 <_sbrk_r>
 8002418:	1c43      	adds	r3, r0, #1
 800241a:	d103      	bne.n	8002424 <sbrk_aligned+0x28>
 800241c:	2501      	movs	r5, #1
 800241e:	426d      	negs	r5, r5
 8002420:	0028      	movs	r0, r5
 8002422:	bd70      	pop	{r4, r5, r6, pc}
 8002424:	2303      	movs	r3, #3
 8002426:	1cc5      	adds	r5, r0, #3
 8002428:	439d      	bics	r5, r3
 800242a:	42a8      	cmp	r0, r5
 800242c:	d0f8      	beq.n	8002420 <sbrk_aligned+0x24>
 800242e:	1a29      	subs	r1, r5, r0
 8002430:	0020      	movs	r0, r4
 8002432:	f000 faf7 	bl	8002a24 <_sbrk_r>
 8002436:	3001      	adds	r0, #1
 8002438:	d1f2      	bne.n	8002420 <sbrk_aligned+0x24>
 800243a:	e7ef      	b.n	800241c <sbrk_aligned+0x20>
 800243c:	20000200 	.word	0x20000200

08002440 <_malloc_r>:
 8002440:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002442:	2203      	movs	r2, #3
 8002444:	1ccb      	adds	r3, r1, #3
 8002446:	4393      	bics	r3, r2
 8002448:	3308      	adds	r3, #8
 800244a:	0005      	movs	r5, r0
 800244c:	001f      	movs	r7, r3
 800244e:	2b0c      	cmp	r3, #12
 8002450:	d234      	bcs.n	80024bc <_malloc_r+0x7c>
 8002452:	270c      	movs	r7, #12
 8002454:	42b9      	cmp	r1, r7
 8002456:	d833      	bhi.n	80024c0 <_malloc_r+0x80>
 8002458:	0028      	movs	r0, r5
 800245a:	f000 f871 	bl	8002540 <__malloc_lock>
 800245e:	4e37      	ldr	r6, [pc, #220]	@ (800253c <_malloc_r+0xfc>)
 8002460:	6833      	ldr	r3, [r6, #0]
 8002462:	001c      	movs	r4, r3
 8002464:	2c00      	cmp	r4, #0
 8002466:	d12f      	bne.n	80024c8 <_malloc_r+0x88>
 8002468:	0039      	movs	r1, r7
 800246a:	0028      	movs	r0, r5
 800246c:	f7ff ffc6 	bl	80023fc <sbrk_aligned>
 8002470:	0004      	movs	r4, r0
 8002472:	1c43      	adds	r3, r0, #1
 8002474:	d15f      	bne.n	8002536 <_malloc_r+0xf6>
 8002476:	6834      	ldr	r4, [r6, #0]
 8002478:	9400      	str	r4, [sp, #0]
 800247a:	9b00      	ldr	r3, [sp, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d14a      	bne.n	8002516 <_malloc_r+0xd6>
 8002480:	2c00      	cmp	r4, #0
 8002482:	d052      	beq.n	800252a <_malloc_r+0xea>
 8002484:	6823      	ldr	r3, [r4, #0]
 8002486:	0028      	movs	r0, r5
 8002488:	18e3      	adds	r3, r4, r3
 800248a:	9900      	ldr	r1, [sp, #0]
 800248c:	9301      	str	r3, [sp, #4]
 800248e:	f000 fac9 	bl	8002a24 <_sbrk_r>
 8002492:	9b01      	ldr	r3, [sp, #4]
 8002494:	4283      	cmp	r3, r0
 8002496:	d148      	bne.n	800252a <_malloc_r+0xea>
 8002498:	6823      	ldr	r3, [r4, #0]
 800249a:	0028      	movs	r0, r5
 800249c:	1aff      	subs	r7, r7, r3
 800249e:	0039      	movs	r1, r7
 80024a0:	f7ff ffac 	bl	80023fc <sbrk_aligned>
 80024a4:	3001      	adds	r0, #1
 80024a6:	d040      	beq.n	800252a <_malloc_r+0xea>
 80024a8:	6823      	ldr	r3, [r4, #0]
 80024aa:	19db      	adds	r3, r3, r7
 80024ac:	6023      	str	r3, [r4, #0]
 80024ae:	6833      	ldr	r3, [r6, #0]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	2a00      	cmp	r2, #0
 80024b4:	d133      	bne.n	800251e <_malloc_r+0xde>
 80024b6:	9b00      	ldr	r3, [sp, #0]
 80024b8:	6033      	str	r3, [r6, #0]
 80024ba:	e019      	b.n	80024f0 <_malloc_r+0xb0>
 80024bc:	2b00      	cmp	r3, #0
 80024be:	dac9      	bge.n	8002454 <_malloc_r+0x14>
 80024c0:	230c      	movs	r3, #12
 80024c2:	602b      	str	r3, [r5, #0]
 80024c4:	2000      	movs	r0, #0
 80024c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80024c8:	6821      	ldr	r1, [r4, #0]
 80024ca:	1bc9      	subs	r1, r1, r7
 80024cc:	d420      	bmi.n	8002510 <_malloc_r+0xd0>
 80024ce:	290b      	cmp	r1, #11
 80024d0:	d90a      	bls.n	80024e8 <_malloc_r+0xa8>
 80024d2:	19e2      	adds	r2, r4, r7
 80024d4:	6027      	str	r7, [r4, #0]
 80024d6:	42a3      	cmp	r3, r4
 80024d8:	d104      	bne.n	80024e4 <_malloc_r+0xa4>
 80024da:	6032      	str	r2, [r6, #0]
 80024dc:	6863      	ldr	r3, [r4, #4]
 80024de:	6011      	str	r1, [r2, #0]
 80024e0:	6053      	str	r3, [r2, #4]
 80024e2:	e005      	b.n	80024f0 <_malloc_r+0xb0>
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	e7f9      	b.n	80024dc <_malloc_r+0x9c>
 80024e8:	6862      	ldr	r2, [r4, #4]
 80024ea:	42a3      	cmp	r3, r4
 80024ec:	d10e      	bne.n	800250c <_malloc_r+0xcc>
 80024ee:	6032      	str	r2, [r6, #0]
 80024f0:	0028      	movs	r0, r5
 80024f2:	f000 f82d 	bl	8002550 <__malloc_unlock>
 80024f6:	0020      	movs	r0, r4
 80024f8:	2207      	movs	r2, #7
 80024fa:	300b      	adds	r0, #11
 80024fc:	1d23      	adds	r3, r4, #4
 80024fe:	4390      	bics	r0, r2
 8002500:	1ac2      	subs	r2, r0, r3
 8002502:	4298      	cmp	r0, r3
 8002504:	d0df      	beq.n	80024c6 <_malloc_r+0x86>
 8002506:	1a1b      	subs	r3, r3, r0
 8002508:	50a3      	str	r3, [r4, r2]
 800250a:	e7dc      	b.n	80024c6 <_malloc_r+0x86>
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	e7ef      	b.n	80024f0 <_malloc_r+0xb0>
 8002510:	0023      	movs	r3, r4
 8002512:	6864      	ldr	r4, [r4, #4]
 8002514:	e7a6      	b.n	8002464 <_malloc_r+0x24>
 8002516:	9c00      	ldr	r4, [sp, #0]
 8002518:	6863      	ldr	r3, [r4, #4]
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	e7ad      	b.n	800247a <_malloc_r+0x3a>
 800251e:	001a      	movs	r2, r3
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	42a3      	cmp	r3, r4
 8002524:	d1fb      	bne.n	800251e <_malloc_r+0xde>
 8002526:	2300      	movs	r3, #0
 8002528:	e7da      	b.n	80024e0 <_malloc_r+0xa0>
 800252a:	230c      	movs	r3, #12
 800252c:	0028      	movs	r0, r5
 800252e:	602b      	str	r3, [r5, #0]
 8002530:	f000 f80e 	bl	8002550 <__malloc_unlock>
 8002534:	e7c6      	b.n	80024c4 <_malloc_r+0x84>
 8002536:	6007      	str	r7, [r0, #0]
 8002538:	e7da      	b.n	80024f0 <_malloc_r+0xb0>
 800253a:	46c0      	nop			@ (mov r8, r8)
 800253c:	20000204 	.word	0x20000204

08002540 <__malloc_lock>:
 8002540:	b510      	push	{r4, lr}
 8002542:	4802      	ldr	r0, [pc, #8]	@ (800254c <__malloc_lock+0xc>)
 8002544:	f000 fabf 	bl	8002ac6 <__retarget_lock_acquire_recursive>
 8002548:	bd10      	pop	{r4, pc}
 800254a:	46c0      	nop			@ (mov r8, r8)
 800254c:	20000348 	.word	0x20000348

08002550 <__malloc_unlock>:
 8002550:	b510      	push	{r4, lr}
 8002552:	4802      	ldr	r0, [pc, #8]	@ (800255c <__malloc_unlock+0xc>)
 8002554:	f000 fab8 	bl	8002ac8 <__retarget_lock_release_recursive>
 8002558:	bd10      	pop	{r4, pc}
 800255a:	46c0      	nop			@ (mov r8, r8)
 800255c:	20000348 	.word	0x20000348

08002560 <std>:
 8002560:	2300      	movs	r3, #0
 8002562:	b510      	push	{r4, lr}
 8002564:	0004      	movs	r4, r0
 8002566:	6003      	str	r3, [r0, #0]
 8002568:	6043      	str	r3, [r0, #4]
 800256a:	6083      	str	r3, [r0, #8]
 800256c:	8181      	strh	r1, [r0, #12]
 800256e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002570:	81c2      	strh	r2, [r0, #14]
 8002572:	6103      	str	r3, [r0, #16]
 8002574:	6143      	str	r3, [r0, #20]
 8002576:	6183      	str	r3, [r0, #24]
 8002578:	0019      	movs	r1, r3
 800257a:	2208      	movs	r2, #8
 800257c:	305c      	adds	r0, #92	@ 0x5c
 800257e:	f000 fa0f 	bl	80029a0 <memset>
 8002582:	4b0b      	ldr	r3, [pc, #44]	@ (80025b0 <std+0x50>)
 8002584:	6224      	str	r4, [r4, #32]
 8002586:	6263      	str	r3, [r4, #36]	@ 0x24
 8002588:	4b0a      	ldr	r3, [pc, #40]	@ (80025b4 <std+0x54>)
 800258a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800258c:	4b0a      	ldr	r3, [pc, #40]	@ (80025b8 <std+0x58>)
 800258e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002590:	4b0a      	ldr	r3, [pc, #40]	@ (80025bc <std+0x5c>)
 8002592:	6323      	str	r3, [r4, #48]	@ 0x30
 8002594:	4b0a      	ldr	r3, [pc, #40]	@ (80025c0 <std+0x60>)
 8002596:	429c      	cmp	r4, r3
 8002598:	d005      	beq.n	80025a6 <std+0x46>
 800259a:	4b0a      	ldr	r3, [pc, #40]	@ (80025c4 <std+0x64>)
 800259c:	429c      	cmp	r4, r3
 800259e:	d002      	beq.n	80025a6 <std+0x46>
 80025a0:	4b09      	ldr	r3, [pc, #36]	@ (80025c8 <std+0x68>)
 80025a2:	429c      	cmp	r4, r3
 80025a4:	d103      	bne.n	80025ae <std+0x4e>
 80025a6:	0020      	movs	r0, r4
 80025a8:	3058      	adds	r0, #88	@ 0x58
 80025aa:	f000 fa8b 	bl	8002ac4 <__retarget_lock_init_recursive>
 80025ae:	bd10      	pop	{r4, pc}
 80025b0:	080027c9 	.word	0x080027c9
 80025b4:	080027f1 	.word	0x080027f1
 80025b8:	08002829 	.word	0x08002829
 80025bc:	08002855 	.word	0x08002855
 80025c0:	20000208 	.word	0x20000208
 80025c4:	20000270 	.word	0x20000270
 80025c8:	200002d8 	.word	0x200002d8

080025cc <stdio_exit_handler>:
 80025cc:	b510      	push	{r4, lr}
 80025ce:	4a03      	ldr	r2, [pc, #12]	@ (80025dc <stdio_exit_handler+0x10>)
 80025d0:	4903      	ldr	r1, [pc, #12]	@ (80025e0 <stdio_exit_handler+0x14>)
 80025d2:	4804      	ldr	r0, [pc, #16]	@ (80025e4 <stdio_exit_handler+0x18>)
 80025d4:	f000 f86c 	bl	80026b0 <_fwalk_sglue>
 80025d8:	bd10      	pop	{r4, pc}
 80025da:	46c0      	nop			@ (mov r8, r8)
 80025dc:	2000002c 	.word	0x2000002c
 80025e0:	080031f1 	.word	0x080031f1
 80025e4:	2000003c 	.word	0x2000003c

080025e8 <cleanup_stdio>:
 80025e8:	6841      	ldr	r1, [r0, #4]
 80025ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002618 <cleanup_stdio+0x30>)
 80025ec:	b510      	push	{r4, lr}
 80025ee:	0004      	movs	r4, r0
 80025f0:	4299      	cmp	r1, r3
 80025f2:	d001      	beq.n	80025f8 <cleanup_stdio+0x10>
 80025f4:	f000 fdfc 	bl	80031f0 <_fflush_r>
 80025f8:	68a1      	ldr	r1, [r4, #8]
 80025fa:	4b08      	ldr	r3, [pc, #32]	@ (800261c <cleanup_stdio+0x34>)
 80025fc:	4299      	cmp	r1, r3
 80025fe:	d002      	beq.n	8002606 <cleanup_stdio+0x1e>
 8002600:	0020      	movs	r0, r4
 8002602:	f000 fdf5 	bl	80031f0 <_fflush_r>
 8002606:	68e1      	ldr	r1, [r4, #12]
 8002608:	4b05      	ldr	r3, [pc, #20]	@ (8002620 <cleanup_stdio+0x38>)
 800260a:	4299      	cmp	r1, r3
 800260c:	d002      	beq.n	8002614 <cleanup_stdio+0x2c>
 800260e:	0020      	movs	r0, r4
 8002610:	f000 fdee 	bl	80031f0 <_fflush_r>
 8002614:	bd10      	pop	{r4, pc}
 8002616:	46c0      	nop			@ (mov r8, r8)
 8002618:	20000208 	.word	0x20000208
 800261c:	20000270 	.word	0x20000270
 8002620:	200002d8 	.word	0x200002d8

08002624 <global_stdio_init.part.0>:
 8002624:	b510      	push	{r4, lr}
 8002626:	4b09      	ldr	r3, [pc, #36]	@ (800264c <global_stdio_init.part.0+0x28>)
 8002628:	4a09      	ldr	r2, [pc, #36]	@ (8002650 <global_stdio_init.part.0+0x2c>)
 800262a:	2104      	movs	r1, #4
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	4809      	ldr	r0, [pc, #36]	@ (8002654 <global_stdio_init.part.0+0x30>)
 8002630:	2200      	movs	r2, #0
 8002632:	f7ff ff95 	bl	8002560 <std>
 8002636:	2201      	movs	r2, #1
 8002638:	2109      	movs	r1, #9
 800263a:	4807      	ldr	r0, [pc, #28]	@ (8002658 <global_stdio_init.part.0+0x34>)
 800263c:	f7ff ff90 	bl	8002560 <std>
 8002640:	2202      	movs	r2, #2
 8002642:	2112      	movs	r1, #18
 8002644:	4805      	ldr	r0, [pc, #20]	@ (800265c <global_stdio_init.part.0+0x38>)
 8002646:	f7ff ff8b 	bl	8002560 <std>
 800264a:	bd10      	pop	{r4, pc}
 800264c:	20000340 	.word	0x20000340
 8002650:	080025cd 	.word	0x080025cd
 8002654:	20000208 	.word	0x20000208
 8002658:	20000270 	.word	0x20000270
 800265c:	200002d8 	.word	0x200002d8

08002660 <__sfp_lock_acquire>:
 8002660:	b510      	push	{r4, lr}
 8002662:	4802      	ldr	r0, [pc, #8]	@ (800266c <__sfp_lock_acquire+0xc>)
 8002664:	f000 fa2f 	bl	8002ac6 <__retarget_lock_acquire_recursive>
 8002668:	bd10      	pop	{r4, pc}
 800266a:	46c0      	nop			@ (mov r8, r8)
 800266c:	20000349 	.word	0x20000349

08002670 <__sfp_lock_release>:
 8002670:	b510      	push	{r4, lr}
 8002672:	4802      	ldr	r0, [pc, #8]	@ (800267c <__sfp_lock_release+0xc>)
 8002674:	f000 fa28 	bl	8002ac8 <__retarget_lock_release_recursive>
 8002678:	bd10      	pop	{r4, pc}
 800267a:	46c0      	nop			@ (mov r8, r8)
 800267c:	20000349 	.word	0x20000349

08002680 <__sinit>:
 8002680:	b510      	push	{r4, lr}
 8002682:	0004      	movs	r4, r0
 8002684:	f7ff ffec 	bl	8002660 <__sfp_lock_acquire>
 8002688:	6a23      	ldr	r3, [r4, #32]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d002      	beq.n	8002694 <__sinit+0x14>
 800268e:	f7ff ffef 	bl	8002670 <__sfp_lock_release>
 8002692:	bd10      	pop	{r4, pc}
 8002694:	4b04      	ldr	r3, [pc, #16]	@ (80026a8 <__sinit+0x28>)
 8002696:	6223      	str	r3, [r4, #32]
 8002698:	4b04      	ldr	r3, [pc, #16]	@ (80026ac <__sinit+0x2c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1f6      	bne.n	800268e <__sinit+0xe>
 80026a0:	f7ff ffc0 	bl	8002624 <global_stdio_init.part.0>
 80026a4:	e7f3      	b.n	800268e <__sinit+0xe>
 80026a6:	46c0      	nop			@ (mov r8, r8)
 80026a8:	080025e9 	.word	0x080025e9
 80026ac:	20000340 	.word	0x20000340

080026b0 <_fwalk_sglue>:
 80026b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80026b2:	0014      	movs	r4, r2
 80026b4:	2600      	movs	r6, #0
 80026b6:	9000      	str	r0, [sp, #0]
 80026b8:	9101      	str	r1, [sp, #4]
 80026ba:	68a5      	ldr	r5, [r4, #8]
 80026bc:	6867      	ldr	r7, [r4, #4]
 80026be:	3f01      	subs	r7, #1
 80026c0:	d504      	bpl.n	80026cc <_fwalk_sglue+0x1c>
 80026c2:	6824      	ldr	r4, [r4, #0]
 80026c4:	2c00      	cmp	r4, #0
 80026c6:	d1f8      	bne.n	80026ba <_fwalk_sglue+0xa>
 80026c8:	0030      	movs	r0, r6
 80026ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80026cc:	89ab      	ldrh	r3, [r5, #12]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d908      	bls.n	80026e4 <_fwalk_sglue+0x34>
 80026d2:	220e      	movs	r2, #14
 80026d4:	5eab      	ldrsh	r3, [r5, r2]
 80026d6:	3301      	adds	r3, #1
 80026d8:	d004      	beq.n	80026e4 <_fwalk_sglue+0x34>
 80026da:	0029      	movs	r1, r5
 80026dc:	9800      	ldr	r0, [sp, #0]
 80026de:	9b01      	ldr	r3, [sp, #4]
 80026e0:	4798      	blx	r3
 80026e2:	4306      	orrs	r6, r0
 80026e4:	3568      	adds	r5, #104	@ 0x68
 80026e6:	e7ea      	b.n	80026be <_fwalk_sglue+0xe>

080026e8 <iprintf>:
 80026e8:	b40f      	push	{r0, r1, r2, r3}
 80026ea:	b507      	push	{r0, r1, r2, lr}
 80026ec:	4905      	ldr	r1, [pc, #20]	@ (8002704 <iprintf+0x1c>)
 80026ee:	ab04      	add	r3, sp, #16
 80026f0:	6808      	ldr	r0, [r1, #0]
 80026f2:	cb04      	ldmia	r3!, {r2}
 80026f4:	6881      	ldr	r1, [r0, #8]
 80026f6:	9301      	str	r3, [sp, #4]
 80026f8:	f000 fa5a 	bl	8002bb0 <_vfiprintf_r>
 80026fc:	b003      	add	sp, #12
 80026fe:	bc08      	pop	{r3}
 8002700:	b004      	add	sp, #16
 8002702:	4718      	bx	r3
 8002704:	20000038 	.word	0x20000038

08002708 <_puts_r>:
 8002708:	6a03      	ldr	r3, [r0, #32]
 800270a:	b570      	push	{r4, r5, r6, lr}
 800270c:	0005      	movs	r5, r0
 800270e:	000e      	movs	r6, r1
 8002710:	6884      	ldr	r4, [r0, #8]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <_puts_r+0x12>
 8002716:	f7ff ffb3 	bl	8002680 <__sinit>
 800271a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800271c:	07db      	lsls	r3, r3, #31
 800271e:	d405      	bmi.n	800272c <_puts_r+0x24>
 8002720:	89a3      	ldrh	r3, [r4, #12]
 8002722:	059b      	lsls	r3, r3, #22
 8002724:	d402      	bmi.n	800272c <_puts_r+0x24>
 8002726:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002728:	f000 f9cd 	bl	8002ac6 <__retarget_lock_acquire_recursive>
 800272c:	89a3      	ldrh	r3, [r4, #12]
 800272e:	071b      	lsls	r3, r3, #28
 8002730:	d502      	bpl.n	8002738 <_puts_r+0x30>
 8002732:	6923      	ldr	r3, [r4, #16]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d11f      	bne.n	8002778 <_puts_r+0x70>
 8002738:	0021      	movs	r1, r4
 800273a:	0028      	movs	r0, r5
 800273c:	f000 f8d2 	bl	80028e4 <__swsetup_r>
 8002740:	2800      	cmp	r0, #0
 8002742:	d019      	beq.n	8002778 <_puts_r+0x70>
 8002744:	2501      	movs	r5, #1
 8002746:	426d      	negs	r5, r5
 8002748:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800274a:	07db      	lsls	r3, r3, #31
 800274c:	d405      	bmi.n	800275a <_puts_r+0x52>
 800274e:	89a3      	ldrh	r3, [r4, #12]
 8002750:	059b      	lsls	r3, r3, #22
 8002752:	d402      	bmi.n	800275a <_puts_r+0x52>
 8002754:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002756:	f000 f9b7 	bl	8002ac8 <__retarget_lock_release_recursive>
 800275a:	0028      	movs	r0, r5
 800275c:	bd70      	pop	{r4, r5, r6, pc}
 800275e:	3601      	adds	r6, #1
 8002760:	60a3      	str	r3, [r4, #8]
 8002762:	2b00      	cmp	r3, #0
 8002764:	da04      	bge.n	8002770 <_puts_r+0x68>
 8002766:	69a2      	ldr	r2, [r4, #24]
 8002768:	429a      	cmp	r2, r3
 800276a:	dc16      	bgt.n	800279a <_puts_r+0x92>
 800276c:	290a      	cmp	r1, #10
 800276e:	d014      	beq.n	800279a <_puts_r+0x92>
 8002770:	6823      	ldr	r3, [r4, #0]
 8002772:	1c5a      	adds	r2, r3, #1
 8002774:	6022      	str	r2, [r4, #0]
 8002776:	7019      	strb	r1, [r3, #0]
 8002778:	68a3      	ldr	r3, [r4, #8]
 800277a:	7831      	ldrb	r1, [r6, #0]
 800277c:	3b01      	subs	r3, #1
 800277e:	2900      	cmp	r1, #0
 8002780:	d1ed      	bne.n	800275e <_puts_r+0x56>
 8002782:	60a3      	str	r3, [r4, #8]
 8002784:	2b00      	cmp	r3, #0
 8002786:	da0f      	bge.n	80027a8 <_puts_r+0xa0>
 8002788:	0022      	movs	r2, r4
 800278a:	0028      	movs	r0, r5
 800278c:	310a      	adds	r1, #10
 800278e:	f000 f867 	bl	8002860 <__swbuf_r>
 8002792:	3001      	adds	r0, #1
 8002794:	d0d6      	beq.n	8002744 <_puts_r+0x3c>
 8002796:	250a      	movs	r5, #10
 8002798:	e7d6      	b.n	8002748 <_puts_r+0x40>
 800279a:	0022      	movs	r2, r4
 800279c:	0028      	movs	r0, r5
 800279e:	f000 f85f 	bl	8002860 <__swbuf_r>
 80027a2:	3001      	adds	r0, #1
 80027a4:	d1e8      	bne.n	8002778 <_puts_r+0x70>
 80027a6:	e7cd      	b.n	8002744 <_puts_r+0x3c>
 80027a8:	6823      	ldr	r3, [r4, #0]
 80027aa:	1c5a      	adds	r2, r3, #1
 80027ac:	6022      	str	r2, [r4, #0]
 80027ae:	220a      	movs	r2, #10
 80027b0:	701a      	strb	r2, [r3, #0]
 80027b2:	e7f0      	b.n	8002796 <_puts_r+0x8e>

080027b4 <puts>:
 80027b4:	b510      	push	{r4, lr}
 80027b6:	4b03      	ldr	r3, [pc, #12]	@ (80027c4 <puts+0x10>)
 80027b8:	0001      	movs	r1, r0
 80027ba:	6818      	ldr	r0, [r3, #0]
 80027bc:	f7ff ffa4 	bl	8002708 <_puts_r>
 80027c0:	bd10      	pop	{r4, pc}
 80027c2:	46c0      	nop			@ (mov r8, r8)
 80027c4:	20000038 	.word	0x20000038

080027c8 <__sread>:
 80027c8:	b570      	push	{r4, r5, r6, lr}
 80027ca:	000c      	movs	r4, r1
 80027cc:	250e      	movs	r5, #14
 80027ce:	5f49      	ldrsh	r1, [r1, r5]
 80027d0:	f000 f914 	bl	80029fc <_read_r>
 80027d4:	2800      	cmp	r0, #0
 80027d6:	db03      	blt.n	80027e0 <__sread+0x18>
 80027d8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80027da:	181b      	adds	r3, r3, r0
 80027dc:	6563      	str	r3, [r4, #84]	@ 0x54
 80027de:	bd70      	pop	{r4, r5, r6, pc}
 80027e0:	89a3      	ldrh	r3, [r4, #12]
 80027e2:	4a02      	ldr	r2, [pc, #8]	@ (80027ec <__sread+0x24>)
 80027e4:	4013      	ands	r3, r2
 80027e6:	81a3      	strh	r3, [r4, #12]
 80027e8:	e7f9      	b.n	80027de <__sread+0x16>
 80027ea:	46c0      	nop			@ (mov r8, r8)
 80027ec:	ffffefff 	.word	0xffffefff

080027f0 <__swrite>:
 80027f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027f2:	001f      	movs	r7, r3
 80027f4:	898b      	ldrh	r3, [r1, #12]
 80027f6:	0005      	movs	r5, r0
 80027f8:	000c      	movs	r4, r1
 80027fa:	0016      	movs	r6, r2
 80027fc:	05db      	lsls	r3, r3, #23
 80027fe:	d505      	bpl.n	800280c <__swrite+0x1c>
 8002800:	230e      	movs	r3, #14
 8002802:	5ec9      	ldrsh	r1, [r1, r3]
 8002804:	2200      	movs	r2, #0
 8002806:	2302      	movs	r3, #2
 8002808:	f000 f8e4 	bl	80029d4 <_lseek_r>
 800280c:	89a3      	ldrh	r3, [r4, #12]
 800280e:	4a05      	ldr	r2, [pc, #20]	@ (8002824 <__swrite+0x34>)
 8002810:	0028      	movs	r0, r5
 8002812:	4013      	ands	r3, r2
 8002814:	81a3      	strh	r3, [r4, #12]
 8002816:	0032      	movs	r2, r6
 8002818:	230e      	movs	r3, #14
 800281a:	5ee1      	ldrsh	r1, [r4, r3]
 800281c:	003b      	movs	r3, r7
 800281e:	f000 f913 	bl	8002a48 <_write_r>
 8002822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002824:	ffffefff 	.word	0xffffefff

08002828 <__sseek>:
 8002828:	b570      	push	{r4, r5, r6, lr}
 800282a:	000c      	movs	r4, r1
 800282c:	250e      	movs	r5, #14
 800282e:	5f49      	ldrsh	r1, [r1, r5]
 8002830:	f000 f8d0 	bl	80029d4 <_lseek_r>
 8002834:	89a3      	ldrh	r3, [r4, #12]
 8002836:	1c42      	adds	r2, r0, #1
 8002838:	d103      	bne.n	8002842 <__sseek+0x1a>
 800283a:	4a05      	ldr	r2, [pc, #20]	@ (8002850 <__sseek+0x28>)
 800283c:	4013      	ands	r3, r2
 800283e:	81a3      	strh	r3, [r4, #12]
 8002840:	bd70      	pop	{r4, r5, r6, pc}
 8002842:	2280      	movs	r2, #128	@ 0x80
 8002844:	0152      	lsls	r2, r2, #5
 8002846:	4313      	orrs	r3, r2
 8002848:	81a3      	strh	r3, [r4, #12]
 800284a:	6560      	str	r0, [r4, #84]	@ 0x54
 800284c:	e7f8      	b.n	8002840 <__sseek+0x18>
 800284e:	46c0      	nop			@ (mov r8, r8)
 8002850:	ffffefff 	.word	0xffffefff

08002854 <__sclose>:
 8002854:	b510      	push	{r4, lr}
 8002856:	230e      	movs	r3, #14
 8002858:	5ec9      	ldrsh	r1, [r1, r3]
 800285a:	f000 f8a9 	bl	80029b0 <_close_r>
 800285e:	bd10      	pop	{r4, pc}

08002860 <__swbuf_r>:
 8002860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002862:	0006      	movs	r6, r0
 8002864:	000d      	movs	r5, r1
 8002866:	0014      	movs	r4, r2
 8002868:	2800      	cmp	r0, #0
 800286a:	d004      	beq.n	8002876 <__swbuf_r+0x16>
 800286c:	6a03      	ldr	r3, [r0, #32]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <__swbuf_r+0x16>
 8002872:	f7ff ff05 	bl	8002680 <__sinit>
 8002876:	69a3      	ldr	r3, [r4, #24]
 8002878:	60a3      	str	r3, [r4, #8]
 800287a:	89a3      	ldrh	r3, [r4, #12]
 800287c:	071b      	lsls	r3, r3, #28
 800287e:	d502      	bpl.n	8002886 <__swbuf_r+0x26>
 8002880:	6923      	ldr	r3, [r4, #16]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d109      	bne.n	800289a <__swbuf_r+0x3a>
 8002886:	0021      	movs	r1, r4
 8002888:	0030      	movs	r0, r6
 800288a:	f000 f82b 	bl	80028e4 <__swsetup_r>
 800288e:	2800      	cmp	r0, #0
 8002890:	d003      	beq.n	800289a <__swbuf_r+0x3a>
 8002892:	2501      	movs	r5, #1
 8002894:	426d      	negs	r5, r5
 8002896:	0028      	movs	r0, r5
 8002898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800289a:	6923      	ldr	r3, [r4, #16]
 800289c:	6820      	ldr	r0, [r4, #0]
 800289e:	b2ef      	uxtb	r7, r5
 80028a0:	1ac0      	subs	r0, r0, r3
 80028a2:	6963      	ldr	r3, [r4, #20]
 80028a4:	b2ed      	uxtb	r5, r5
 80028a6:	4283      	cmp	r3, r0
 80028a8:	dc05      	bgt.n	80028b6 <__swbuf_r+0x56>
 80028aa:	0021      	movs	r1, r4
 80028ac:	0030      	movs	r0, r6
 80028ae:	f000 fc9f 	bl	80031f0 <_fflush_r>
 80028b2:	2800      	cmp	r0, #0
 80028b4:	d1ed      	bne.n	8002892 <__swbuf_r+0x32>
 80028b6:	68a3      	ldr	r3, [r4, #8]
 80028b8:	3001      	adds	r0, #1
 80028ba:	3b01      	subs	r3, #1
 80028bc:	60a3      	str	r3, [r4, #8]
 80028be:	6823      	ldr	r3, [r4, #0]
 80028c0:	1c5a      	adds	r2, r3, #1
 80028c2:	6022      	str	r2, [r4, #0]
 80028c4:	701f      	strb	r7, [r3, #0]
 80028c6:	6963      	ldr	r3, [r4, #20]
 80028c8:	4283      	cmp	r3, r0
 80028ca:	d004      	beq.n	80028d6 <__swbuf_r+0x76>
 80028cc:	89a3      	ldrh	r3, [r4, #12]
 80028ce:	07db      	lsls	r3, r3, #31
 80028d0:	d5e1      	bpl.n	8002896 <__swbuf_r+0x36>
 80028d2:	2d0a      	cmp	r5, #10
 80028d4:	d1df      	bne.n	8002896 <__swbuf_r+0x36>
 80028d6:	0021      	movs	r1, r4
 80028d8:	0030      	movs	r0, r6
 80028da:	f000 fc89 	bl	80031f0 <_fflush_r>
 80028de:	2800      	cmp	r0, #0
 80028e0:	d0d9      	beq.n	8002896 <__swbuf_r+0x36>
 80028e2:	e7d6      	b.n	8002892 <__swbuf_r+0x32>

080028e4 <__swsetup_r>:
 80028e4:	4b2d      	ldr	r3, [pc, #180]	@ (800299c <__swsetup_r+0xb8>)
 80028e6:	b570      	push	{r4, r5, r6, lr}
 80028e8:	0005      	movs	r5, r0
 80028ea:	6818      	ldr	r0, [r3, #0]
 80028ec:	000c      	movs	r4, r1
 80028ee:	2800      	cmp	r0, #0
 80028f0:	d004      	beq.n	80028fc <__swsetup_r+0x18>
 80028f2:	6a03      	ldr	r3, [r0, #32]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <__swsetup_r+0x18>
 80028f8:	f7ff fec2 	bl	8002680 <__sinit>
 80028fc:	230c      	movs	r3, #12
 80028fe:	5ee2      	ldrsh	r2, [r4, r3]
 8002900:	0713      	lsls	r3, r2, #28
 8002902:	d423      	bmi.n	800294c <__swsetup_r+0x68>
 8002904:	06d3      	lsls	r3, r2, #27
 8002906:	d407      	bmi.n	8002918 <__swsetup_r+0x34>
 8002908:	2309      	movs	r3, #9
 800290a:	602b      	str	r3, [r5, #0]
 800290c:	2340      	movs	r3, #64	@ 0x40
 800290e:	2001      	movs	r0, #1
 8002910:	4313      	orrs	r3, r2
 8002912:	81a3      	strh	r3, [r4, #12]
 8002914:	4240      	negs	r0, r0
 8002916:	e03a      	b.n	800298e <__swsetup_r+0xaa>
 8002918:	0752      	lsls	r2, r2, #29
 800291a:	d513      	bpl.n	8002944 <__swsetup_r+0x60>
 800291c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800291e:	2900      	cmp	r1, #0
 8002920:	d008      	beq.n	8002934 <__swsetup_r+0x50>
 8002922:	0023      	movs	r3, r4
 8002924:	3344      	adds	r3, #68	@ 0x44
 8002926:	4299      	cmp	r1, r3
 8002928:	d002      	beq.n	8002930 <__swsetup_r+0x4c>
 800292a:	0028      	movs	r0, r5
 800292c:	f000 f8ce 	bl	8002acc <_free_r>
 8002930:	2300      	movs	r3, #0
 8002932:	6363      	str	r3, [r4, #52]	@ 0x34
 8002934:	2224      	movs	r2, #36	@ 0x24
 8002936:	89a3      	ldrh	r3, [r4, #12]
 8002938:	4393      	bics	r3, r2
 800293a:	81a3      	strh	r3, [r4, #12]
 800293c:	2300      	movs	r3, #0
 800293e:	6063      	str	r3, [r4, #4]
 8002940:	6923      	ldr	r3, [r4, #16]
 8002942:	6023      	str	r3, [r4, #0]
 8002944:	2308      	movs	r3, #8
 8002946:	89a2      	ldrh	r2, [r4, #12]
 8002948:	4313      	orrs	r3, r2
 800294a:	81a3      	strh	r3, [r4, #12]
 800294c:	6923      	ldr	r3, [r4, #16]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10b      	bne.n	800296a <__swsetup_r+0x86>
 8002952:	21a0      	movs	r1, #160	@ 0xa0
 8002954:	2280      	movs	r2, #128	@ 0x80
 8002956:	89a3      	ldrh	r3, [r4, #12]
 8002958:	0089      	lsls	r1, r1, #2
 800295a:	0092      	lsls	r2, r2, #2
 800295c:	400b      	ands	r3, r1
 800295e:	4293      	cmp	r3, r2
 8002960:	d003      	beq.n	800296a <__swsetup_r+0x86>
 8002962:	0021      	movs	r1, r4
 8002964:	0028      	movs	r0, r5
 8002966:	f000 fc99 	bl	800329c <__smakebuf_r>
 800296a:	230c      	movs	r3, #12
 800296c:	5ee2      	ldrsh	r2, [r4, r3]
 800296e:	2101      	movs	r1, #1
 8002970:	0013      	movs	r3, r2
 8002972:	400b      	ands	r3, r1
 8002974:	420a      	tst	r2, r1
 8002976:	d00b      	beq.n	8002990 <__swsetup_r+0xac>
 8002978:	2300      	movs	r3, #0
 800297a:	60a3      	str	r3, [r4, #8]
 800297c:	6963      	ldr	r3, [r4, #20]
 800297e:	425b      	negs	r3, r3
 8002980:	61a3      	str	r3, [r4, #24]
 8002982:	2000      	movs	r0, #0
 8002984:	6923      	ldr	r3, [r4, #16]
 8002986:	4283      	cmp	r3, r0
 8002988:	d101      	bne.n	800298e <__swsetup_r+0xaa>
 800298a:	0613      	lsls	r3, r2, #24
 800298c:	d4be      	bmi.n	800290c <__swsetup_r+0x28>
 800298e:	bd70      	pop	{r4, r5, r6, pc}
 8002990:	0791      	lsls	r1, r2, #30
 8002992:	d400      	bmi.n	8002996 <__swsetup_r+0xb2>
 8002994:	6963      	ldr	r3, [r4, #20]
 8002996:	60a3      	str	r3, [r4, #8]
 8002998:	e7f3      	b.n	8002982 <__swsetup_r+0x9e>
 800299a:	46c0      	nop			@ (mov r8, r8)
 800299c:	20000038 	.word	0x20000038

080029a0 <memset>:
 80029a0:	0003      	movs	r3, r0
 80029a2:	1882      	adds	r2, r0, r2
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d100      	bne.n	80029aa <memset+0xa>
 80029a8:	4770      	bx	lr
 80029aa:	7019      	strb	r1, [r3, #0]
 80029ac:	3301      	adds	r3, #1
 80029ae:	e7f9      	b.n	80029a4 <memset+0x4>

080029b0 <_close_r>:
 80029b0:	2300      	movs	r3, #0
 80029b2:	b570      	push	{r4, r5, r6, lr}
 80029b4:	4d06      	ldr	r5, [pc, #24]	@ (80029d0 <_close_r+0x20>)
 80029b6:	0004      	movs	r4, r0
 80029b8:	0008      	movs	r0, r1
 80029ba:	602b      	str	r3, [r5, #0]
 80029bc:	f7fd fdf8 	bl	80005b0 <_close>
 80029c0:	1c43      	adds	r3, r0, #1
 80029c2:	d103      	bne.n	80029cc <_close_r+0x1c>
 80029c4:	682b      	ldr	r3, [r5, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d000      	beq.n	80029cc <_close_r+0x1c>
 80029ca:	6023      	str	r3, [r4, #0]
 80029cc:	bd70      	pop	{r4, r5, r6, pc}
 80029ce:	46c0      	nop			@ (mov r8, r8)
 80029d0:	20000344 	.word	0x20000344

080029d4 <_lseek_r>:
 80029d4:	b570      	push	{r4, r5, r6, lr}
 80029d6:	0004      	movs	r4, r0
 80029d8:	0008      	movs	r0, r1
 80029da:	0011      	movs	r1, r2
 80029dc:	001a      	movs	r2, r3
 80029de:	2300      	movs	r3, #0
 80029e0:	4d05      	ldr	r5, [pc, #20]	@ (80029f8 <_lseek_r+0x24>)
 80029e2:	602b      	str	r3, [r5, #0]
 80029e4:	f7fd fdee 	bl	80005c4 <_lseek>
 80029e8:	1c43      	adds	r3, r0, #1
 80029ea:	d103      	bne.n	80029f4 <_lseek_r+0x20>
 80029ec:	682b      	ldr	r3, [r5, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d000      	beq.n	80029f4 <_lseek_r+0x20>
 80029f2:	6023      	str	r3, [r4, #0]
 80029f4:	bd70      	pop	{r4, r5, r6, pc}
 80029f6:	46c0      	nop			@ (mov r8, r8)
 80029f8:	20000344 	.word	0x20000344

080029fc <_read_r>:
 80029fc:	b570      	push	{r4, r5, r6, lr}
 80029fe:	0004      	movs	r4, r0
 8002a00:	0008      	movs	r0, r1
 8002a02:	0011      	movs	r1, r2
 8002a04:	001a      	movs	r2, r3
 8002a06:	2300      	movs	r3, #0
 8002a08:	4d05      	ldr	r5, [pc, #20]	@ (8002a20 <_read_r+0x24>)
 8002a0a:	602b      	str	r3, [r5, #0]
 8002a0c:	f7fd fdb6 	bl	800057c <_read>
 8002a10:	1c43      	adds	r3, r0, #1
 8002a12:	d103      	bne.n	8002a1c <_read_r+0x20>
 8002a14:	682b      	ldr	r3, [r5, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d000      	beq.n	8002a1c <_read_r+0x20>
 8002a1a:	6023      	str	r3, [r4, #0]
 8002a1c:	bd70      	pop	{r4, r5, r6, pc}
 8002a1e:	46c0      	nop			@ (mov r8, r8)
 8002a20:	20000344 	.word	0x20000344

08002a24 <_sbrk_r>:
 8002a24:	2300      	movs	r3, #0
 8002a26:	b570      	push	{r4, r5, r6, lr}
 8002a28:	4d06      	ldr	r5, [pc, #24]	@ (8002a44 <_sbrk_r+0x20>)
 8002a2a:	0004      	movs	r4, r0
 8002a2c:	0008      	movs	r0, r1
 8002a2e:	602b      	str	r3, [r5, #0]
 8002a30:	f7fd fdca 	bl	80005c8 <_sbrk>
 8002a34:	1c43      	adds	r3, r0, #1
 8002a36:	d103      	bne.n	8002a40 <_sbrk_r+0x1c>
 8002a38:	682b      	ldr	r3, [r5, #0]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d000      	beq.n	8002a40 <_sbrk_r+0x1c>
 8002a3e:	6023      	str	r3, [r4, #0]
 8002a40:	bd70      	pop	{r4, r5, r6, pc}
 8002a42:	46c0      	nop			@ (mov r8, r8)
 8002a44:	20000344 	.word	0x20000344

08002a48 <_write_r>:
 8002a48:	b570      	push	{r4, r5, r6, lr}
 8002a4a:	0004      	movs	r4, r0
 8002a4c:	0008      	movs	r0, r1
 8002a4e:	0011      	movs	r1, r2
 8002a50:	001a      	movs	r2, r3
 8002a52:	2300      	movs	r3, #0
 8002a54:	4d05      	ldr	r5, [pc, #20]	@ (8002a6c <_write_r+0x24>)
 8002a56:	602b      	str	r3, [r5, #0]
 8002a58:	f7fd fd9d 	bl	8000596 <_write>
 8002a5c:	1c43      	adds	r3, r0, #1
 8002a5e:	d103      	bne.n	8002a68 <_write_r+0x20>
 8002a60:	682b      	ldr	r3, [r5, #0]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d000      	beq.n	8002a68 <_write_r+0x20>
 8002a66:	6023      	str	r3, [r4, #0]
 8002a68:	bd70      	pop	{r4, r5, r6, pc}
 8002a6a:	46c0      	nop			@ (mov r8, r8)
 8002a6c:	20000344 	.word	0x20000344

08002a70 <__errno>:
 8002a70:	4b01      	ldr	r3, [pc, #4]	@ (8002a78 <__errno+0x8>)
 8002a72:	6818      	ldr	r0, [r3, #0]
 8002a74:	4770      	bx	lr
 8002a76:	46c0      	nop			@ (mov r8, r8)
 8002a78:	20000038 	.word	0x20000038

08002a7c <__libc_init_array>:
 8002a7c:	b570      	push	{r4, r5, r6, lr}
 8002a7e:	2600      	movs	r6, #0
 8002a80:	4c0c      	ldr	r4, [pc, #48]	@ (8002ab4 <__libc_init_array+0x38>)
 8002a82:	4d0d      	ldr	r5, [pc, #52]	@ (8002ab8 <__libc_init_array+0x3c>)
 8002a84:	1b64      	subs	r4, r4, r5
 8002a86:	10a4      	asrs	r4, r4, #2
 8002a88:	42a6      	cmp	r6, r4
 8002a8a:	d109      	bne.n	8002aa0 <__libc_init_array+0x24>
 8002a8c:	2600      	movs	r6, #0
 8002a8e:	f000 fc77 	bl	8003380 <_init>
 8002a92:	4c0a      	ldr	r4, [pc, #40]	@ (8002abc <__libc_init_array+0x40>)
 8002a94:	4d0a      	ldr	r5, [pc, #40]	@ (8002ac0 <__libc_init_array+0x44>)
 8002a96:	1b64      	subs	r4, r4, r5
 8002a98:	10a4      	asrs	r4, r4, #2
 8002a9a:	42a6      	cmp	r6, r4
 8002a9c:	d105      	bne.n	8002aaa <__libc_init_array+0x2e>
 8002a9e:	bd70      	pop	{r4, r5, r6, pc}
 8002aa0:	00b3      	lsls	r3, r6, #2
 8002aa2:	58eb      	ldr	r3, [r5, r3]
 8002aa4:	4798      	blx	r3
 8002aa6:	3601      	adds	r6, #1
 8002aa8:	e7ee      	b.n	8002a88 <__libc_init_array+0xc>
 8002aaa:	00b3      	lsls	r3, r6, #2
 8002aac:	58eb      	ldr	r3, [r5, r3]
 8002aae:	4798      	blx	r3
 8002ab0:	3601      	adds	r6, #1
 8002ab2:	e7f2      	b.n	8002a9a <__libc_init_array+0x1e>
 8002ab4:	0800563c 	.word	0x0800563c
 8002ab8:	0800563c 	.word	0x0800563c
 8002abc:	08005640 	.word	0x08005640
 8002ac0:	0800563c 	.word	0x0800563c

08002ac4 <__retarget_lock_init_recursive>:
 8002ac4:	4770      	bx	lr

08002ac6 <__retarget_lock_acquire_recursive>:
 8002ac6:	4770      	bx	lr

08002ac8 <__retarget_lock_release_recursive>:
 8002ac8:	4770      	bx	lr
	...

08002acc <_free_r>:
 8002acc:	b570      	push	{r4, r5, r6, lr}
 8002ace:	0005      	movs	r5, r0
 8002ad0:	1e0c      	subs	r4, r1, #0
 8002ad2:	d010      	beq.n	8002af6 <_free_r+0x2a>
 8002ad4:	3c04      	subs	r4, #4
 8002ad6:	6823      	ldr	r3, [r4, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	da00      	bge.n	8002ade <_free_r+0x12>
 8002adc:	18e4      	adds	r4, r4, r3
 8002ade:	0028      	movs	r0, r5
 8002ae0:	f7ff fd2e 	bl	8002540 <__malloc_lock>
 8002ae4:	4a1d      	ldr	r2, [pc, #116]	@ (8002b5c <_free_r+0x90>)
 8002ae6:	6813      	ldr	r3, [r2, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d105      	bne.n	8002af8 <_free_r+0x2c>
 8002aec:	6063      	str	r3, [r4, #4]
 8002aee:	6014      	str	r4, [r2, #0]
 8002af0:	0028      	movs	r0, r5
 8002af2:	f7ff fd2d 	bl	8002550 <__malloc_unlock>
 8002af6:	bd70      	pop	{r4, r5, r6, pc}
 8002af8:	42a3      	cmp	r3, r4
 8002afa:	d908      	bls.n	8002b0e <_free_r+0x42>
 8002afc:	6820      	ldr	r0, [r4, #0]
 8002afe:	1821      	adds	r1, r4, r0
 8002b00:	428b      	cmp	r3, r1
 8002b02:	d1f3      	bne.n	8002aec <_free_r+0x20>
 8002b04:	6819      	ldr	r1, [r3, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	1809      	adds	r1, r1, r0
 8002b0a:	6021      	str	r1, [r4, #0]
 8002b0c:	e7ee      	b.n	8002aec <_free_r+0x20>
 8002b0e:	001a      	movs	r2, r3
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <_free_r+0x4e>
 8002b16:	42a3      	cmp	r3, r4
 8002b18:	d9f9      	bls.n	8002b0e <_free_r+0x42>
 8002b1a:	6811      	ldr	r1, [r2, #0]
 8002b1c:	1850      	adds	r0, r2, r1
 8002b1e:	42a0      	cmp	r0, r4
 8002b20:	d10b      	bne.n	8002b3a <_free_r+0x6e>
 8002b22:	6820      	ldr	r0, [r4, #0]
 8002b24:	1809      	adds	r1, r1, r0
 8002b26:	1850      	adds	r0, r2, r1
 8002b28:	6011      	str	r1, [r2, #0]
 8002b2a:	4283      	cmp	r3, r0
 8002b2c:	d1e0      	bne.n	8002af0 <_free_r+0x24>
 8002b2e:	6818      	ldr	r0, [r3, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	1841      	adds	r1, r0, r1
 8002b34:	6011      	str	r1, [r2, #0]
 8002b36:	6053      	str	r3, [r2, #4]
 8002b38:	e7da      	b.n	8002af0 <_free_r+0x24>
 8002b3a:	42a0      	cmp	r0, r4
 8002b3c:	d902      	bls.n	8002b44 <_free_r+0x78>
 8002b3e:	230c      	movs	r3, #12
 8002b40:	602b      	str	r3, [r5, #0]
 8002b42:	e7d5      	b.n	8002af0 <_free_r+0x24>
 8002b44:	6820      	ldr	r0, [r4, #0]
 8002b46:	1821      	adds	r1, r4, r0
 8002b48:	428b      	cmp	r3, r1
 8002b4a:	d103      	bne.n	8002b54 <_free_r+0x88>
 8002b4c:	6819      	ldr	r1, [r3, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	1809      	adds	r1, r1, r0
 8002b52:	6021      	str	r1, [r4, #0]
 8002b54:	6063      	str	r3, [r4, #4]
 8002b56:	6054      	str	r4, [r2, #4]
 8002b58:	e7ca      	b.n	8002af0 <_free_r+0x24>
 8002b5a:	46c0      	nop			@ (mov r8, r8)
 8002b5c:	20000204 	.word	0x20000204

08002b60 <__sfputc_r>:
 8002b60:	6893      	ldr	r3, [r2, #8]
 8002b62:	b510      	push	{r4, lr}
 8002b64:	3b01      	subs	r3, #1
 8002b66:	6093      	str	r3, [r2, #8]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	da04      	bge.n	8002b76 <__sfputc_r+0x16>
 8002b6c:	6994      	ldr	r4, [r2, #24]
 8002b6e:	42a3      	cmp	r3, r4
 8002b70:	db07      	blt.n	8002b82 <__sfputc_r+0x22>
 8002b72:	290a      	cmp	r1, #10
 8002b74:	d005      	beq.n	8002b82 <__sfputc_r+0x22>
 8002b76:	6813      	ldr	r3, [r2, #0]
 8002b78:	1c58      	adds	r0, r3, #1
 8002b7a:	6010      	str	r0, [r2, #0]
 8002b7c:	7019      	strb	r1, [r3, #0]
 8002b7e:	0008      	movs	r0, r1
 8002b80:	bd10      	pop	{r4, pc}
 8002b82:	f7ff fe6d 	bl	8002860 <__swbuf_r>
 8002b86:	0001      	movs	r1, r0
 8002b88:	e7f9      	b.n	8002b7e <__sfputc_r+0x1e>

08002b8a <__sfputs_r>:
 8002b8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b8c:	0006      	movs	r6, r0
 8002b8e:	000f      	movs	r7, r1
 8002b90:	0014      	movs	r4, r2
 8002b92:	18d5      	adds	r5, r2, r3
 8002b94:	42ac      	cmp	r4, r5
 8002b96:	d101      	bne.n	8002b9c <__sfputs_r+0x12>
 8002b98:	2000      	movs	r0, #0
 8002b9a:	e007      	b.n	8002bac <__sfputs_r+0x22>
 8002b9c:	7821      	ldrb	r1, [r4, #0]
 8002b9e:	003a      	movs	r2, r7
 8002ba0:	0030      	movs	r0, r6
 8002ba2:	f7ff ffdd 	bl	8002b60 <__sfputc_r>
 8002ba6:	3401      	adds	r4, #1
 8002ba8:	1c43      	adds	r3, r0, #1
 8002baa:	d1f3      	bne.n	8002b94 <__sfputs_r+0xa>
 8002bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002bb0 <_vfiprintf_r>:
 8002bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bb2:	b0a1      	sub	sp, #132	@ 0x84
 8002bb4:	000f      	movs	r7, r1
 8002bb6:	0015      	movs	r5, r2
 8002bb8:	001e      	movs	r6, r3
 8002bba:	9003      	str	r0, [sp, #12]
 8002bbc:	2800      	cmp	r0, #0
 8002bbe:	d004      	beq.n	8002bca <_vfiprintf_r+0x1a>
 8002bc0:	6a03      	ldr	r3, [r0, #32]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <_vfiprintf_r+0x1a>
 8002bc6:	f7ff fd5b 	bl	8002680 <__sinit>
 8002bca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bcc:	07db      	lsls	r3, r3, #31
 8002bce:	d405      	bmi.n	8002bdc <_vfiprintf_r+0x2c>
 8002bd0:	89bb      	ldrh	r3, [r7, #12]
 8002bd2:	059b      	lsls	r3, r3, #22
 8002bd4:	d402      	bmi.n	8002bdc <_vfiprintf_r+0x2c>
 8002bd6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002bd8:	f7ff ff75 	bl	8002ac6 <__retarget_lock_acquire_recursive>
 8002bdc:	89bb      	ldrh	r3, [r7, #12]
 8002bde:	071b      	lsls	r3, r3, #28
 8002be0:	d502      	bpl.n	8002be8 <_vfiprintf_r+0x38>
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d113      	bne.n	8002c10 <_vfiprintf_r+0x60>
 8002be8:	0039      	movs	r1, r7
 8002bea:	9803      	ldr	r0, [sp, #12]
 8002bec:	f7ff fe7a 	bl	80028e4 <__swsetup_r>
 8002bf0:	2800      	cmp	r0, #0
 8002bf2:	d00d      	beq.n	8002c10 <_vfiprintf_r+0x60>
 8002bf4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bf6:	07db      	lsls	r3, r3, #31
 8002bf8:	d503      	bpl.n	8002c02 <_vfiprintf_r+0x52>
 8002bfa:	2001      	movs	r0, #1
 8002bfc:	4240      	negs	r0, r0
 8002bfe:	b021      	add	sp, #132	@ 0x84
 8002c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c02:	89bb      	ldrh	r3, [r7, #12]
 8002c04:	059b      	lsls	r3, r3, #22
 8002c06:	d4f8      	bmi.n	8002bfa <_vfiprintf_r+0x4a>
 8002c08:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002c0a:	f7ff ff5d 	bl	8002ac8 <__retarget_lock_release_recursive>
 8002c0e:	e7f4      	b.n	8002bfa <_vfiprintf_r+0x4a>
 8002c10:	2300      	movs	r3, #0
 8002c12:	ac08      	add	r4, sp, #32
 8002c14:	6163      	str	r3, [r4, #20]
 8002c16:	3320      	adds	r3, #32
 8002c18:	7663      	strb	r3, [r4, #25]
 8002c1a:	3310      	adds	r3, #16
 8002c1c:	76a3      	strb	r3, [r4, #26]
 8002c1e:	9607      	str	r6, [sp, #28]
 8002c20:	002e      	movs	r6, r5
 8002c22:	7833      	ldrb	r3, [r6, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <_vfiprintf_r+0x7c>
 8002c28:	2b25      	cmp	r3, #37	@ 0x25
 8002c2a:	d148      	bne.n	8002cbe <_vfiprintf_r+0x10e>
 8002c2c:	1b73      	subs	r3, r6, r5
 8002c2e:	9305      	str	r3, [sp, #20]
 8002c30:	42ae      	cmp	r6, r5
 8002c32:	d00b      	beq.n	8002c4c <_vfiprintf_r+0x9c>
 8002c34:	002a      	movs	r2, r5
 8002c36:	0039      	movs	r1, r7
 8002c38:	9803      	ldr	r0, [sp, #12]
 8002c3a:	f7ff ffa6 	bl	8002b8a <__sfputs_r>
 8002c3e:	3001      	adds	r0, #1
 8002c40:	d100      	bne.n	8002c44 <_vfiprintf_r+0x94>
 8002c42:	e0ae      	b.n	8002da2 <_vfiprintf_r+0x1f2>
 8002c44:	6963      	ldr	r3, [r4, #20]
 8002c46:	9a05      	ldr	r2, [sp, #20]
 8002c48:	189b      	adds	r3, r3, r2
 8002c4a:	6163      	str	r3, [r4, #20]
 8002c4c:	7833      	ldrb	r3, [r6, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d100      	bne.n	8002c54 <_vfiprintf_r+0xa4>
 8002c52:	e0a6      	b.n	8002da2 <_vfiprintf_r+0x1f2>
 8002c54:	2201      	movs	r2, #1
 8002c56:	2300      	movs	r3, #0
 8002c58:	4252      	negs	r2, r2
 8002c5a:	6062      	str	r2, [r4, #4]
 8002c5c:	a904      	add	r1, sp, #16
 8002c5e:	3254      	adds	r2, #84	@ 0x54
 8002c60:	1852      	adds	r2, r2, r1
 8002c62:	1c75      	adds	r5, r6, #1
 8002c64:	6023      	str	r3, [r4, #0]
 8002c66:	60e3      	str	r3, [r4, #12]
 8002c68:	60a3      	str	r3, [r4, #8]
 8002c6a:	7013      	strb	r3, [r2, #0]
 8002c6c:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002c6e:	4b59      	ldr	r3, [pc, #356]	@ (8002dd4 <_vfiprintf_r+0x224>)
 8002c70:	2205      	movs	r2, #5
 8002c72:	0018      	movs	r0, r3
 8002c74:	7829      	ldrb	r1, [r5, #0]
 8002c76:	9305      	str	r3, [sp, #20]
 8002c78:	f000 fb76 	bl	8003368 <memchr>
 8002c7c:	1c6e      	adds	r6, r5, #1
 8002c7e:	2800      	cmp	r0, #0
 8002c80:	d11f      	bne.n	8002cc2 <_vfiprintf_r+0x112>
 8002c82:	6822      	ldr	r2, [r4, #0]
 8002c84:	06d3      	lsls	r3, r2, #27
 8002c86:	d504      	bpl.n	8002c92 <_vfiprintf_r+0xe2>
 8002c88:	2353      	movs	r3, #83	@ 0x53
 8002c8a:	a904      	add	r1, sp, #16
 8002c8c:	185b      	adds	r3, r3, r1
 8002c8e:	2120      	movs	r1, #32
 8002c90:	7019      	strb	r1, [r3, #0]
 8002c92:	0713      	lsls	r3, r2, #28
 8002c94:	d504      	bpl.n	8002ca0 <_vfiprintf_r+0xf0>
 8002c96:	2353      	movs	r3, #83	@ 0x53
 8002c98:	a904      	add	r1, sp, #16
 8002c9a:	185b      	adds	r3, r3, r1
 8002c9c:	212b      	movs	r1, #43	@ 0x2b
 8002c9e:	7019      	strb	r1, [r3, #0]
 8002ca0:	782b      	ldrb	r3, [r5, #0]
 8002ca2:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ca4:	d016      	beq.n	8002cd4 <_vfiprintf_r+0x124>
 8002ca6:	002e      	movs	r6, r5
 8002ca8:	2100      	movs	r1, #0
 8002caa:	200a      	movs	r0, #10
 8002cac:	68e3      	ldr	r3, [r4, #12]
 8002cae:	7832      	ldrb	r2, [r6, #0]
 8002cb0:	1c75      	adds	r5, r6, #1
 8002cb2:	3a30      	subs	r2, #48	@ 0x30
 8002cb4:	2a09      	cmp	r2, #9
 8002cb6:	d950      	bls.n	8002d5a <_vfiprintf_r+0x1aa>
 8002cb8:	2900      	cmp	r1, #0
 8002cba:	d111      	bne.n	8002ce0 <_vfiprintf_r+0x130>
 8002cbc:	e017      	b.n	8002cee <_vfiprintf_r+0x13e>
 8002cbe:	3601      	adds	r6, #1
 8002cc0:	e7af      	b.n	8002c22 <_vfiprintf_r+0x72>
 8002cc2:	9b05      	ldr	r3, [sp, #20]
 8002cc4:	6822      	ldr	r2, [r4, #0]
 8002cc6:	1ac0      	subs	r0, r0, r3
 8002cc8:	2301      	movs	r3, #1
 8002cca:	4083      	lsls	r3, r0
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	0035      	movs	r5, r6
 8002cd0:	6023      	str	r3, [r4, #0]
 8002cd2:	e7cc      	b.n	8002c6e <_vfiprintf_r+0xbe>
 8002cd4:	9b07      	ldr	r3, [sp, #28]
 8002cd6:	1d19      	adds	r1, r3, #4
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	9107      	str	r1, [sp, #28]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	db01      	blt.n	8002ce4 <_vfiprintf_r+0x134>
 8002ce0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002ce2:	e004      	b.n	8002cee <_vfiprintf_r+0x13e>
 8002ce4:	425b      	negs	r3, r3
 8002ce6:	60e3      	str	r3, [r4, #12]
 8002ce8:	2302      	movs	r3, #2
 8002cea:	4313      	orrs	r3, r2
 8002cec:	6023      	str	r3, [r4, #0]
 8002cee:	7833      	ldrb	r3, [r6, #0]
 8002cf0:	2b2e      	cmp	r3, #46	@ 0x2e
 8002cf2:	d10c      	bne.n	8002d0e <_vfiprintf_r+0x15e>
 8002cf4:	7873      	ldrb	r3, [r6, #1]
 8002cf6:	2b2a      	cmp	r3, #42	@ 0x2a
 8002cf8:	d134      	bne.n	8002d64 <_vfiprintf_r+0x1b4>
 8002cfa:	9b07      	ldr	r3, [sp, #28]
 8002cfc:	3602      	adds	r6, #2
 8002cfe:	1d1a      	adds	r2, r3, #4
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	9207      	str	r2, [sp, #28]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	da01      	bge.n	8002d0c <_vfiprintf_r+0x15c>
 8002d08:	2301      	movs	r3, #1
 8002d0a:	425b      	negs	r3, r3
 8002d0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8002d0e:	4d32      	ldr	r5, [pc, #200]	@ (8002dd8 <_vfiprintf_r+0x228>)
 8002d10:	2203      	movs	r2, #3
 8002d12:	0028      	movs	r0, r5
 8002d14:	7831      	ldrb	r1, [r6, #0]
 8002d16:	f000 fb27 	bl	8003368 <memchr>
 8002d1a:	2800      	cmp	r0, #0
 8002d1c:	d006      	beq.n	8002d2c <_vfiprintf_r+0x17c>
 8002d1e:	2340      	movs	r3, #64	@ 0x40
 8002d20:	1b40      	subs	r0, r0, r5
 8002d22:	4083      	lsls	r3, r0
 8002d24:	6822      	ldr	r2, [r4, #0]
 8002d26:	3601      	adds	r6, #1
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	6023      	str	r3, [r4, #0]
 8002d2c:	7831      	ldrb	r1, [r6, #0]
 8002d2e:	2206      	movs	r2, #6
 8002d30:	482a      	ldr	r0, [pc, #168]	@ (8002ddc <_vfiprintf_r+0x22c>)
 8002d32:	1c75      	adds	r5, r6, #1
 8002d34:	7621      	strb	r1, [r4, #24]
 8002d36:	f000 fb17 	bl	8003368 <memchr>
 8002d3a:	2800      	cmp	r0, #0
 8002d3c:	d040      	beq.n	8002dc0 <_vfiprintf_r+0x210>
 8002d3e:	4b28      	ldr	r3, [pc, #160]	@ (8002de0 <_vfiprintf_r+0x230>)
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d122      	bne.n	8002d8a <_vfiprintf_r+0x1da>
 8002d44:	2207      	movs	r2, #7
 8002d46:	9b07      	ldr	r3, [sp, #28]
 8002d48:	3307      	adds	r3, #7
 8002d4a:	4393      	bics	r3, r2
 8002d4c:	3308      	adds	r3, #8
 8002d4e:	9307      	str	r3, [sp, #28]
 8002d50:	6963      	ldr	r3, [r4, #20]
 8002d52:	9a04      	ldr	r2, [sp, #16]
 8002d54:	189b      	adds	r3, r3, r2
 8002d56:	6163      	str	r3, [r4, #20]
 8002d58:	e762      	b.n	8002c20 <_vfiprintf_r+0x70>
 8002d5a:	4343      	muls	r3, r0
 8002d5c:	002e      	movs	r6, r5
 8002d5e:	2101      	movs	r1, #1
 8002d60:	189b      	adds	r3, r3, r2
 8002d62:	e7a4      	b.n	8002cae <_vfiprintf_r+0xfe>
 8002d64:	2300      	movs	r3, #0
 8002d66:	200a      	movs	r0, #10
 8002d68:	0019      	movs	r1, r3
 8002d6a:	3601      	adds	r6, #1
 8002d6c:	6063      	str	r3, [r4, #4]
 8002d6e:	7832      	ldrb	r2, [r6, #0]
 8002d70:	1c75      	adds	r5, r6, #1
 8002d72:	3a30      	subs	r2, #48	@ 0x30
 8002d74:	2a09      	cmp	r2, #9
 8002d76:	d903      	bls.n	8002d80 <_vfiprintf_r+0x1d0>
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0c8      	beq.n	8002d0e <_vfiprintf_r+0x15e>
 8002d7c:	9109      	str	r1, [sp, #36]	@ 0x24
 8002d7e:	e7c6      	b.n	8002d0e <_vfiprintf_r+0x15e>
 8002d80:	4341      	muls	r1, r0
 8002d82:	002e      	movs	r6, r5
 8002d84:	2301      	movs	r3, #1
 8002d86:	1889      	adds	r1, r1, r2
 8002d88:	e7f1      	b.n	8002d6e <_vfiprintf_r+0x1be>
 8002d8a:	aa07      	add	r2, sp, #28
 8002d8c:	9200      	str	r2, [sp, #0]
 8002d8e:	0021      	movs	r1, r4
 8002d90:	003a      	movs	r2, r7
 8002d92:	4b14      	ldr	r3, [pc, #80]	@ (8002de4 <_vfiprintf_r+0x234>)
 8002d94:	9803      	ldr	r0, [sp, #12]
 8002d96:	e000      	b.n	8002d9a <_vfiprintf_r+0x1ea>
 8002d98:	bf00      	nop
 8002d9a:	9004      	str	r0, [sp, #16]
 8002d9c:	9b04      	ldr	r3, [sp, #16]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	d1d6      	bne.n	8002d50 <_vfiprintf_r+0x1a0>
 8002da2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002da4:	07db      	lsls	r3, r3, #31
 8002da6:	d405      	bmi.n	8002db4 <_vfiprintf_r+0x204>
 8002da8:	89bb      	ldrh	r3, [r7, #12]
 8002daa:	059b      	lsls	r3, r3, #22
 8002dac:	d402      	bmi.n	8002db4 <_vfiprintf_r+0x204>
 8002dae:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002db0:	f7ff fe8a 	bl	8002ac8 <__retarget_lock_release_recursive>
 8002db4:	89bb      	ldrh	r3, [r7, #12]
 8002db6:	065b      	lsls	r3, r3, #25
 8002db8:	d500      	bpl.n	8002dbc <_vfiprintf_r+0x20c>
 8002dba:	e71e      	b.n	8002bfa <_vfiprintf_r+0x4a>
 8002dbc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8002dbe:	e71e      	b.n	8002bfe <_vfiprintf_r+0x4e>
 8002dc0:	aa07      	add	r2, sp, #28
 8002dc2:	9200      	str	r2, [sp, #0]
 8002dc4:	0021      	movs	r1, r4
 8002dc6:	003a      	movs	r2, r7
 8002dc8:	4b06      	ldr	r3, [pc, #24]	@ (8002de4 <_vfiprintf_r+0x234>)
 8002dca:	9803      	ldr	r0, [sp, #12]
 8002dcc:	f000 f87c 	bl	8002ec8 <_printf_i>
 8002dd0:	e7e3      	b.n	8002d9a <_vfiprintf_r+0x1ea>
 8002dd2:	46c0      	nop			@ (mov r8, r8)
 8002dd4:	08005608 	.word	0x08005608
 8002dd8:	0800560e 	.word	0x0800560e
 8002ddc:	08005612 	.word	0x08005612
 8002de0:	00000000 	.word	0x00000000
 8002de4:	08002b8b 	.word	0x08002b8b

08002de8 <_printf_common>:
 8002de8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002dea:	0016      	movs	r6, r2
 8002dec:	9301      	str	r3, [sp, #4]
 8002dee:	688a      	ldr	r2, [r1, #8]
 8002df0:	690b      	ldr	r3, [r1, #16]
 8002df2:	000c      	movs	r4, r1
 8002df4:	9000      	str	r0, [sp, #0]
 8002df6:	4293      	cmp	r3, r2
 8002df8:	da00      	bge.n	8002dfc <_printf_common+0x14>
 8002dfa:	0013      	movs	r3, r2
 8002dfc:	0022      	movs	r2, r4
 8002dfe:	6033      	str	r3, [r6, #0]
 8002e00:	3243      	adds	r2, #67	@ 0x43
 8002e02:	7812      	ldrb	r2, [r2, #0]
 8002e04:	2a00      	cmp	r2, #0
 8002e06:	d001      	beq.n	8002e0c <_printf_common+0x24>
 8002e08:	3301      	adds	r3, #1
 8002e0a:	6033      	str	r3, [r6, #0]
 8002e0c:	6823      	ldr	r3, [r4, #0]
 8002e0e:	069b      	lsls	r3, r3, #26
 8002e10:	d502      	bpl.n	8002e18 <_printf_common+0x30>
 8002e12:	6833      	ldr	r3, [r6, #0]
 8002e14:	3302      	adds	r3, #2
 8002e16:	6033      	str	r3, [r6, #0]
 8002e18:	6822      	ldr	r2, [r4, #0]
 8002e1a:	2306      	movs	r3, #6
 8002e1c:	0015      	movs	r5, r2
 8002e1e:	401d      	ands	r5, r3
 8002e20:	421a      	tst	r2, r3
 8002e22:	d027      	beq.n	8002e74 <_printf_common+0x8c>
 8002e24:	0023      	movs	r3, r4
 8002e26:	3343      	adds	r3, #67	@ 0x43
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	1e5a      	subs	r2, r3, #1
 8002e2c:	4193      	sbcs	r3, r2
 8002e2e:	6822      	ldr	r2, [r4, #0]
 8002e30:	0692      	lsls	r2, r2, #26
 8002e32:	d430      	bmi.n	8002e96 <_printf_common+0xae>
 8002e34:	0022      	movs	r2, r4
 8002e36:	9901      	ldr	r1, [sp, #4]
 8002e38:	9800      	ldr	r0, [sp, #0]
 8002e3a:	9d08      	ldr	r5, [sp, #32]
 8002e3c:	3243      	adds	r2, #67	@ 0x43
 8002e3e:	47a8      	blx	r5
 8002e40:	3001      	adds	r0, #1
 8002e42:	d025      	beq.n	8002e90 <_printf_common+0xa8>
 8002e44:	2206      	movs	r2, #6
 8002e46:	6823      	ldr	r3, [r4, #0]
 8002e48:	2500      	movs	r5, #0
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	2b04      	cmp	r3, #4
 8002e4e:	d105      	bne.n	8002e5c <_printf_common+0x74>
 8002e50:	6833      	ldr	r3, [r6, #0]
 8002e52:	68e5      	ldr	r5, [r4, #12]
 8002e54:	1aed      	subs	r5, r5, r3
 8002e56:	43eb      	mvns	r3, r5
 8002e58:	17db      	asrs	r3, r3, #31
 8002e5a:	401d      	ands	r5, r3
 8002e5c:	68a3      	ldr	r3, [r4, #8]
 8002e5e:	6922      	ldr	r2, [r4, #16]
 8002e60:	4293      	cmp	r3, r2
 8002e62:	dd01      	ble.n	8002e68 <_printf_common+0x80>
 8002e64:	1a9b      	subs	r3, r3, r2
 8002e66:	18ed      	adds	r5, r5, r3
 8002e68:	2600      	movs	r6, #0
 8002e6a:	42b5      	cmp	r5, r6
 8002e6c:	d120      	bne.n	8002eb0 <_printf_common+0xc8>
 8002e6e:	2000      	movs	r0, #0
 8002e70:	e010      	b.n	8002e94 <_printf_common+0xac>
 8002e72:	3501      	adds	r5, #1
 8002e74:	68e3      	ldr	r3, [r4, #12]
 8002e76:	6832      	ldr	r2, [r6, #0]
 8002e78:	1a9b      	subs	r3, r3, r2
 8002e7a:	42ab      	cmp	r3, r5
 8002e7c:	ddd2      	ble.n	8002e24 <_printf_common+0x3c>
 8002e7e:	0022      	movs	r2, r4
 8002e80:	2301      	movs	r3, #1
 8002e82:	9901      	ldr	r1, [sp, #4]
 8002e84:	9800      	ldr	r0, [sp, #0]
 8002e86:	9f08      	ldr	r7, [sp, #32]
 8002e88:	3219      	adds	r2, #25
 8002e8a:	47b8      	blx	r7
 8002e8c:	3001      	adds	r0, #1
 8002e8e:	d1f0      	bne.n	8002e72 <_printf_common+0x8a>
 8002e90:	2001      	movs	r0, #1
 8002e92:	4240      	negs	r0, r0
 8002e94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002e96:	2030      	movs	r0, #48	@ 0x30
 8002e98:	18e1      	adds	r1, r4, r3
 8002e9a:	3143      	adds	r1, #67	@ 0x43
 8002e9c:	7008      	strb	r0, [r1, #0]
 8002e9e:	0021      	movs	r1, r4
 8002ea0:	1c5a      	adds	r2, r3, #1
 8002ea2:	3145      	adds	r1, #69	@ 0x45
 8002ea4:	7809      	ldrb	r1, [r1, #0]
 8002ea6:	18a2      	adds	r2, r4, r2
 8002ea8:	3243      	adds	r2, #67	@ 0x43
 8002eaa:	3302      	adds	r3, #2
 8002eac:	7011      	strb	r1, [r2, #0]
 8002eae:	e7c1      	b.n	8002e34 <_printf_common+0x4c>
 8002eb0:	0022      	movs	r2, r4
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	9901      	ldr	r1, [sp, #4]
 8002eb6:	9800      	ldr	r0, [sp, #0]
 8002eb8:	9f08      	ldr	r7, [sp, #32]
 8002eba:	321a      	adds	r2, #26
 8002ebc:	47b8      	blx	r7
 8002ebe:	3001      	adds	r0, #1
 8002ec0:	d0e6      	beq.n	8002e90 <_printf_common+0xa8>
 8002ec2:	3601      	adds	r6, #1
 8002ec4:	e7d1      	b.n	8002e6a <_printf_common+0x82>
	...

08002ec8 <_printf_i>:
 8002ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eca:	b08b      	sub	sp, #44	@ 0x2c
 8002ecc:	9206      	str	r2, [sp, #24]
 8002ece:	000a      	movs	r2, r1
 8002ed0:	3243      	adds	r2, #67	@ 0x43
 8002ed2:	9307      	str	r3, [sp, #28]
 8002ed4:	9005      	str	r0, [sp, #20]
 8002ed6:	9203      	str	r2, [sp, #12]
 8002ed8:	7e0a      	ldrb	r2, [r1, #24]
 8002eda:	000c      	movs	r4, r1
 8002edc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8002ede:	2a78      	cmp	r2, #120	@ 0x78
 8002ee0:	d809      	bhi.n	8002ef6 <_printf_i+0x2e>
 8002ee2:	2a62      	cmp	r2, #98	@ 0x62
 8002ee4:	d80b      	bhi.n	8002efe <_printf_i+0x36>
 8002ee6:	2a00      	cmp	r2, #0
 8002ee8:	d100      	bne.n	8002eec <_printf_i+0x24>
 8002eea:	e0bc      	b.n	8003066 <_printf_i+0x19e>
 8002eec:	497b      	ldr	r1, [pc, #492]	@ (80030dc <_printf_i+0x214>)
 8002eee:	9104      	str	r1, [sp, #16]
 8002ef0:	2a58      	cmp	r2, #88	@ 0x58
 8002ef2:	d100      	bne.n	8002ef6 <_printf_i+0x2e>
 8002ef4:	e090      	b.n	8003018 <_printf_i+0x150>
 8002ef6:	0025      	movs	r5, r4
 8002ef8:	3542      	adds	r5, #66	@ 0x42
 8002efa:	702a      	strb	r2, [r5, #0]
 8002efc:	e022      	b.n	8002f44 <_printf_i+0x7c>
 8002efe:	0010      	movs	r0, r2
 8002f00:	3863      	subs	r0, #99	@ 0x63
 8002f02:	2815      	cmp	r0, #21
 8002f04:	d8f7      	bhi.n	8002ef6 <_printf_i+0x2e>
 8002f06:	f7fd f909 	bl	800011c <__gnu_thumb1_case_shi>
 8002f0a:	0016      	.short	0x0016
 8002f0c:	fff6001f 	.word	0xfff6001f
 8002f10:	fff6fff6 	.word	0xfff6fff6
 8002f14:	001ffff6 	.word	0x001ffff6
 8002f18:	fff6fff6 	.word	0xfff6fff6
 8002f1c:	fff6fff6 	.word	0xfff6fff6
 8002f20:	003600a1 	.word	0x003600a1
 8002f24:	fff60080 	.word	0xfff60080
 8002f28:	00b2fff6 	.word	0x00b2fff6
 8002f2c:	0036fff6 	.word	0x0036fff6
 8002f30:	fff6fff6 	.word	0xfff6fff6
 8002f34:	0084      	.short	0x0084
 8002f36:	0025      	movs	r5, r4
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	3542      	adds	r5, #66	@ 0x42
 8002f3c:	1d11      	adds	r1, r2, #4
 8002f3e:	6019      	str	r1, [r3, #0]
 8002f40:	6813      	ldr	r3, [r2, #0]
 8002f42:	702b      	strb	r3, [r5, #0]
 8002f44:	2301      	movs	r3, #1
 8002f46:	e0a0      	b.n	800308a <_printf_i+0x1c2>
 8002f48:	6818      	ldr	r0, [r3, #0]
 8002f4a:	6809      	ldr	r1, [r1, #0]
 8002f4c:	1d02      	adds	r2, r0, #4
 8002f4e:	060d      	lsls	r5, r1, #24
 8002f50:	d50b      	bpl.n	8002f6a <_printf_i+0xa2>
 8002f52:	6806      	ldr	r6, [r0, #0]
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	2e00      	cmp	r6, #0
 8002f58:	da03      	bge.n	8002f62 <_printf_i+0x9a>
 8002f5a:	232d      	movs	r3, #45	@ 0x2d
 8002f5c:	9a03      	ldr	r2, [sp, #12]
 8002f5e:	4276      	negs	r6, r6
 8002f60:	7013      	strb	r3, [r2, #0]
 8002f62:	4b5e      	ldr	r3, [pc, #376]	@ (80030dc <_printf_i+0x214>)
 8002f64:	270a      	movs	r7, #10
 8002f66:	9304      	str	r3, [sp, #16]
 8002f68:	e018      	b.n	8002f9c <_printf_i+0xd4>
 8002f6a:	6806      	ldr	r6, [r0, #0]
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	0649      	lsls	r1, r1, #25
 8002f70:	d5f1      	bpl.n	8002f56 <_printf_i+0x8e>
 8002f72:	b236      	sxth	r6, r6
 8002f74:	e7ef      	b.n	8002f56 <_printf_i+0x8e>
 8002f76:	6808      	ldr	r0, [r1, #0]
 8002f78:	6819      	ldr	r1, [r3, #0]
 8002f7a:	c940      	ldmia	r1!, {r6}
 8002f7c:	0605      	lsls	r5, r0, #24
 8002f7e:	d402      	bmi.n	8002f86 <_printf_i+0xbe>
 8002f80:	0640      	lsls	r0, r0, #25
 8002f82:	d500      	bpl.n	8002f86 <_printf_i+0xbe>
 8002f84:	b2b6      	uxth	r6, r6
 8002f86:	6019      	str	r1, [r3, #0]
 8002f88:	4b54      	ldr	r3, [pc, #336]	@ (80030dc <_printf_i+0x214>)
 8002f8a:	270a      	movs	r7, #10
 8002f8c:	9304      	str	r3, [sp, #16]
 8002f8e:	2a6f      	cmp	r2, #111	@ 0x6f
 8002f90:	d100      	bne.n	8002f94 <_printf_i+0xcc>
 8002f92:	3f02      	subs	r7, #2
 8002f94:	0023      	movs	r3, r4
 8002f96:	2200      	movs	r2, #0
 8002f98:	3343      	adds	r3, #67	@ 0x43
 8002f9a:	701a      	strb	r2, [r3, #0]
 8002f9c:	6863      	ldr	r3, [r4, #4]
 8002f9e:	60a3      	str	r3, [r4, #8]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	db03      	blt.n	8002fac <_printf_i+0xe4>
 8002fa4:	2104      	movs	r1, #4
 8002fa6:	6822      	ldr	r2, [r4, #0]
 8002fa8:	438a      	bics	r2, r1
 8002faa:	6022      	str	r2, [r4, #0]
 8002fac:	2e00      	cmp	r6, #0
 8002fae:	d102      	bne.n	8002fb6 <_printf_i+0xee>
 8002fb0:	9d03      	ldr	r5, [sp, #12]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00c      	beq.n	8002fd0 <_printf_i+0x108>
 8002fb6:	9d03      	ldr	r5, [sp, #12]
 8002fb8:	0030      	movs	r0, r6
 8002fba:	0039      	movs	r1, r7
 8002fbc:	f7fd f93e 	bl	800023c <__aeabi_uidivmod>
 8002fc0:	9b04      	ldr	r3, [sp, #16]
 8002fc2:	3d01      	subs	r5, #1
 8002fc4:	5c5b      	ldrb	r3, [r3, r1]
 8002fc6:	702b      	strb	r3, [r5, #0]
 8002fc8:	0033      	movs	r3, r6
 8002fca:	0006      	movs	r6, r0
 8002fcc:	429f      	cmp	r7, r3
 8002fce:	d9f3      	bls.n	8002fb8 <_printf_i+0xf0>
 8002fd0:	2f08      	cmp	r7, #8
 8002fd2:	d109      	bne.n	8002fe8 <_printf_i+0x120>
 8002fd4:	6823      	ldr	r3, [r4, #0]
 8002fd6:	07db      	lsls	r3, r3, #31
 8002fd8:	d506      	bpl.n	8002fe8 <_printf_i+0x120>
 8002fda:	6862      	ldr	r2, [r4, #4]
 8002fdc:	6923      	ldr	r3, [r4, #16]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	dc02      	bgt.n	8002fe8 <_printf_i+0x120>
 8002fe2:	2330      	movs	r3, #48	@ 0x30
 8002fe4:	3d01      	subs	r5, #1
 8002fe6:	702b      	strb	r3, [r5, #0]
 8002fe8:	9b03      	ldr	r3, [sp, #12]
 8002fea:	1b5b      	subs	r3, r3, r5
 8002fec:	6123      	str	r3, [r4, #16]
 8002fee:	9b07      	ldr	r3, [sp, #28]
 8002ff0:	0021      	movs	r1, r4
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	9805      	ldr	r0, [sp, #20]
 8002ff6:	9b06      	ldr	r3, [sp, #24]
 8002ff8:	aa09      	add	r2, sp, #36	@ 0x24
 8002ffa:	f7ff fef5 	bl	8002de8 <_printf_common>
 8002ffe:	3001      	adds	r0, #1
 8003000:	d148      	bne.n	8003094 <_printf_i+0x1cc>
 8003002:	2001      	movs	r0, #1
 8003004:	4240      	negs	r0, r0
 8003006:	b00b      	add	sp, #44	@ 0x2c
 8003008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800300a:	2220      	movs	r2, #32
 800300c:	6809      	ldr	r1, [r1, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	6022      	str	r2, [r4, #0]
 8003012:	2278      	movs	r2, #120	@ 0x78
 8003014:	4932      	ldr	r1, [pc, #200]	@ (80030e0 <_printf_i+0x218>)
 8003016:	9104      	str	r1, [sp, #16]
 8003018:	0021      	movs	r1, r4
 800301a:	3145      	adds	r1, #69	@ 0x45
 800301c:	700a      	strb	r2, [r1, #0]
 800301e:	6819      	ldr	r1, [r3, #0]
 8003020:	6822      	ldr	r2, [r4, #0]
 8003022:	c940      	ldmia	r1!, {r6}
 8003024:	0610      	lsls	r0, r2, #24
 8003026:	d402      	bmi.n	800302e <_printf_i+0x166>
 8003028:	0650      	lsls	r0, r2, #25
 800302a:	d500      	bpl.n	800302e <_printf_i+0x166>
 800302c:	b2b6      	uxth	r6, r6
 800302e:	6019      	str	r1, [r3, #0]
 8003030:	07d3      	lsls	r3, r2, #31
 8003032:	d502      	bpl.n	800303a <_printf_i+0x172>
 8003034:	2320      	movs	r3, #32
 8003036:	4313      	orrs	r3, r2
 8003038:	6023      	str	r3, [r4, #0]
 800303a:	2e00      	cmp	r6, #0
 800303c:	d001      	beq.n	8003042 <_printf_i+0x17a>
 800303e:	2710      	movs	r7, #16
 8003040:	e7a8      	b.n	8002f94 <_printf_i+0xcc>
 8003042:	2220      	movs	r2, #32
 8003044:	6823      	ldr	r3, [r4, #0]
 8003046:	4393      	bics	r3, r2
 8003048:	6023      	str	r3, [r4, #0]
 800304a:	e7f8      	b.n	800303e <_printf_i+0x176>
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	680d      	ldr	r5, [r1, #0]
 8003050:	1d10      	adds	r0, r2, #4
 8003052:	6949      	ldr	r1, [r1, #20]
 8003054:	6018      	str	r0, [r3, #0]
 8003056:	6813      	ldr	r3, [r2, #0]
 8003058:	062e      	lsls	r6, r5, #24
 800305a:	d501      	bpl.n	8003060 <_printf_i+0x198>
 800305c:	6019      	str	r1, [r3, #0]
 800305e:	e002      	b.n	8003066 <_printf_i+0x19e>
 8003060:	066d      	lsls	r5, r5, #25
 8003062:	d5fb      	bpl.n	800305c <_printf_i+0x194>
 8003064:	8019      	strh	r1, [r3, #0]
 8003066:	2300      	movs	r3, #0
 8003068:	9d03      	ldr	r5, [sp, #12]
 800306a:	6123      	str	r3, [r4, #16]
 800306c:	e7bf      	b.n	8002fee <_printf_i+0x126>
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	1d11      	adds	r1, r2, #4
 8003072:	6019      	str	r1, [r3, #0]
 8003074:	6815      	ldr	r5, [r2, #0]
 8003076:	2100      	movs	r1, #0
 8003078:	0028      	movs	r0, r5
 800307a:	6862      	ldr	r2, [r4, #4]
 800307c:	f000 f974 	bl	8003368 <memchr>
 8003080:	2800      	cmp	r0, #0
 8003082:	d001      	beq.n	8003088 <_printf_i+0x1c0>
 8003084:	1b40      	subs	r0, r0, r5
 8003086:	6060      	str	r0, [r4, #4]
 8003088:	6863      	ldr	r3, [r4, #4]
 800308a:	6123      	str	r3, [r4, #16]
 800308c:	2300      	movs	r3, #0
 800308e:	9a03      	ldr	r2, [sp, #12]
 8003090:	7013      	strb	r3, [r2, #0]
 8003092:	e7ac      	b.n	8002fee <_printf_i+0x126>
 8003094:	002a      	movs	r2, r5
 8003096:	6923      	ldr	r3, [r4, #16]
 8003098:	9906      	ldr	r1, [sp, #24]
 800309a:	9805      	ldr	r0, [sp, #20]
 800309c:	9d07      	ldr	r5, [sp, #28]
 800309e:	47a8      	blx	r5
 80030a0:	3001      	adds	r0, #1
 80030a2:	d0ae      	beq.n	8003002 <_printf_i+0x13a>
 80030a4:	6823      	ldr	r3, [r4, #0]
 80030a6:	079b      	lsls	r3, r3, #30
 80030a8:	d415      	bmi.n	80030d6 <_printf_i+0x20e>
 80030aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80030ac:	68e0      	ldr	r0, [r4, #12]
 80030ae:	4298      	cmp	r0, r3
 80030b0:	daa9      	bge.n	8003006 <_printf_i+0x13e>
 80030b2:	0018      	movs	r0, r3
 80030b4:	e7a7      	b.n	8003006 <_printf_i+0x13e>
 80030b6:	0022      	movs	r2, r4
 80030b8:	2301      	movs	r3, #1
 80030ba:	9906      	ldr	r1, [sp, #24]
 80030bc:	9805      	ldr	r0, [sp, #20]
 80030be:	9e07      	ldr	r6, [sp, #28]
 80030c0:	3219      	adds	r2, #25
 80030c2:	47b0      	blx	r6
 80030c4:	3001      	adds	r0, #1
 80030c6:	d09c      	beq.n	8003002 <_printf_i+0x13a>
 80030c8:	3501      	adds	r5, #1
 80030ca:	68e3      	ldr	r3, [r4, #12]
 80030cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80030ce:	1a9b      	subs	r3, r3, r2
 80030d0:	42ab      	cmp	r3, r5
 80030d2:	dcf0      	bgt.n	80030b6 <_printf_i+0x1ee>
 80030d4:	e7e9      	b.n	80030aa <_printf_i+0x1e2>
 80030d6:	2500      	movs	r5, #0
 80030d8:	e7f7      	b.n	80030ca <_printf_i+0x202>
 80030da:	46c0      	nop			@ (mov r8, r8)
 80030dc:	08005619 	.word	0x08005619
 80030e0:	0800562a 	.word	0x0800562a

080030e4 <__sflush_r>:
 80030e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030e6:	220c      	movs	r2, #12
 80030e8:	5e8b      	ldrsh	r3, [r1, r2]
 80030ea:	0005      	movs	r5, r0
 80030ec:	000c      	movs	r4, r1
 80030ee:	071a      	lsls	r2, r3, #28
 80030f0:	d456      	bmi.n	80031a0 <__sflush_r+0xbc>
 80030f2:	684a      	ldr	r2, [r1, #4]
 80030f4:	2a00      	cmp	r2, #0
 80030f6:	dc02      	bgt.n	80030fe <__sflush_r+0x1a>
 80030f8:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80030fa:	2a00      	cmp	r2, #0
 80030fc:	dd4e      	ble.n	800319c <__sflush_r+0xb8>
 80030fe:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003100:	2f00      	cmp	r7, #0
 8003102:	d04b      	beq.n	800319c <__sflush_r+0xb8>
 8003104:	2200      	movs	r2, #0
 8003106:	2080      	movs	r0, #128	@ 0x80
 8003108:	682e      	ldr	r6, [r5, #0]
 800310a:	602a      	str	r2, [r5, #0]
 800310c:	001a      	movs	r2, r3
 800310e:	0140      	lsls	r0, r0, #5
 8003110:	6a21      	ldr	r1, [r4, #32]
 8003112:	4002      	ands	r2, r0
 8003114:	4203      	tst	r3, r0
 8003116:	d033      	beq.n	8003180 <__sflush_r+0x9c>
 8003118:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800311a:	89a3      	ldrh	r3, [r4, #12]
 800311c:	075b      	lsls	r3, r3, #29
 800311e:	d506      	bpl.n	800312e <__sflush_r+0x4a>
 8003120:	6863      	ldr	r3, [r4, #4]
 8003122:	1ad2      	subs	r2, r2, r3
 8003124:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <__sflush_r+0x4a>
 800312a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800312c:	1ad2      	subs	r2, r2, r3
 800312e:	2300      	movs	r3, #0
 8003130:	0028      	movs	r0, r5
 8003132:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003134:	6a21      	ldr	r1, [r4, #32]
 8003136:	47b8      	blx	r7
 8003138:	89a2      	ldrh	r2, [r4, #12]
 800313a:	1c43      	adds	r3, r0, #1
 800313c:	d106      	bne.n	800314c <__sflush_r+0x68>
 800313e:	6829      	ldr	r1, [r5, #0]
 8003140:	291d      	cmp	r1, #29
 8003142:	d846      	bhi.n	80031d2 <__sflush_r+0xee>
 8003144:	4b29      	ldr	r3, [pc, #164]	@ (80031ec <__sflush_r+0x108>)
 8003146:	410b      	asrs	r3, r1
 8003148:	07db      	lsls	r3, r3, #31
 800314a:	d442      	bmi.n	80031d2 <__sflush_r+0xee>
 800314c:	2300      	movs	r3, #0
 800314e:	6063      	str	r3, [r4, #4]
 8003150:	6923      	ldr	r3, [r4, #16]
 8003152:	6023      	str	r3, [r4, #0]
 8003154:	04d2      	lsls	r2, r2, #19
 8003156:	d505      	bpl.n	8003164 <__sflush_r+0x80>
 8003158:	1c43      	adds	r3, r0, #1
 800315a:	d102      	bne.n	8003162 <__sflush_r+0x7e>
 800315c:	682b      	ldr	r3, [r5, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d100      	bne.n	8003164 <__sflush_r+0x80>
 8003162:	6560      	str	r0, [r4, #84]	@ 0x54
 8003164:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003166:	602e      	str	r6, [r5, #0]
 8003168:	2900      	cmp	r1, #0
 800316a:	d017      	beq.n	800319c <__sflush_r+0xb8>
 800316c:	0023      	movs	r3, r4
 800316e:	3344      	adds	r3, #68	@ 0x44
 8003170:	4299      	cmp	r1, r3
 8003172:	d002      	beq.n	800317a <__sflush_r+0x96>
 8003174:	0028      	movs	r0, r5
 8003176:	f7ff fca9 	bl	8002acc <_free_r>
 800317a:	2300      	movs	r3, #0
 800317c:	6363      	str	r3, [r4, #52]	@ 0x34
 800317e:	e00d      	b.n	800319c <__sflush_r+0xb8>
 8003180:	2301      	movs	r3, #1
 8003182:	0028      	movs	r0, r5
 8003184:	47b8      	blx	r7
 8003186:	0002      	movs	r2, r0
 8003188:	1c43      	adds	r3, r0, #1
 800318a:	d1c6      	bne.n	800311a <__sflush_r+0x36>
 800318c:	682b      	ldr	r3, [r5, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0c3      	beq.n	800311a <__sflush_r+0x36>
 8003192:	2b1d      	cmp	r3, #29
 8003194:	d001      	beq.n	800319a <__sflush_r+0xb6>
 8003196:	2b16      	cmp	r3, #22
 8003198:	d11a      	bne.n	80031d0 <__sflush_r+0xec>
 800319a:	602e      	str	r6, [r5, #0]
 800319c:	2000      	movs	r0, #0
 800319e:	e01e      	b.n	80031de <__sflush_r+0xfa>
 80031a0:	690e      	ldr	r6, [r1, #16]
 80031a2:	2e00      	cmp	r6, #0
 80031a4:	d0fa      	beq.n	800319c <__sflush_r+0xb8>
 80031a6:	680f      	ldr	r7, [r1, #0]
 80031a8:	600e      	str	r6, [r1, #0]
 80031aa:	1bba      	subs	r2, r7, r6
 80031ac:	9201      	str	r2, [sp, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	079b      	lsls	r3, r3, #30
 80031b2:	d100      	bne.n	80031b6 <__sflush_r+0xd2>
 80031b4:	694a      	ldr	r2, [r1, #20]
 80031b6:	60a2      	str	r2, [r4, #8]
 80031b8:	9b01      	ldr	r3, [sp, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	ddee      	ble.n	800319c <__sflush_r+0xb8>
 80031be:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80031c0:	0032      	movs	r2, r6
 80031c2:	001f      	movs	r7, r3
 80031c4:	0028      	movs	r0, r5
 80031c6:	9b01      	ldr	r3, [sp, #4]
 80031c8:	6a21      	ldr	r1, [r4, #32]
 80031ca:	47b8      	blx	r7
 80031cc:	2800      	cmp	r0, #0
 80031ce:	dc07      	bgt.n	80031e0 <__sflush_r+0xfc>
 80031d0:	89a2      	ldrh	r2, [r4, #12]
 80031d2:	2340      	movs	r3, #64	@ 0x40
 80031d4:	2001      	movs	r0, #1
 80031d6:	4313      	orrs	r3, r2
 80031d8:	b21b      	sxth	r3, r3
 80031da:	81a3      	strh	r3, [r4, #12]
 80031dc:	4240      	negs	r0, r0
 80031de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80031e0:	9b01      	ldr	r3, [sp, #4]
 80031e2:	1836      	adds	r6, r6, r0
 80031e4:	1a1b      	subs	r3, r3, r0
 80031e6:	9301      	str	r3, [sp, #4]
 80031e8:	e7e6      	b.n	80031b8 <__sflush_r+0xd4>
 80031ea:	46c0      	nop			@ (mov r8, r8)
 80031ec:	dfbffffe 	.word	0xdfbffffe

080031f0 <_fflush_r>:
 80031f0:	690b      	ldr	r3, [r1, #16]
 80031f2:	b570      	push	{r4, r5, r6, lr}
 80031f4:	0005      	movs	r5, r0
 80031f6:	000c      	movs	r4, r1
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d102      	bne.n	8003202 <_fflush_r+0x12>
 80031fc:	2500      	movs	r5, #0
 80031fe:	0028      	movs	r0, r5
 8003200:	bd70      	pop	{r4, r5, r6, pc}
 8003202:	2800      	cmp	r0, #0
 8003204:	d004      	beq.n	8003210 <_fflush_r+0x20>
 8003206:	6a03      	ldr	r3, [r0, #32]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <_fflush_r+0x20>
 800320c:	f7ff fa38 	bl	8002680 <__sinit>
 8003210:	220c      	movs	r2, #12
 8003212:	5ea3      	ldrsh	r3, [r4, r2]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0f1      	beq.n	80031fc <_fflush_r+0xc>
 8003218:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800321a:	07d2      	lsls	r2, r2, #31
 800321c:	d404      	bmi.n	8003228 <_fflush_r+0x38>
 800321e:	059b      	lsls	r3, r3, #22
 8003220:	d402      	bmi.n	8003228 <_fflush_r+0x38>
 8003222:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003224:	f7ff fc4f 	bl	8002ac6 <__retarget_lock_acquire_recursive>
 8003228:	0028      	movs	r0, r5
 800322a:	0021      	movs	r1, r4
 800322c:	f7ff ff5a 	bl	80030e4 <__sflush_r>
 8003230:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003232:	0005      	movs	r5, r0
 8003234:	07db      	lsls	r3, r3, #31
 8003236:	d4e2      	bmi.n	80031fe <_fflush_r+0xe>
 8003238:	89a3      	ldrh	r3, [r4, #12]
 800323a:	059b      	lsls	r3, r3, #22
 800323c:	d4df      	bmi.n	80031fe <_fflush_r+0xe>
 800323e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003240:	f7ff fc42 	bl	8002ac8 <__retarget_lock_release_recursive>
 8003244:	e7db      	b.n	80031fe <_fflush_r+0xe>
	...

08003248 <__swhatbuf_r>:
 8003248:	b570      	push	{r4, r5, r6, lr}
 800324a:	000e      	movs	r6, r1
 800324c:	001d      	movs	r5, r3
 800324e:	230e      	movs	r3, #14
 8003250:	5ec9      	ldrsh	r1, [r1, r3]
 8003252:	0014      	movs	r4, r2
 8003254:	b096      	sub	sp, #88	@ 0x58
 8003256:	2900      	cmp	r1, #0
 8003258:	da0c      	bge.n	8003274 <__swhatbuf_r+0x2c>
 800325a:	89b2      	ldrh	r2, [r6, #12]
 800325c:	2380      	movs	r3, #128	@ 0x80
 800325e:	0011      	movs	r1, r2
 8003260:	4019      	ands	r1, r3
 8003262:	421a      	tst	r2, r3
 8003264:	d114      	bne.n	8003290 <__swhatbuf_r+0x48>
 8003266:	2380      	movs	r3, #128	@ 0x80
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	2000      	movs	r0, #0
 800326c:	6029      	str	r1, [r5, #0]
 800326e:	6023      	str	r3, [r4, #0]
 8003270:	b016      	add	sp, #88	@ 0x58
 8003272:	bd70      	pop	{r4, r5, r6, pc}
 8003274:	466a      	mov	r2, sp
 8003276:	f000 f853 	bl	8003320 <_fstat_r>
 800327a:	2800      	cmp	r0, #0
 800327c:	dbed      	blt.n	800325a <__swhatbuf_r+0x12>
 800327e:	23f0      	movs	r3, #240	@ 0xf0
 8003280:	9901      	ldr	r1, [sp, #4]
 8003282:	021b      	lsls	r3, r3, #8
 8003284:	4019      	ands	r1, r3
 8003286:	4b04      	ldr	r3, [pc, #16]	@ (8003298 <__swhatbuf_r+0x50>)
 8003288:	18c9      	adds	r1, r1, r3
 800328a:	424b      	negs	r3, r1
 800328c:	4159      	adcs	r1, r3
 800328e:	e7ea      	b.n	8003266 <__swhatbuf_r+0x1e>
 8003290:	2100      	movs	r1, #0
 8003292:	2340      	movs	r3, #64	@ 0x40
 8003294:	e7e9      	b.n	800326a <__swhatbuf_r+0x22>
 8003296:	46c0      	nop			@ (mov r8, r8)
 8003298:	ffffe000 	.word	0xffffe000

0800329c <__smakebuf_r>:
 800329c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800329e:	2602      	movs	r6, #2
 80032a0:	898b      	ldrh	r3, [r1, #12]
 80032a2:	0005      	movs	r5, r0
 80032a4:	000c      	movs	r4, r1
 80032a6:	b085      	sub	sp, #20
 80032a8:	4233      	tst	r3, r6
 80032aa:	d007      	beq.n	80032bc <__smakebuf_r+0x20>
 80032ac:	0023      	movs	r3, r4
 80032ae:	3347      	adds	r3, #71	@ 0x47
 80032b0:	6023      	str	r3, [r4, #0]
 80032b2:	6123      	str	r3, [r4, #16]
 80032b4:	2301      	movs	r3, #1
 80032b6:	6163      	str	r3, [r4, #20]
 80032b8:	b005      	add	sp, #20
 80032ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032bc:	ab03      	add	r3, sp, #12
 80032be:	aa02      	add	r2, sp, #8
 80032c0:	f7ff ffc2 	bl	8003248 <__swhatbuf_r>
 80032c4:	9f02      	ldr	r7, [sp, #8]
 80032c6:	9001      	str	r0, [sp, #4]
 80032c8:	0039      	movs	r1, r7
 80032ca:	0028      	movs	r0, r5
 80032cc:	f7ff f8b8 	bl	8002440 <_malloc_r>
 80032d0:	2800      	cmp	r0, #0
 80032d2:	d108      	bne.n	80032e6 <__smakebuf_r+0x4a>
 80032d4:	220c      	movs	r2, #12
 80032d6:	5ea3      	ldrsh	r3, [r4, r2]
 80032d8:	059a      	lsls	r2, r3, #22
 80032da:	d4ed      	bmi.n	80032b8 <__smakebuf_r+0x1c>
 80032dc:	2203      	movs	r2, #3
 80032de:	4393      	bics	r3, r2
 80032e0:	431e      	orrs	r6, r3
 80032e2:	81a6      	strh	r6, [r4, #12]
 80032e4:	e7e2      	b.n	80032ac <__smakebuf_r+0x10>
 80032e6:	2380      	movs	r3, #128	@ 0x80
 80032e8:	89a2      	ldrh	r2, [r4, #12]
 80032ea:	6020      	str	r0, [r4, #0]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	81a3      	strh	r3, [r4, #12]
 80032f0:	9b03      	ldr	r3, [sp, #12]
 80032f2:	6120      	str	r0, [r4, #16]
 80032f4:	6167      	str	r7, [r4, #20]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00c      	beq.n	8003314 <__smakebuf_r+0x78>
 80032fa:	0028      	movs	r0, r5
 80032fc:	230e      	movs	r3, #14
 80032fe:	5ee1      	ldrsh	r1, [r4, r3]
 8003300:	f000 f820 	bl	8003344 <_isatty_r>
 8003304:	2800      	cmp	r0, #0
 8003306:	d005      	beq.n	8003314 <__smakebuf_r+0x78>
 8003308:	2303      	movs	r3, #3
 800330a:	89a2      	ldrh	r2, [r4, #12]
 800330c:	439a      	bics	r2, r3
 800330e:	3b02      	subs	r3, #2
 8003310:	4313      	orrs	r3, r2
 8003312:	81a3      	strh	r3, [r4, #12]
 8003314:	89a3      	ldrh	r3, [r4, #12]
 8003316:	9a01      	ldr	r2, [sp, #4]
 8003318:	4313      	orrs	r3, r2
 800331a:	81a3      	strh	r3, [r4, #12]
 800331c:	e7cc      	b.n	80032b8 <__smakebuf_r+0x1c>
	...

08003320 <_fstat_r>:
 8003320:	2300      	movs	r3, #0
 8003322:	b570      	push	{r4, r5, r6, lr}
 8003324:	4d06      	ldr	r5, [pc, #24]	@ (8003340 <_fstat_r+0x20>)
 8003326:	0004      	movs	r4, r0
 8003328:	0008      	movs	r0, r1
 800332a:	0011      	movs	r1, r2
 800332c:	602b      	str	r3, [r5, #0]
 800332e:	f7fd f942 	bl	80005b6 <_fstat>
 8003332:	1c43      	adds	r3, r0, #1
 8003334:	d103      	bne.n	800333e <_fstat_r+0x1e>
 8003336:	682b      	ldr	r3, [r5, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d000      	beq.n	800333e <_fstat_r+0x1e>
 800333c:	6023      	str	r3, [r4, #0]
 800333e:	bd70      	pop	{r4, r5, r6, pc}
 8003340:	20000344 	.word	0x20000344

08003344 <_isatty_r>:
 8003344:	2300      	movs	r3, #0
 8003346:	b570      	push	{r4, r5, r6, lr}
 8003348:	4d06      	ldr	r5, [pc, #24]	@ (8003364 <_isatty_r+0x20>)
 800334a:	0004      	movs	r4, r0
 800334c:	0008      	movs	r0, r1
 800334e:	602b      	str	r3, [r5, #0]
 8003350:	f7fd f936 	bl	80005c0 <_isatty>
 8003354:	1c43      	adds	r3, r0, #1
 8003356:	d103      	bne.n	8003360 <_isatty_r+0x1c>
 8003358:	682b      	ldr	r3, [r5, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d000      	beq.n	8003360 <_isatty_r+0x1c>
 800335e:	6023      	str	r3, [r4, #0]
 8003360:	bd70      	pop	{r4, r5, r6, pc}
 8003362:	46c0      	nop			@ (mov r8, r8)
 8003364:	20000344 	.word	0x20000344

08003368 <memchr>:
 8003368:	b2c9      	uxtb	r1, r1
 800336a:	1882      	adds	r2, r0, r2
 800336c:	4290      	cmp	r0, r2
 800336e:	d101      	bne.n	8003374 <memchr+0xc>
 8003370:	2000      	movs	r0, #0
 8003372:	4770      	bx	lr
 8003374:	7803      	ldrb	r3, [r0, #0]
 8003376:	428b      	cmp	r3, r1
 8003378:	d0fb      	beq.n	8003372 <memchr+0xa>
 800337a:	3001      	adds	r0, #1
 800337c:	e7f6      	b.n	800336c <memchr+0x4>
	...

08003380 <_init>:
 8003380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003382:	46c0      	nop			@ (mov r8, r8)
 8003384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003386:	bc08      	pop	{r3}
 8003388:	469e      	mov	lr, r3
 800338a:	4770      	bx	lr

0800338c <_fini>:
 800338c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800338e:	46c0      	nop			@ (mov r8, r8)
 8003390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003392:	bc08      	pop	{r3}
 8003394:	469e      	mov	lr, r3
 8003396:	4770      	bx	lr
