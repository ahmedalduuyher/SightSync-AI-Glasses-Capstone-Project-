
capstone_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004090  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000868  08004150  08004150  00005150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049b8  080049b8  00006070  2**0
                  CONTENTS
  4 .ARM          00000000  080049b8  080049b8  00006070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049b8  080049b8  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049b8  080049b8  000059b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080049bc  080049bc  000059bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080049c0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  20000070  08004a30  00006070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d8  08004a30  000062d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b53f  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026b5  00000000  00000000  000115d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  00013c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000090d  00000000  00000000  00014890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a33f  00000000  00000000  0001519d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ddc  00000000  00000000  0002f4dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cff7  00000000  00000000  000412b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ce2af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030ac  00000000  00000000  000ce2f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000d13a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004138 	.word	0x08004138

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004138 	.word	0x08004138

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000238:	f001 fafc 	bl	8001834 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023c:	f000 f80c 	bl	8000258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000240:	f000 f8fe 	bl	8000440 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000244:	f000 f866 	bl	8000314 <MX_I2C1_Init>
  MX_USART1_Init();
 8000248:	f000 f8cc 	bl	80003e4 <MX_USART1_Init>
  MX_I2S1_Init();
 800024c:	f000 f8a2 	bl	8000394 <MX_I2S1_Init>
  /* USER CODE BEGIN 2 */

  OLED_0in96_test();		//	IIC must USE_IIC_SOFT
 8000250:	f000 fd00 	bl	8000c54 <OLED_0in96_test>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000254:	46c0      	nop			@ (mov r8, r8)
 8000256:	e7fd      	b.n	8000254 <main+0x20>

08000258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000258:	b590      	push	{r4, r7, lr}
 800025a:	b099      	sub	sp, #100	@ 0x64
 800025c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025e:	242c      	movs	r4, #44	@ 0x2c
 8000260:	193b      	adds	r3, r7, r4
 8000262:	0018      	movs	r0, r3
 8000264:	2334      	movs	r3, #52	@ 0x34
 8000266:	001a      	movs	r2, r3
 8000268:	2100      	movs	r1, #0
 800026a:	f003 fa75 	bl	8003758 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026e:	231c      	movs	r3, #28
 8000270:	18fb      	adds	r3, r7, r3
 8000272:	0018      	movs	r0, r3
 8000274:	2310      	movs	r3, #16
 8000276:	001a      	movs	r2, r3
 8000278:	2100      	movs	r1, #0
 800027a:	f003 fa6d 	bl	8003758 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	0018      	movs	r0, r3
 8000282:	2318      	movs	r3, #24
 8000284:	001a      	movs	r2, r3
 8000286:	2100      	movs	r1, #0
 8000288:	f003 fa66 	bl	8003758 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800028c:	0021      	movs	r1, r4
 800028e:	187b      	adds	r3, r7, r1
 8000290:	2222      	movs	r2, #34	@ 0x22
 8000292:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000294:	187b      	adds	r3, r7, r1
 8000296:	2201      	movs	r2, #1
 8000298:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800029a:	187b      	adds	r3, r7, r1
 800029c:	2201      	movs	r2, #1
 800029e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a0:	187b      	adds	r3, r7, r1
 80002a2:	2210      	movs	r2, #16
 80002a4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002a6:	187b      	adds	r3, r7, r1
 80002a8:	2200      	movs	r2, #0
 80002aa:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ac:	187b      	adds	r3, r7, r1
 80002ae:	0018      	movs	r0, r3
 80002b0:	f001 ffbc 	bl	800222c <HAL_RCC_OscConfig>
 80002b4:	1e03      	subs	r3, r0, #0
 80002b6:	d001      	beq.n	80002bc <SystemClock_Config+0x64>
  {
    Error_Handler();
 80002b8:	f000 f94e 	bl	8000558 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002bc:	211c      	movs	r1, #28
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	2207      	movs	r2, #7
 80002c2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80002c4:	187b      	adds	r3, r7, r1
 80002c6:	2203      	movs	r2, #3
 80002c8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	2200      	movs	r2, #0
 80002ce:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	2200      	movs	r2, #0
 80002d4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	2101      	movs	r1, #1
 80002da:	0018      	movs	r0, r3
 80002dc:	f002 fb2c 	bl	8002938 <HAL_RCC_ClockConfig>
 80002e0:	1e03      	subs	r3, r0, #0
 80002e2:	d001      	beq.n	80002e8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80002e4:	f000 f938 	bl	8000558 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	2221      	movs	r2, #33	@ 0x21
 80002ec:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	2200      	movs	r2, #0
 80002f2:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002f4:	1d3b      	adds	r3, r7, #4
 80002f6:	2200      	movs	r2, #0
 80002f8:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	0018      	movs	r0, r3
 80002fe:	f002 fc87 	bl	8002c10 <HAL_RCCEx_PeriphCLKConfig>
 8000302:	1e03      	subs	r3, r0, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000306:	f000 f927 	bl	8000558 <Error_Handler>
  }
}
 800030a:	46c0      	nop			@ (mov r8, r8)
 800030c:	46bd      	mov	sp, r7
 800030e:	b019      	add	sp, #100	@ 0x64
 8000310:	bd90      	pop	{r4, r7, pc}
	...

08000314 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000318:	4b1b      	ldr	r3, [pc, #108]	@ (8000388 <MX_I2C1_Init+0x74>)
 800031a:	4a1c      	ldr	r2, [pc, #112]	@ (800038c <MX_I2C1_Init+0x78>)
 800031c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 800031e:	4b1a      	ldr	r3, [pc, #104]	@ (8000388 <MX_I2C1_Init+0x74>)
 8000320:	4a1b      	ldr	r2, [pc, #108]	@ (8000390 <MX_I2C1_Init+0x7c>)
 8000322:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000324:	4b18      	ldr	r3, [pc, #96]	@ (8000388 <MX_I2C1_Init+0x74>)
 8000326:	2200      	movs	r2, #0
 8000328:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800032a:	4b17      	ldr	r3, [pc, #92]	@ (8000388 <MX_I2C1_Init+0x74>)
 800032c:	2201      	movs	r2, #1
 800032e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000330:	4b15      	ldr	r3, [pc, #84]	@ (8000388 <MX_I2C1_Init+0x74>)
 8000332:	2200      	movs	r2, #0
 8000334:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000336:	4b14      	ldr	r3, [pc, #80]	@ (8000388 <MX_I2C1_Init+0x74>)
 8000338:	2200      	movs	r2, #0
 800033a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800033c:	4b12      	ldr	r3, [pc, #72]	@ (8000388 <MX_I2C1_Init+0x74>)
 800033e:	2200      	movs	r2, #0
 8000340:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000342:	4b11      	ldr	r3, [pc, #68]	@ (8000388 <MX_I2C1_Init+0x74>)
 8000344:	2200      	movs	r2, #0
 8000346:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000348:	4b0f      	ldr	r3, [pc, #60]	@ (8000388 <MX_I2C1_Init+0x74>)
 800034a:	2200      	movs	r2, #0
 800034c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800034e:	4b0e      	ldr	r3, [pc, #56]	@ (8000388 <MX_I2C1_Init+0x74>)
 8000350:	0018      	movs	r0, r3
 8000352:	f001 fd4d 	bl	8001df0 <HAL_I2C_Init>
 8000356:	1e03      	subs	r3, r0, #0
 8000358:	d001      	beq.n	800035e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800035a:	f000 f8fd 	bl	8000558 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800035e:	4b0a      	ldr	r3, [pc, #40]	@ (8000388 <MX_I2C1_Init+0x74>)
 8000360:	2100      	movs	r1, #0
 8000362:	0018      	movs	r0, r3
 8000364:	f001 fdea 	bl	8001f3c <HAL_I2CEx_ConfigAnalogFilter>
 8000368:	1e03      	subs	r3, r0, #0
 800036a:	d001      	beq.n	8000370 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800036c:	f000 f8f4 	bl	8000558 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000370:	4b05      	ldr	r3, [pc, #20]	@ (8000388 <MX_I2C1_Init+0x74>)
 8000372:	2100      	movs	r1, #0
 8000374:	0018      	movs	r0, r3
 8000376:	f001 fe2d 	bl	8001fd4 <HAL_I2CEx_ConfigDigitalFilter>
 800037a:	1e03      	subs	r3, r0, #0
 800037c:	d001      	beq.n	8000382 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800037e:	f000 f8eb 	bl	8000558 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000382:	46c0      	nop			@ (mov r8, r8)
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	2000008c 	.word	0x2000008c
 800038c:	40005400 	.word	0x40005400
 8000390:	00201d2b 	.word	0x00201d2b

08000394 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000398:	4b10      	ldr	r3, [pc, #64]	@ (80003dc <MX_I2S1_Init+0x48>)
 800039a:	4a11      	ldr	r2, [pc, #68]	@ (80003e0 <MX_I2S1_Init+0x4c>)
 800039c:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_SLAVE_TX;
 800039e:	4b0f      	ldr	r3, [pc, #60]	@ (80003dc <MX_I2S1_Init+0x48>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 80003a4:	4b0d      	ldr	r3, [pc, #52]	@ (80003dc <MX_I2S1_Init+0x48>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 80003aa:	4b0c      	ldr	r3, [pc, #48]	@ (80003dc <MX_I2S1_Init+0x48>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80003b0:	4b0a      	ldr	r3, [pc, #40]	@ (80003dc <MX_I2S1_Init+0x48>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80003b6:	4b09      	ldr	r3, [pc, #36]	@ (80003dc <MX_I2S1_Init+0x48>)
 80003b8:	22fa      	movs	r2, #250	@ 0xfa
 80003ba:	0152      	lsls	r2, r2, #5
 80003bc:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 80003be:	4b07      	ldr	r3, [pc, #28]	@ (80003dc <MX_I2S1_Init+0x48>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 80003c4:	4b05      	ldr	r3, [pc, #20]	@ (80003dc <MX_I2S1_Init+0x48>)
 80003c6:	0018      	movs	r0, r3
 80003c8:	f001 fe50 	bl	800206c <HAL_I2S_Init>
 80003cc:	1e03      	subs	r3, r0, #0
 80003ce:	d001      	beq.n	80003d4 <MX_I2S1_Init+0x40>
  {
    Error_Handler();
 80003d0:	f000 f8c2 	bl	8000558 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 80003d4:	46c0      	nop			@ (mov r8, r8)
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	46c0      	nop			@ (mov r8, r8)
 80003dc:	200000e0 	.word	0x200000e0
 80003e0:	40013000 	.word	0x40013000

080003e4 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 80003e8:	4b13      	ldr	r3, [pc, #76]	@ (8000438 <MX_USART1_Init+0x54>)
 80003ea:	4a14      	ldr	r2, [pc, #80]	@ (800043c <MX_USART1_Init+0x58>)
 80003ec:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 38400;
 80003ee:	4b12      	ldr	r3, [pc, #72]	@ (8000438 <MX_USART1_Init+0x54>)
 80003f0:	2296      	movs	r2, #150	@ 0x96
 80003f2:	0212      	lsls	r2, r2, #8
 80003f4:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 80003f6:	4b10      	ldr	r3, [pc, #64]	@ (8000438 <MX_USART1_Init+0x54>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 80003fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000438 <MX_USART1_Init+0x54>)
 80003fe:	2200      	movs	r2, #0
 8000400:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8000402:	4b0d      	ldr	r3, [pc, #52]	@ (8000438 <MX_USART1_Init+0x54>)
 8000404:	2200      	movs	r2, #0
 8000406:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8000408:	4b0b      	ldr	r3, [pc, #44]	@ (8000438 <MX_USART1_Init+0x54>)
 800040a:	220c      	movs	r2, #12
 800040c:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 800040e:	4b0a      	ldr	r3, [pc, #40]	@ (8000438 <MX_USART1_Init+0x54>)
 8000410:	2200      	movs	r2, #0
 8000412:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8000414:	4b08      	ldr	r3, [pc, #32]	@ (8000438 <MX_USART1_Init+0x54>)
 8000416:	2200      	movs	r2, #0
 8000418:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800041a:	4b07      	ldr	r3, [pc, #28]	@ (8000438 <MX_USART1_Init+0x54>)
 800041c:	2200      	movs	r2, #0
 800041e:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8000420:	4b05      	ldr	r3, [pc, #20]	@ (8000438 <MX_USART1_Init+0x54>)
 8000422:	0018      	movs	r0, r3
 8000424:	f002 fce2 	bl	8002dec <HAL_USART_Init>
 8000428:	1e03      	subs	r3, r0, #0
 800042a:	d001      	beq.n	8000430 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 800042c:	f000 f894 	bl	8000558 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000430:	46c0      	nop			@ (mov r8, r8)
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	2000011c 	.word	0x2000011c
 800043c:	40013800 	.word	0x40013800

08000440 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000440:	b590      	push	{r4, r7, lr}
 8000442:	b089      	sub	sp, #36	@ 0x24
 8000444:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000446:	240c      	movs	r4, #12
 8000448:	193b      	adds	r3, r7, r4
 800044a:	0018      	movs	r0, r3
 800044c:	2314      	movs	r3, #20
 800044e:	001a      	movs	r2, r3
 8000450:	2100      	movs	r1, #0
 8000452:	f003 f981 	bl	8003758 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000456:	4b3d      	ldr	r3, [pc, #244]	@ (800054c <MX_GPIO_Init+0x10c>)
 8000458:	695a      	ldr	r2, [r3, #20]
 800045a:	4b3c      	ldr	r3, [pc, #240]	@ (800054c <MX_GPIO_Init+0x10c>)
 800045c:	2180      	movs	r1, #128	@ 0x80
 800045e:	03c9      	lsls	r1, r1, #15
 8000460:	430a      	orrs	r2, r1
 8000462:	615a      	str	r2, [r3, #20]
 8000464:	4b39      	ldr	r3, [pc, #228]	@ (800054c <MX_GPIO_Init+0x10c>)
 8000466:	695a      	ldr	r2, [r3, #20]
 8000468:	2380      	movs	r3, #128	@ 0x80
 800046a:	03db      	lsls	r3, r3, #15
 800046c:	4013      	ands	r3, r2
 800046e:	60bb      	str	r3, [r7, #8]
 8000470:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000472:	4b36      	ldr	r3, [pc, #216]	@ (800054c <MX_GPIO_Init+0x10c>)
 8000474:	695a      	ldr	r2, [r3, #20]
 8000476:	4b35      	ldr	r3, [pc, #212]	@ (800054c <MX_GPIO_Init+0x10c>)
 8000478:	2180      	movs	r1, #128	@ 0x80
 800047a:	0289      	lsls	r1, r1, #10
 800047c:	430a      	orrs	r2, r1
 800047e:	615a      	str	r2, [r3, #20]
 8000480:	4b32      	ldr	r3, [pc, #200]	@ (800054c <MX_GPIO_Init+0x10c>)
 8000482:	695a      	ldr	r2, [r3, #20]
 8000484:	2380      	movs	r3, #128	@ 0x80
 8000486:	029b      	lsls	r3, r3, #10
 8000488:	4013      	ands	r3, r2
 800048a:	607b      	str	r3, [r7, #4]
 800048c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800048e:	4b2f      	ldr	r3, [pc, #188]	@ (800054c <MX_GPIO_Init+0x10c>)
 8000490:	695a      	ldr	r2, [r3, #20]
 8000492:	4b2e      	ldr	r3, [pc, #184]	@ (800054c <MX_GPIO_Init+0x10c>)
 8000494:	2180      	movs	r1, #128	@ 0x80
 8000496:	02c9      	lsls	r1, r1, #11
 8000498:	430a      	orrs	r2, r1
 800049a:	615a      	str	r2, [r3, #20]
 800049c:	4b2b      	ldr	r3, [pc, #172]	@ (800054c <MX_GPIO_Init+0x10c>)
 800049e:	695a      	ldr	r2, [r3, #20]
 80004a0:	2380      	movs	r3, #128	@ 0x80
 80004a2:	02db      	lsls	r3, r3, #11
 80004a4:	4013      	ands	r3, r2
 80004a6:	603b      	str	r3, [r7, #0]
 80004a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 80004aa:	4b29      	ldr	r3, [pc, #164]	@ (8000550 <MX_GPIO_Init+0x110>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	2102      	movs	r1, #2
 80004b0:	0018      	movs	r0, r3
 80004b2:	f001 fc80 	bl	8001db6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_DC_Pin|OLED_RST_Pin|OLED_CS_Pin|IIC_SCL_SOFT_Pin, GPIO_PIN_RESET);
 80004b6:	4b27      	ldr	r3, [pc, #156]	@ (8000554 <MX_GPIO_Init+0x114>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	211b      	movs	r1, #27
 80004bc:	0018      	movs	r0, r3
 80004be:	f001 fc7a 	bl	8001db6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IIC_SDA_SOFT_GPIO_Port, IIC_SDA_SOFT_Pin, GPIO_PIN_RESET);
 80004c2:	2380      	movs	r3, #128	@ 0x80
 80004c4:	0119      	lsls	r1, r3, #4
 80004c6:	2390      	movs	r3, #144	@ 0x90
 80004c8:	05db      	lsls	r3, r3, #23
 80004ca:	2200      	movs	r2, #0
 80004cc:	0018      	movs	r0, r3
 80004ce:	f001 fc72 	bl	8001db6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80004d2:	193b      	adds	r3, r7, r4
 80004d4:	2202      	movs	r2, #2
 80004d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d8:	193b      	adds	r3, r7, r4
 80004da:	2201      	movs	r2, #1
 80004dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004de:	193b      	adds	r3, r7, r4
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e4:	193b      	adds	r3, r7, r4
 80004e6:	2200      	movs	r2, #0
 80004e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80004ea:	193b      	adds	r3, r7, r4
 80004ec:	4a18      	ldr	r2, [pc, #96]	@ (8000550 <MX_GPIO_Init+0x110>)
 80004ee:	0019      	movs	r1, r3
 80004f0:	0010      	movs	r0, r2
 80004f2:	f001 fadb 	bl	8001aac <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_DC_Pin OLED_RST_Pin OLED_CS_Pin IIC_SCL_SOFT_Pin */
  GPIO_InitStruct.Pin = OLED_DC_Pin|OLED_RST_Pin|OLED_CS_Pin|IIC_SCL_SOFT_Pin;
 80004f6:	193b      	adds	r3, r7, r4
 80004f8:	221b      	movs	r2, #27
 80004fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fc:	193b      	adds	r3, r7, r4
 80004fe:	2201      	movs	r2, #1
 8000500:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000502:	193b      	adds	r3, r7, r4
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000508:	193b      	adds	r3, r7, r4
 800050a:	2200      	movs	r2, #0
 800050c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800050e:	193b      	adds	r3, r7, r4
 8000510:	4a10      	ldr	r2, [pc, #64]	@ (8000554 <MX_GPIO_Init+0x114>)
 8000512:	0019      	movs	r1, r3
 8000514:	0010      	movs	r0, r2
 8000516:	f001 fac9 	bl	8001aac <HAL_GPIO_Init>

  /*Configure GPIO pin : IIC_SDA_SOFT_Pin */
  GPIO_InitStruct.Pin = IIC_SDA_SOFT_Pin;
 800051a:	0021      	movs	r1, r4
 800051c:	187b      	adds	r3, r7, r1
 800051e:	2280      	movs	r2, #128	@ 0x80
 8000520:	0112      	lsls	r2, r2, #4
 8000522:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2201      	movs	r2, #1
 8000528:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052a:	187b      	adds	r3, r7, r1
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000530:	187b      	adds	r3, r7, r1
 8000532:	2200      	movs	r2, #0
 8000534:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(IIC_SDA_SOFT_GPIO_Port, &GPIO_InitStruct);
 8000536:	187a      	adds	r2, r7, r1
 8000538:	2390      	movs	r3, #144	@ 0x90
 800053a:	05db      	lsls	r3, r3, #23
 800053c:	0011      	movs	r1, r2
 800053e:	0018      	movs	r0, r3
 8000540:	f001 fab4 	bl	8001aac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000544:	46c0      	nop			@ (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	b009      	add	sp, #36	@ 0x24
 800054a:	bd90      	pop	{r4, r7, pc}
 800054c:	40021000 	.word	0x40021000
 8000550:	48001400 	.word	0x48001400
 8000554:	48000400 	.word	0x48000400

08000558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800055c:	b672      	cpsid	i
}
 800055e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000560:	46c0      	nop			@ (mov r8, r8)
 8000562:	e7fd      	b.n	8000560 <Error_Handler+0x8>

08000564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800056a:	4b0f      	ldr	r3, [pc, #60]	@ (80005a8 <HAL_MspInit+0x44>)
 800056c:	699a      	ldr	r2, [r3, #24]
 800056e:	4b0e      	ldr	r3, [pc, #56]	@ (80005a8 <HAL_MspInit+0x44>)
 8000570:	2101      	movs	r1, #1
 8000572:	430a      	orrs	r2, r1
 8000574:	619a      	str	r2, [r3, #24]
 8000576:	4b0c      	ldr	r3, [pc, #48]	@ (80005a8 <HAL_MspInit+0x44>)
 8000578:	699b      	ldr	r3, [r3, #24]
 800057a:	2201      	movs	r2, #1
 800057c:	4013      	ands	r3, r2
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000582:	4b09      	ldr	r3, [pc, #36]	@ (80005a8 <HAL_MspInit+0x44>)
 8000584:	69da      	ldr	r2, [r3, #28]
 8000586:	4b08      	ldr	r3, [pc, #32]	@ (80005a8 <HAL_MspInit+0x44>)
 8000588:	2180      	movs	r1, #128	@ 0x80
 800058a:	0549      	lsls	r1, r1, #21
 800058c:	430a      	orrs	r2, r1
 800058e:	61da      	str	r2, [r3, #28]
 8000590:	4b05      	ldr	r3, [pc, #20]	@ (80005a8 <HAL_MspInit+0x44>)
 8000592:	69da      	ldr	r2, [r3, #28]
 8000594:	2380      	movs	r3, #128	@ 0x80
 8000596:	055b      	lsls	r3, r3, #21
 8000598:	4013      	ands	r3, r2
 800059a:	603b      	str	r3, [r7, #0]
 800059c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800059e:	46c0      	nop			@ (mov r8, r8)
 80005a0:	46bd      	mov	sp, r7
 80005a2:	b002      	add	sp, #8
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	46c0      	nop			@ (mov r8, r8)
 80005a8:	40021000 	.word	0x40021000

080005ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005ac:	b590      	push	{r4, r7, lr}
 80005ae:	b08b      	sub	sp, #44	@ 0x2c
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b4:	2414      	movs	r4, #20
 80005b6:	193b      	adds	r3, r7, r4
 80005b8:	0018      	movs	r0, r3
 80005ba:	2314      	movs	r3, #20
 80005bc:	001a      	movs	r2, r3
 80005be:	2100      	movs	r1, #0
 80005c0:	f003 f8ca 	bl	8003758 <memset>
  if(hi2c->Instance==I2C1)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a1c      	ldr	r2, [pc, #112]	@ (800063c <HAL_I2C_MspInit+0x90>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d131      	bne.n	8000632 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000640 <HAL_I2C_MspInit+0x94>)
 80005d0:	695a      	ldr	r2, [r3, #20]
 80005d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000640 <HAL_I2C_MspInit+0x94>)
 80005d4:	2180      	movs	r1, #128	@ 0x80
 80005d6:	02c9      	lsls	r1, r1, #11
 80005d8:	430a      	orrs	r2, r1
 80005da:	615a      	str	r2, [r3, #20]
 80005dc:	4b18      	ldr	r3, [pc, #96]	@ (8000640 <HAL_I2C_MspInit+0x94>)
 80005de:	695a      	ldr	r2, [r3, #20]
 80005e0:	2380      	movs	r3, #128	@ 0x80
 80005e2:	02db      	lsls	r3, r3, #11
 80005e4:	4013      	ands	r3, r2
 80005e6:	613b      	str	r3, [r7, #16]
 80005e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005ea:	0021      	movs	r1, r4
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	22c0      	movs	r2, #192	@ 0xc0
 80005f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	2212      	movs	r2, #18
 80005f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2201      	movs	r2, #1
 80005fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	2203      	movs	r2, #3
 8000602:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000604:	187b      	adds	r3, r7, r1
 8000606:	2201      	movs	r2, #1
 8000608:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060a:	187b      	adds	r3, r7, r1
 800060c:	4a0d      	ldr	r2, [pc, #52]	@ (8000644 <HAL_I2C_MspInit+0x98>)
 800060e:	0019      	movs	r1, r3
 8000610:	0010      	movs	r0, r2
 8000612:	f001 fa4b 	bl	8001aac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000616:	4b0a      	ldr	r3, [pc, #40]	@ (8000640 <HAL_I2C_MspInit+0x94>)
 8000618:	69da      	ldr	r2, [r3, #28]
 800061a:	4b09      	ldr	r3, [pc, #36]	@ (8000640 <HAL_I2C_MspInit+0x94>)
 800061c:	2180      	movs	r1, #128	@ 0x80
 800061e:	0389      	lsls	r1, r1, #14
 8000620:	430a      	orrs	r2, r1
 8000622:	61da      	str	r2, [r3, #28]
 8000624:	4b06      	ldr	r3, [pc, #24]	@ (8000640 <HAL_I2C_MspInit+0x94>)
 8000626:	69da      	ldr	r2, [r3, #28]
 8000628:	2380      	movs	r3, #128	@ 0x80
 800062a:	039b      	lsls	r3, r3, #14
 800062c:	4013      	ands	r3, r2
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000632:	46c0      	nop			@ (mov r8, r8)
 8000634:	46bd      	mov	sp, r7
 8000636:	b00b      	add	sp, #44	@ 0x2c
 8000638:	bd90      	pop	{r4, r7, pc}
 800063a:	46c0      	nop			@ (mov r8, r8)
 800063c:	40005400 	.word	0x40005400
 8000640:	40021000 	.word	0x40021000
 8000644:	48000400 	.word	0x48000400

08000648 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b08b      	sub	sp, #44	@ 0x2c
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	2414      	movs	r4, #20
 8000652:	193b      	adds	r3, r7, r4
 8000654:	0018      	movs	r0, r3
 8000656:	2314      	movs	r3, #20
 8000658:	001a      	movs	r2, r3
 800065a:	2100      	movs	r1, #0
 800065c:	f003 f87c 	bl	8003758 <memset>
  if(hi2s->Instance==SPI1)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a1c      	ldr	r2, [pc, #112]	@ (80006d8 <HAL_I2S_MspInit+0x90>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d132      	bne.n	80006d0 <HAL_I2S_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800066a:	4b1c      	ldr	r3, [pc, #112]	@ (80006dc <HAL_I2S_MspInit+0x94>)
 800066c:	699a      	ldr	r2, [r3, #24]
 800066e:	4b1b      	ldr	r3, [pc, #108]	@ (80006dc <HAL_I2S_MspInit+0x94>)
 8000670:	2180      	movs	r1, #128	@ 0x80
 8000672:	0149      	lsls	r1, r1, #5
 8000674:	430a      	orrs	r2, r1
 8000676:	619a      	str	r2, [r3, #24]
 8000678:	4b18      	ldr	r3, [pc, #96]	@ (80006dc <HAL_I2S_MspInit+0x94>)
 800067a:	699a      	ldr	r2, [r3, #24]
 800067c:	2380      	movs	r3, #128	@ 0x80
 800067e:	015b      	lsls	r3, r3, #5
 8000680:	4013      	ands	r3, r2
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	4b15      	ldr	r3, [pc, #84]	@ (80006dc <HAL_I2S_MspInit+0x94>)
 8000688:	695a      	ldr	r2, [r3, #20]
 800068a:	4b14      	ldr	r3, [pc, #80]	@ (80006dc <HAL_I2S_MspInit+0x94>)
 800068c:	2180      	movs	r1, #128	@ 0x80
 800068e:	0289      	lsls	r1, r1, #10
 8000690:	430a      	orrs	r2, r1
 8000692:	615a      	str	r2, [r3, #20]
 8000694:	4b11      	ldr	r3, [pc, #68]	@ (80006dc <HAL_I2S_MspInit+0x94>)
 8000696:	695a      	ldr	r2, [r3, #20]
 8000698:	2380      	movs	r3, #128	@ 0x80
 800069a:	029b      	lsls	r3, r3, #10
 800069c:	4013      	ands	r3, r2
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 80006a2:	0021      	movs	r1, r4
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	22b0      	movs	r2, #176	@ 0xb0
 80006a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	2202      	movs	r2, #2
 80006ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	2200      	movs	r2, #0
 80006ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c2:	187a      	adds	r2, r7, r1
 80006c4:	2390      	movs	r3, #144	@ 0x90
 80006c6:	05db      	lsls	r3, r3, #23
 80006c8:	0011      	movs	r1, r2
 80006ca:	0018      	movs	r0, r3
 80006cc:	f001 f9ee 	bl	8001aac <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80006d0:	46c0      	nop			@ (mov r8, r8)
 80006d2:	46bd      	mov	sp, r7
 80006d4:	b00b      	add	sp, #44	@ 0x2c
 80006d6:	bd90      	pop	{r4, r7, pc}
 80006d8:	40013000 	.word	0x40013000
 80006dc:	40021000 	.word	0x40021000

080006e0 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80006e0:	b590      	push	{r4, r7, lr}
 80006e2:	b08b      	sub	sp, #44	@ 0x2c
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e8:	2414      	movs	r4, #20
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	0018      	movs	r0, r3
 80006ee:	2314      	movs	r3, #20
 80006f0:	001a      	movs	r2, r3
 80006f2:	2100      	movs	r1, #0
 80006f4:	f003 f830 	bl	8003758 <memset>
  if(husart->Instance==USART1)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a1d      	ldr	r2, [pc, #116]	@ (8000774 <HAL_USART_MspInit+0x94>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d133      	bne.n	800076a <HAL_USART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000702:	4b1d      	ldr	r3, [pc, #116]	@ (8000778 <HAL_USART_MspInit+0x98>)
 8000704:	699a      	ldr	r2, [r3, #24]
 8000706:	4b1c      	ldr	r3, [pc, #112]	@ (8000778 <HAL_USART_MspInit+0x98>)
 8000708:	2180      	movs	r1, #128	@ 0x80
 800070a:	01c9      	lsls	r1, r1, #7
 800070c:	430a      	orrs	r2, r1
 800070e:	619a      	str	r2, [r3, #24]
 8000710:	4b19      	ldr	r3, [pc, #100]	@ (8000778 <HAL_USART_MspInit+0x98>)
 8000712:	699a      	ldr	r2, [r3, #24]
 8000714:	2380      	movs	r3, #128	@ 0x80
 8000716:	01db      	lsls	r3, r3, #7
 8000718:	4013      	ands	r3, r2
 800071a:	613b      	str	r3, [r7, #16]
 800071c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	4b16      	ldr	r3, [pc, #88]	@ (8000778 <HAL_USART_MspInit+0x98>)
 8000720:	695a      	ldr	r2, [r3, #20]
 8000722:	4b15      	ldr	r3, [pc, #84]	@ (8000778 <HAL_USART_MspInit+0x98>)
 8000724:	2180      	movs	r1, #128	@ 0x80
 8000726:	0289      	lsls	r1, r1, #10
 8000728:	430a      	orrs	r2, r1
 800072a:	615a      	str	r2, [r3, #20]
 800072c:	4b12      	ldr	r3, [pc, #72]	@ (8000778 <HAL_USART_MspInit+0x98>)
 800072e:	695a      	ldr	r2, [r3, #20]
 8000730:	2380      	movs	r3, #128	@ 0x80
 8000732:	029b      	lsls	r3, r3, #10
 8000734:	4013      	ands	r3, r2
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800073a:	193b      	adds	r3, r7, r4
 800073c:	22e0      	movs	r2, #224	@ 0xe0
 800073e:	00d2      	lsls	r2, r2, #3
 8000740:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000742:	0021      	movs	r1, r4
 8000744:	187b      	adds	r3, r7, r1
 8000746:	2202      	movs	r2, #2
 8000748:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000750:	187b      	adds	r3, r7, r1
 8000752:	2203      	movs	r2, #3
 8000754:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000756:	187b      	adds	r3, r7, r1
 8000758:	2201      	movs	r2, #1
 800075a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075c:	187a      	adds	r2, r7, r1
 800075e:	2390      	movs	r3, #144	@ 0x90
 8000760:	05db      	lsls	r3, r3, #23
 8000762:	0011      	movs	r1, r2
 8000764:	0018      	movs	r0, r3
 8000766:	f001 f9a1 	bl	8001aac <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800076a:	46c0      	nop			@ (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	b00b      	add	sp, #44	@ 0x2c
 8000770:	bd90      	pop	{r4, r7, pc}
 8000772:	46c0      	nop			@ (mov r8, r8)
 8000774:	40013800 	.word	0x40013800
 8000778:	40021000 	.word	0x40021000

0800077c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000780:	46c0      	nop			@ (mov r8, r8)
 8000782:	e7fd      	b.n	8000780 <NMI_Handler+0x4>

08000784 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000788:	46c0      	nop			@ (mov r8, r8)
 800078a:	e7fd      	b.n	8000788 <HardFault_Handler+0x4>

0800078c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000790:	46c0      	nop			@ (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800079a:	46c0      	nop			@ (mov r8, r8)
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a4:	f001 f88e 	bl	80018c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a8:	46c0      	nop			@ (mov r8, r8)
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b086      	sub	sp, #24
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	60f8      	str	r0, [r7, #12]
 80007b6:	60b9      	str	r1, [r7, #8]
 80007b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
 80007be:	e00a      	b.n	80007d6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007c0:	e000      	b.n	80007c4 <_read+0x16>
 80007c2:	bf00      	nop
 80007c4:	0001      	movs	r1, r0
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	1c5a      	adds	r2, r3, #1
 80007ca:	60ba      	str	r2, [r7, #8]
 80007cc:	b2ca      	uxtb	r2, r1
 80007ce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	3301      	adds	r3, #1
 80007d4:	617b      	str	r3, [r7, #20]
 80007d6:	697a      	ldr	r2, [r7, #20]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	429a      	cmp	r2, r3
 80007dc:	dbf0      	blt.n	80007c0 <_read+0x12>
  }

  return len;
 80007de:	687b      	ldr	r3, [r7, #4]
}
 80007e0:	0018      	movs	r0, r3
 80007e2:	46bd      	mov	sp, r7
 80007e4:	b006      	add	sp, #24
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
 80007f8:	e009      	b.n	800080e <_write+0x26>
  {
    __io_putchar(*ptr++);
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	1c5a      	adds	r2, r3, #1
 80007fe:	60ba      	str	r2, [r7, #8]
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	0018      	movs	r0, r3
 8000804:	e000      	b.n	8000808 <_write+0x20>
 8000806:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	3301      	adds	r3, #1
 800080c:	617b      	str	r3, [r7, #20]
 800080e:	697a      	ldr	r2, [r7, #20]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	429a      	cmp	r2, r3
 8000814:	dbf1      	blt.n	80007fa <_write+0x12>
  }
  return len;
 8000816:	687b      	ldr	r3, [r7, #4]
}
 8000818:	0018      	movs	r0, r3
 800081a:	46bd      	mov	sp, r7
 800081c:	b006      	add	sp, #24
 800081e:	bd80      	pop	{r7, pc}

08000820 <_close>:

int _close(int file)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000828:	2301      	movs	r3, #1
 800082a:	425b      	negs	r3, r3
}
 800082c:	0018      	movs	r0, r3
 800082e:	46bd      	mov	sp, r7
 8000830:	b002      	add	sp, #8
 8000832:	bd80      	pop	{r7, pc}

08000834 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	2280      	movs	r2, #128	@ 0x80
 8000842:	0192      	lsls	r2, r2, #6
 8000844:	605a      	str	r2, [r3, #4]
  return 0;
 8000846:	2300      	movs	r3, #0
}
 8000848:	0018      	movs	r0, r3
 800084a:	46bd      	mov	sp, r7
 800084c:	b002      	add	sp, #8
 800084e:	bd80      	pop	{r7, pc}

08000850 <_isatty>:

int _isatty(int file)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000858:	2301      	movs	r3, #1
}
 800085a:	0018      	movs	r0, r3
 800085c:	46bd      	mov	sp, r7
 800085e:	b002      	add	sp, #8
 8000860:	bd80      	pop	{r7, pc}

08000862 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b084      	sub	sp, #16
 8000866:	af00      	add	r7, sp, #0
 8000868:	60f8      	str	r0, [r7, #12]
 800086a:	60b9      	str	r1, [r7, #8]
 800086c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800086e:	2300      	movs	r3, #0
}
 8000870:	0018      	movs	r0, r3
 8000872:	46bd      	mov	sp, r7
 8000874:	b004      	add	sp, #16
 8000876:	bd80      	pop	{r7, pc}

08000878 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000880:	4a14      	ldr	r2, [pc, #80]	@ (80008d4 <_sbrk+0x5c>)
 8000882:	4b15      	ldr	r3, [pc, #84]	@ (80008d8 <_sbrk+0x60>)
 8000884:	1ad3      	subs	r3, r2, r3
 8000886:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800088c:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <_sbrk+0x64>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d102      	bne.n	800089a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000894:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <_sbrk+0x64>)
 8000896:	4a12      	ldr	r2, [pc, #72]	@ (80008e0 <_sbrk+0x68>)
 8000898:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800089a:	4b10      	ldr	r3, [pc, #64]	@ (80008dc <_sbrk+0x64>)
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	18d3      	adds	r3, r2, r3
 80008a2:	693a      	ldr	r2, [r7, #16]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d207      	bcs.n	80008b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008a8:	f002 ffbe 	bl	8003828 <__errno>
 80008ac:	0003      	movs	r3, r0
 80008ae:	220c      	movs	r2, #12
 80008b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008b2:	2301      	movs	r3, #1
 80008b4:	425b      	negs	r3, r3
 80008b6:	e009      	b.n	80008cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008b8:	4b08      	ldr	r3, [pc, #32]	@ (80008dc <_sbrk+0x64>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008be:	4b07      	ldr	r3, [pc, #28]	@ (80008dc <_sbrk+0x64>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	18d2      	adds	r2, r2, r3
 80008c6:	4b05      	ldr	r3, [pc, #20]	@ (80008dc <_sbrk+0x64>)
 80008c8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80008ca:	68fb      	ldr	r3, [r7, #12]
}
 80008cc:	0018      	movs	r0, r3
 80008ce:	46bd      	mov	sp, r7
 80008d0:	b006      	add	sp, #24
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20001800 	.word	0x20001800
 80008d8:	00000400 	.word	0x00000400
 80008dc:	2000016c 	.word	0x2000016c
 80008e0:	200002d8 	.word	0x200002d8

080008e4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80008e8:	46c0      	nop			@ (mov r8, r8)
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008f0:	4813      	ldr	r0, [pc, #76]	@ (8000940 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008f2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008f4:	f7ff fff6 	bl	80008e4 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80008f8:	4812      	ldr	r0, [pc, #72]	@ (8000944 <LoopForever+0x6>)
    LDR R1, [R0]
 80008fa:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80008fc:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80008fe:	4a12      	ldr	r2, [pc, #72]	@ (8000948 <LoopForever+0xa>)
    CMP R1, R2
 8000900:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000902:	d105      	bne.n	8000910 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000904:	4811      	ldr	r0, [pc, #68]	@ (800094c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000906:	4912      	ldr	r1, [pc, #72]	@ (8000950 <LoopForever+0x12>)
    STR R1, [R0]
 8000908:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800090a:	4812      	ldr	r0, [pc, #72]	@ (8000954 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800090c:	4912      	ldr	r1, [pc, #72]	@ (8000958 <LoopForever+0x1a>)
    STR R1, [R0]
 800090e:	6001      	str	r1, [r0, #0]

08000910 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000910:	4812      	ldr	r0, [pc, #72]	@ (800095c <LoopForever+0x1e>)
  ldr r1, =_edata
 8000912:	4913      	ldr	r1, [pc, #76]	@ (8000960 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000914:	4a13      	ldr	r2, [pc, #76]	@ (8000964 <LoopForever+0x26>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000918:	e002      	b.n	8000920 <LoopCopyDataInit>

0800091a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800091a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800091c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800091e:	3304      	adds	r3, #4

08000920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000924:	d3f9      	bcc.n	800091a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000926:	4a10      	ldr	r2, [pc, #64]	@ (8000968 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000928:	4c10      	ldr	r4, [pc, #64]	@ (800096c <LoopForever+0x2e>)
  movs r3, #0
 800092a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800092c:	e001      	b.n	8000932 <LoopFillZerobss>

0800092e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800092e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000930:	3204      	adds	r2, #4

08000932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000934:	d3fb      	bcc.n	800092e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000936:	f002 ff7d 	bl	8003834 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800093a:	f7ff fc7b 	bl	8000234 <main>

0800093e <LoopForever>:

LoopForever:
    b LoopForever
 800093e:	e7fe      	b.n	800093e <LoopForever>
  ldr   r0, =_estack
 8000940:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000944:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000948:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 800094c:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000950:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000954:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000958:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 800095c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000960:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000964:	080049c0 	.word	0x080049c0
  ldr r2, =_sbss
 8000968:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800096c:	200002d8 	.word	0x200002d8

08000970 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000970:	e7fe      	b.n	8000970 <ADC1_IRQHandler>
	...

08000974 <System_Init>:
function:	System Init
note:
	Initialize the communication method
********************************************************************************/
uint8_t System_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
	printf("USE_IIC\r\n");
	OLED_CS_0;
	OLED_DC_1;
	//DC = 0,1 >> Address = 0x3c,0x3d 
#elif USE_IIC_SOFT
	printf("USEI_IIC_SOFT\r\n");
 8000978:	4b0a      	ldr	r3, [pc, #40]	@ (80009a4 <System_Init+0x30>)
 800097a:	0018      	movs	r0, r3
 800097c:	f002 fdf6 	bl	800356c <puts>
	OLED_CS_0;
 8000980:	4b09      	ldr	r3, [pc, #36]	@ (80009a8 <System_Init+0x34>)
 8000982:	2200      	movs	r2, #0
 8000984:	2108      	movs	r1, #8
 8000986:	0018      	movs	r0, r3
 8000988:	f001 fa15 	bl	8001db6 <HAL_GPIO_WritePin>
	OLED_DC_1;
 800098c:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <System_Init+0x34>)
 800098e:	2201      	movs	r2, #1
 8000990:	2101      	movs	r1, #1
 8000992:	0018      	movs	r0, r3
 8000994:	f001 fa0f 	bl	8001db6 <HAL_GPIO_WritePin>
	iic_init();
 8000998:	f000 f826 	bl	80009e8 <iic_init>
	
#endif
  return 0;
 800099c:	2300      	movs	r3, #0
}
 800099e:	0018      	movs	r0, r3
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	08004150 	.word	0x08004150
 80009a8:	48000400 	.word	0x48000400

080009ac <Driver_Delay_ms>:
note:
	Driver_Delay_ms(xms) : Delay x ms
	Driver_Delay_us(xus) : Delay x us
********************************************************************************/
void Driver_Delay_ms(uint32_t xms)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
    HAL_Delay(xms);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	0018      	movs	r0, r3
 80009b8:	f000 ffa0 	bl	80018fc <HAL_Delay>
}
 80009bc:	46c0      	nop			@ (mov r8, r8)
 80009be:	46bd      	mov	sp, r7
 80009c0:	b002      	add	sp, #8
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <Driver_Delay_us>:

void Driver_Delay_us(uint32_t xus)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
    int j;
    for(j=xus; j > 0; j--);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	e002      	b.n	80009d8 <Driver_Delay_us+0x14>
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	3b01      	subs	r3, #1
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	dcf9      	bgt.n	80009d2 <Driver_Delay_us+0xe>
}
 80009de:	46c0      	nop			@ (mov r8, r8)
 80009e0:	46c0      	nop			@ (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	b004      	add	sp, #16
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <iic_init>:
#include "Soft_IIC.h"
#include "stdio.h"

void iic_init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
	__IIC_SCL_SET();
 80009ec:	4b09      	ldr	r3, [pc, #36]	@ (8000a14 <iic_init+0x2c>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	2110      	movs	r1, #16
 80009f2:	0018      	movs	r0, r3
 80009f4:	f001 f9df 	bl	8001db6 <HAL_GPIO_WritePin>
	__IIC_SDA_SET();
 80009f8:	2380      	movs	r3, #128	@ 0x80
 80009fa:	0119      	lsls	r1, r3, #4
 80009fc:	2390      	movs	r3, #144	@ 0x90
 80009fe:	05db      	lsls	r3, r3, #23
 8000a00:	2201      	movs	r2, #1
 8000a02:	0018      	movs	r0, r3
 8000a04:	f001 f9d7 	bl	8001db6 <HAL_GPIO_WritePin>
	Driver_Delay_ms(1);
 8000a08:	2001      	movs	r0, #1
 8000a0a:	f7ff ffcf 	bl	80009ac <Driver_Delay_ms>
}
 8000a0e:	46c0      	nop			@ (mov r8, r8)
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	48000400 	.word	0x48000400

08000a18 <iic_start>:

void iic_start(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
	__IIC_SDA_OUT();
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	2280      	movs	r2, #128	@ 0x80
 8000a22:	0112      	lsls	r2, r2, #4
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	2201      	movs	r2, #1
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	1d3b      	adds	r3, r7, #4
 8000a2e:	2201      	movs	r2, #1
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	2201      	movs	r2, #1
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	1d3a      	adds	r2, r7, #4
 8000a3a:	2390      	movs	r3, #144	@ 0x90
 8000a3c:	05db      	lsls	r3, r3, #23
 8000a3e:	0011      	movs	r1, r2
 8000a40:	0018      	movs	r0, r3
 8000a42:	f001 f833 	bl	8001aac <HAL_GPIO_Init>
	__IIC_SDA_SET();
 8000a46:	2380      	movs	r3, #128	@ 0x80
 8000a48:	0119      	lsls	r1, r3, #4
 8000a4a:	2390      	movs	r3, #144	@ 0x90
 8000a4c:	05db      	lsls	r3, r3, #23
 8000a4e:	2201      	movs	r2, #1
 8000a50:	0018      	movs	r0, r3
 8000a52:	f001 f9b0 	bl	8001db6 <HAL_GPIO_WritePin>
	__IIC_SCL_SET();//
 8000a56:	4b10      	ldr	r3, [pc, #64]	@ (8000a98 <iic_start+0x80>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	2110      	movs	r1, #16
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f001 f9aa 	bl	8001db6 <HAL_GPIO_WritePin>
	Driver_Delay_us(10);
 8000a62:	200a      	movs	r0, #10
 8000a64:	f7ff ffae 	bl	80009c4 <Driver_Delay_us>
	__IIC_SDA_CLR();
 8000a68:	2380      	movs	r3, #128	@ 0x80
 8000a6a:	0119      	lsls	r1, r3, #4
 8000a6c:	2390      	movs	r3, #144	@ 0x90
 8000a6e:	05db      	lsls	r3, r3, #23
 8000a70:	2200      	movs	r2, #0
 8000a72:	0018      	movs	r0, r3
 8000a74:	f001 f99f 	bl	8001db6 <HAL_GPIO_WritePin>
	Driver_Delay_us(10);
 8000a78:	200a      	movs	r0, #10
 8000a7a:	f7ff ffa3 	bl	80009c4 <Driver_Delay_us>
	__IIC_SCL_CLR();
 8000a7e:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <iic_start+0x80>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	2110      	movs	r1, #16
 8000a84:	0018      	movs	r0, r3
 8000a86:	f001 f996 	bl	8001db6 <HAL_GPIO_WritePin>
	Driver_Delay_us(10);
 8000a8a:	200a      	movs	r0, #10
 8000a8c:	f7ff ff9a 	bl	80009c4 <Driver_Delay_us>
}
 8000a90:	46c0      	nop			@ (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b006      	add	sp, #24
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	48000400 	.word	0x48000400

08000a9c <iic_stop>:

void iic_stop(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	__IIC_SCL_CLR();
 8000aa0:	4b13      	ldr	r3, [pc, #76]	@ (8000af0 <iic_stop+0x54>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2110      	movs	r1, #16
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f001 f985 	bl	8001db6 <HAL_GPIO_WritePin>
	__IIC_SDA_CLR();
 8000aac:	2380      	movs	r3, #128	@ 0x80
 8000aae:	0119      	lsls	r1, r3, #4
 8000ab0:	2390      	movs	r3, #144	@ 0x90
 8000ab2:	05db      	lsls	r3, r3, #23
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f001 f97d 	bl	8001db6 <HAL_GPIO_WritePin>
	Driver_Delay_us(10);
 8000abc:	200a      	movs	r0, #10
 8000abe:	f7ff ff81 	bl	80009c4 <Driver_Delay_us>
	__IIC_SCL_SET();
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8000af0 <iic_stop+0x54>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	2110      	movs	r1, #16
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f001 f974 	bl	8001db6 <HAL_GPIO_WritePin>
	Driver_Delay_us(10);
 8000ace:	200a      	movs	r0, #10
 8000ad0:	f7ff ff78 	bl	80009c4 <Driver_Delay_us>
	__IIC_SDA_SET();
 8000ad4:	2380      	movs	r3, #128	@ 0x80
 8000ad6:	0119      	lsls	r1, r3, #4
 8000ad8:	2390      	movs	r3, #144	@ 0x90
 8000ada:	05db      	lsls	r3, r3, #23
 8000adc:	2201      	movs	r2, #1
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f001 f969 	bl	8001db6 <HAL_GPIO_WritePin>
	Driver_Delay_us(10);
 8000ae4:	200a      	movs	r0, #10
 8000ae6:	f7ff ff6d 	bl	80009c4 <Driver_Delay_us>
}
 8000aea:	46c0      	nop			@ (mov r8, r8)
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	48000400 	.word	0x48000400

08000af4 <iic_wait_for_ack>:

int iic_wait_for_ack(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
	uint8_t chTimeOut = 0;
 8000afa:	1dfb      	adds	r3, r7, #7
 8000afc:	2200      	movs	r2, #0
 8000afe:	701a      	strb	r2, [r3, #0]

	__IIC_SCL_CLR();
 8000b00:	4b21      	ldr	r3, [pc, #132]	@ (8000b88 <iic_wait_for_ack+0x94>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	2110      	movs	r1, #16
 8000b06:	0018      	movs	r0, r3
 8000b08:	f001 f955 	bl	8001db6 <HAL_GPIO_WritePin>
	Driver_Delay_us(10);
 8000b0c:	200a      	movs	r0, #10
 8000b0e:	f7ff ff59 	bl	80009c4 <Driver_Delay_us>
	__IIC_SCL_SET();
 8000b12:	4b1d      	ldr	r3, [pc, #116]	@ (8000b88 <iic_wait_for_ack+0x94>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	2110      	movs	r1, #16
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f001 f94c 	bl	8001db6 <HAL_GPIO_WritePin>

	while ((!(__IIC_SDA_READ())) && (chTimeOut ++)) {
 8000b1e:	e014      	b.n	8000b4a <iic_wait_for_ack+0x56>
		chTimeOut ++;
 8000b20:	1dfb      	adds	r3, r7, #7
 8000b22:	781a      	ldrb	r2, [r3, #0]
 8000b24:	1dfb      	adds	r3, r7, #7
 8000b26:	3201      	adds	r2, #1
 8000b28:	701a      	strb	r2, [r3, #0]
		if (chTimeOut > 200) {
 8000b2a:	1dfb      	adds	r3, r7, #7
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2bc8      	cmp	r3, #200	@ 0xc8
 8000b30:	d90b      	bls.n	8000b4a <iic_wait_for_ack+0x56>
			chTimeOut = 0;
 8000b32:	1dfb      	adds	r3, r7, #7
 8000b34:	2200      	movs	r2, #0
 8000b36:	701a      	strb	r2, [r3, #0]
			iic_stop();
 8000b38:	f7ff ffb0 	bl	8000a9c <iic_stop>
			printf("timeout");
 8000b3c:	4b13      	ldr	r3, [pc, #76]	@ (8000b8c <iic_wait_for_ack+0x98>)
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f002 fcae 	bl	80034a0 <iprintf>
			return -1;
 8000b44:	2301      	movs	r3, #1
 8000b46:	425b      	negs	r3, r3
 8000b48:	e01a      	b.n	8000b80 <iic_wait_for_ack+0x8c>
	while ((!(__IIC_SDA_READ())) && (chTimeOut ++)) {
 8000b4a:	2380      	movs	r3, #128	@ 0x80
 8000b4c:	011a      	lsls	r2, r3, #4
 8000b4e:	2390      	movs	r3, #144	@ 0x90
 8000b50:	05db      	lsls	r3, r3, #23
 8000b52:	0011      	movs	r1, r2
 8000b54:	0018      	movs	r0, r3
 8000b56:	f001 f911 	bl	8001d7c <HAL_GPIO_ReadPin>
 8000b5a:	1e03      	subs	r3, r0, #0
 8000b5c:	d106      	bne.n	8000b6c <iic_wait_for_ack+0x78>
 8000b5e:	1dfb      	adds	r3, r7, #7
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	1dfa      	adds	r2, r7, #7
 8000b64:	1c59      	adds	r1, r3, #1
 8000b66:	7011      	strb	r1, [r2, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d1d9      	bne.n	8000b20 <iic_wait_for_ack+0x2c>
		}
	}
	__IIC_SCL_CLR();
 8000b6c:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <iic_wait_for_ack+0x94>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2110      	movs	r1, #16
 8000b72:	0018      	movs	r0, r3
 8000b74:	f001 f91f 	bl	8001db6 <HAL_GPIO_WritePin>
	Driver_Delay_us(10);
 8000b78:	200a      	movs	r0, #10
 8000b7a:	f7ff ff23 	bl	80009c4 <Driver_Delay_us>

	return 0;
 8000b7e:	2300      	movs	r3, #0
}
 8000b80:	0018      	movs	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	b002      	add	sp, #8
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	48000400 	.word	0x48000400
 8000b8c:	0800416c 	.word	0x0800416c

08000b90 <iic_write_byte>:

void iic_write_byte(uint8_t chData)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b088      	sub	sp, #32
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	0002      	movs	r2, r0
 8000b98:	1dfb      	adds	r3, r7, #7
 8000b9a:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	
	__IIC_SDA_OUT();
 8000b9c:	2108      	movs	r1, #8
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	2280      	movs	r2, #128	@ 0x80
 8000ba2:	0112      	lsls	r2, r2, #4
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	2201      	movs	r2, #1
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	2201      	movs	r2, #1
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	60da      	str	r2, [r3, #12]
 8000bb8:	187a      	adds	r2, r7, r1
 8000bba:	2390      	movs	r3, #144	@ 0x90
 8000bbc:	05db      	lsls	r3, r3, #23
 8000bbe:	0011      	movs	r1, r2
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f000 ff73 	bl	8001aac <HAL_GPIO_Init>
	for(i = 0; i < 8; i ++) {
 8000bc6:	231f      	movs	r3, #31
 8000bc8:	18fb      	adds	r3, r7, r3
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
 8000bce:	e035      	b.n	8000c3c <iic_write_byte+0xac>
		__IIC_SCL_CLR();
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c50 <iic_write_byte+0xc0>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2110      	movs	r1, #16
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f001 f8ed 	bl	8001db6 <HAL_GPIO_WritePin>
		Driver_Delay_us(10);
 8000bdc:	200a      	movs	r0, #10
 8000bde:	f7ff fef1 	bl	80009c4 <Driver_Delay_us>
		if(chData & 0x80) {
 8000be2:	1dfb      	adds	r3, r7, #7
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	b25b      	sxtb	r3, r3
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	da08      	bge.n	8000bfe <iic_write_byte+0x6e>
			__IIC_SDA_SET();
 8000bec:	2380      	movs	r3, #128	@ 0x80
 8000bee:	0119      	lsls	r1, r3, #4
 8000bf0:	2390      	movs	r3, #144	@ 0x90
 8000bf2:	05db      	lsls	r3, r3, #23
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f001 f8dd 	bl	8001db6 <HAL_GPIO_WritePin>
 8000bfc:	e007      	b.n	8000c0e <iic_write_byte+0x7e>
		} else {
			__IIC_SDA_CLR();
 8000bfe:	2380      	movs	r3, #128	@ 0x80
 8000c00:	0119      	lsls	r1, r3, #4
 8000c02:	2390      	movs	r3, #144	@ 0x90
 8000c04:	05db      	lsls	r3, r3, #23
 8000c06:	2200      	movs	r2, #0
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f001 f8d4 	bl	8001db6 <HAL_GPIO_WritePin>
		}
		chData <<= 1;
 8000c0e:	1dfa      	adds	r2, r7, #7
 8000c10:	1dfb      	adds	r3, r7, #7
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	18db      	adds	r3, r3, r3
 8000c16:	7013      	strb	r3, [r2, #0]
		Driver_Delay_us(10);
 8000c18:	200a      	movs	r0, #10
 8000c1a:	f7ff fed3 	bl	80009c4 <Driver_Delay_us>
		__IIC_SCL_SET();
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <iic_write_byte+0xc0>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	2110      	movs	r1, #16
 8000c24:	0018      	movs	r0, r3
 8000c26:	f001 f8c6 	bl	8001db6 <HAL_GPIO_WritePin>
		Driver_Delay_us(10);
 8000c2a:	200a      	movs	r0, #10
 8000c2c:	f7ff feca 	bl	80009c4 <Driver_Delay_us>
	for(i = 0; i < 8; i ++) {
 8000c30:	211f      	movs	r1, #31
 8000c32:	187b      	adds	r3, r7, r1
 8000c34:	781a      	ldrb	r2, [r3, #0]
 8000c36:	187b      	adds	r3, r7, r1
 8000c38:	3201      	adds	r2, #1
 8000c3a:	701a      	strb	r2, [r3, #0]
 8000c3c:	231f      	movs	r3, #31
 8000c3e:	18fb      	adds	r3, r7, r3
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b07      	cmp	r3, #7
 8000c44:	d9c4      	bls.n	8000bd0 <iic_write_byte+0x40>
	}
}
 8000c46:	46c0      	nop			@ (mov r8, r8)
 8000c48:	46c0      	nop			@ (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	b008      	add	sp, #32
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	48000400 	.word	0x48000400

08000c54 <OLED_0in96_test>:
******************************************************************************/
#include "test.h"
#include "../OLED/OLED_0in96.h"

int OLED_0in96_test(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af02      	add	r7, sp, #8
    printf("0.96inch OLED test demo\n");
 8000c5a:	4b33      	ldr	r3, [pc, #204]	@ (8000d28 <OLED_0in96_test+0xd4>)
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f002 fc85 	bl	800356c <puts>
	if(System_Init() != 0) {
 8000c62:	f7ff fe87 	bl	8000974 <System_Init>
 8000c66:	1e03      	subs	r3, r0, #0
 8000c68:	d002      	beq.n	8000c70 <OLED_0in96_test+0x1c>
		return -1;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	425b      	negs	r3, r3
 8000c6e:	e057      	b.n	8000d20 <OLED_0in96_test+0xcc>
	if(USE_IIC) {
		printf("Only USE_SPI_4W or USE_IIC_SOFT, Please revise DEV_Config.h !!!\r\n");
		return -1;
	}
	
    printf("OLED Init...\r\n");
 8000c70:	4b2e      	ldr	r3, [pc, #184]	@ (8000d2c <OLED_0in96_test+0xd8>)
 8000c72:	0018      	movs	r0, r3
 8000c74:	f002 fc7a 	bl	800356c <puts>
    OLED_0in96_Init();
 8000c78:	f000 fd7b 	bl	8001772 <OLED_0in96_Init>
    Driver_Delay_ms(500);  
 8000c7c:	23fa      	movs	r3, #250	@ 0xfa
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	0018      	movs	r0, r3
 8000c82:	f7ff fe93 	bl	80009ac <Driver_Delay_ms>
    // 0.Create a new image cache
    UBYTE *BlackImage;
    UWORD Imagesize = ((OLED_0in96_WIDTH%8==0)? (OLED_0in96_WIDTH/8): (OLED_0in96_WIDTH/8+1)) * OLED_0in96_HEIGHT;
 8000c86:	1dbb      	adds	r3, r7, #6
 8000c88:	2280      	movs	r2, #128	@ 0x80
 8000c8a:	00d2      	lsls	r2, r2, #3
 8000c8c:	801a      	strh	r2, [r3, #0]
    if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 8000c8e:	1dbb      	adds	r3, r7, #6
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	0018      	movs	r0, r3
 8000c94:	f002 fa84 	bl	80031a0 <malloc>
 8000c98:	0003      	movs	r3, r0
 8000c9a:	603b      	str	r3, [r7, #0]
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d106      	bne.n	8000cb0 <OLED_0in96_test+0x5c>
            printf("Failed to apply for black memory...\r\n");
 8000ca2:	4b23      	ldr	r3, [pc, #140]	@ (8000d30 <OLED_0in96_test+0xdc>)
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f002 fc61 	bl	800356c <puts>
            return -1;
 8000caa:	2301      	movs	r3, #1
 8000cac:	425b      	negs	r3, r3
 8000cae:	e037      	b.n	8000d20 <OLED_0in96_test+0xcc>
    }
    printf("Paint_NewImage\r\n");
 8000cb0:	4b20      	ldr	r3, [pc, #128]	@ (8000d34 <OLED_0in96_test+0xe0>)
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f002 fc5a 	bl	800356c <puts>
    Paint_NewImage(BlackImage, OLED_0in96_WIDTH, OLED_0in96_HEIGHT, 90, BLACK);  
 8000cb8:	6838      	ldr	r0, [r7, #0]
 8000cba:	2300      	movs	r3, #0
 8000cbc:	9300      	str	r3, [sp, #0]
 8000cbe:	235a      	movs	r3, #90	@ 0x5a
 8000cc0:	2280      	movs	r2, #128	@ 0x80
 8000cc2:	2140      	movs	r1, #64	@ 0x40
 8000cc4:	f000 f842 	bl	8000d4c <Paint_NewImage>

    printf("Drawing\r\n");
 8000cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d38 <OLED_0in96_test+0xe4>)
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f002 fc4e 	bl	800356c <puts>
    //1.Select Image
    Paint_SelectImage(BlackImage);
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f000 f8a8 	bl	8000e28 <Paint_SelectImage>
    Driver_Delay_ms(500);
 8000cd8:	23fa      	movs	r3, #250	@ 0xfa
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f7ff fe65 	bl	80009ac <Driver_Delay_ms>
    Paint_Clear(BLACK);
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f000 fa80 	bl	80011e8 <Paint_Clear>
    while(1) {
        // Drawing on the image
        printf("Drawing:page 2\r\n");           
 8000ce8:	4b14      	ldr	r3, [pc, #80]	@ (8000d3c <OLED_0in96_test+0xe8>)
 8000cea:	0018      	movs	r0, r3
 8000cec:	f002 fc3e 	bl	800356c <puts>
        Paint_DrawString_EN(0, 0, "Use 4-wire SPI: factory setting: BS2 is grounded by default, BS1 is connected to ground through R1, DIN is connected to host MOSI, and CLK is connected to host SCLK. connected to host SCLK. connected to host SCLK. connected to host SCLK. connected to host SCLK.", &Font8, WHITE, BLACK);
 8000cf0:	4b13      	ldr	r3, [pc, #76]	@ (8000d40 <OLED_0in96_test+0xec>)
 8000cf2:	4a14      	ldr	r2, [pc, #80]	@ (8000d44 <OLED_0in96_test+0xf0>)
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	9101      	str	r1, [sp, #4]
 8000cf8:	4913      	ldr	r1, [pc, #76]	@ (8000d48 <OLED_0in96_test+0xf4>)
 8000cfa:	9100      	str	r1, [sp, #0]
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f000 fc0c 	bl	800151c <Paint_DrawString_EN>
        // Show image on page2
        OLED_0in96_display(BlackImage);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	0018      	movs	r0, r3
 8000d08:	f000 fd42 	bl	8001790 <OLED_0in96_display>
        Driver_Delay_ms(2000); 
 8000d0c:	23fa      	movs	r3, #250	@ 0xfa
 8000d0e:	00db      	lsls	r3, r3, #3
 8000d10:	0018      	movs	r0, r3
 8000d12:	f7ff fe4b 	bl	80009ac <Driver_Delay_ms>
        Paint_Clear(BLACK);     
 8000d16:	2000      	movs	r0, #0
 8000d18:	f000 fa66 	bl	80011e8 <Paint_Clear>
        printf("Drawing:page 2\r\n");           
 8000d1c:	46c0      	nop			@ (mov r8, r8)
 8000d1e:	e7e3      	b.n	8000ce8 <OLED_0in96_test+0x94>
    }
}
 8000d20:	0018      	movs	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	b002      	add	sp, #8
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	08004174 	.word	0x08004174
 8000d2c:	0800418c 	.word	0x0800418c
 8000d30:	0800419c 	.word	0x0800419c
 8000d34:	080041c4 	.word	0x080041c4
 8000d38:	080041d4 	.word	0x080041d4
 8000d3c:	080041e0 	.word	0x080041e0
 8000d40:	20000004 	.word	0x20000004
 8000d44:	080041f0 	.word	0x080041f0
 8000d48:	0000ffff 	.word	0x0000ffff

08000d4c <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8000d4c:	b5b0      	push	{r4, r5, r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	000c      	movs	r4, r1
 8000d56:	0010      	movs	r0, r2
 8000d58:	0019      	movs	r1, r3
 8000d5a:	250a      	movs	r5, #10
 8000d5c:	197b      	adds	r3, r7, r5
 8000d5e:	1c22      	adds	r2, r4, #0
 8000d60:	801a      	strh	r2, [r3, #0]
 8000d62:	2408      	movs	r4, #8
 8000d64:	193b      	adds	r3, r7, r4
 8000d66:	1c02      	adds	r2, r0, #0
 8000d68:	801a      	strh	r2, [r3, #0]
 8000d6a:	1dbb      	adds	r3, r7, #6
 8000d6c:	1c0a      	adds	r2, r1, #0
 8000d6e:	801a      	strh	r2, [r3, #0]
    Paint.Image = NULL;
 8000d70:	4b2c      	ldr	r3, [pc, #176]	@ (8000e24 <Paint_NewImage+0xd8>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 8000d76:	4b2b      	ldr	r3, [pc, #172]	@ (8000e24 <Paint_NewImage+0xd8>)
 8000d78:	68fa      	ldr	r2, [r7, #12]
 8000d7a:	601a      	str	r2, [r3, #0]

    Paint.WidthMemory = Width;
 8000d7c:	4b29      	ldr	r3, [pc, #164]	@ (8000e24 <Paint_NewImage+0xd8>)
 8000d7e:	0029      	movs	r1, r5
 8000d80:	187a      	adds	r2, r7, r1
 8000d82:	8812      	ldrh	r2, [r2, #0]
 8000d84:	811a      	strh	r2, [r3, #8]
    Paint.HeightMemory = Height;
 8000d86:	4b27      	ldr	r3, [pc, #156]	@ (8000e24 <Paint_NewImage+0xd8>)
 8000d88:	193a      	adds	r2, r7, r4
 8000d8a:	8812      	ldrh	r2, [r2, #0]
 8000d8c:	815a      	strh	r2, [r3, #10]
    Paint.Color = Color;    
 8000d8e:	4a25      	ldr	r2, [pc, #148]	@ (8000e24 <Paint_NewImage+0xd8>)
 8000d90:	2320      	movs	r3, #32
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	881b      	ldrh	r3, [r3, #0]
 8000d96:	8193      	strh	r3, [r2, #12]
		Paint.Scale = 2;
 8000d98:	4b22      	ldr	r3, [pc, #136]	@ (8000e24 <Paint_NewImage+0xd8>)
 8000d9a:	2202      	movs	r2, #2
 8000d9c:	82da      	strh	r2, [r3, #22]
		
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 8000d9e:	187b      	adds	r3, r7, r1
 8000da0:	881b      	ldrh	r3, [r3, #0]
 8000da2:	2207      	movs	r2, #7
 8000da4:	4013      	ands	r3, r2
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d104      	bne.n	8000db6 <Paint_NewImage+0x6a>
 8000dac:	187b      	adds	r3, r7, r1
 8000dae:	881b      	ldrh	r3, [r3, #0]
 8000db0:	08db      	lsrs	r3, r3, #3
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	e006      	b.n	8000dc4 <Paint_NewImage+0x78>
 8000db6:	230a      	movs	r3, #10
 8000db8:	18fb      	adds	r3, r7, r3
 8000dba:	881b      	ldrh	r3, [r3, #0]
 8000dbc:	08db      	lsrs	r3, r3, #3
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	4a17      	ldr	r2, [pc, #92]	@ (8000e24 <Paint_NewImage+0xd8>)
 8000dc6:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 8000dc8:	4b16      	ldr	r3, [pc, #88]	@ (8000e24 <Paint_NewImage+0xd8>)
 8000dca:	2208      	movs	r2, #8
 8000dcc:	18ba      	adds	r2, r7, r2
 8000dce:	8812      	ldrh	r2, [r2, #0]
 8000dd0:	829a      	strh	r2, [r3, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
 8000dd2:	4b14      	ldr	r3, [pc, #80]	@ (8000e24 <Paint_NewImage+0xd8>)
 8000dd4:	1dba      	adds	r2, r7, #6
 8000dd6:	8812      	ldrh	r2, [r2, #0]
 8000dd8:	81da      	strh	r2, [r3, #14]
    Paint.Mirror = MIRROR_NONE;
 8000dda:	4b12      	ldr	r3, [pc, #72]	@ (8000e24 <Paint_NewImage+0xd8>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8000de0:	1dbb      	adds	r3, r7, #6
 8000de2:	881b      	ldrh	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d003      	beq.n	8000df0 <Paint_NewImage+0xa4>
 8000de8:	1dbb      	adds	r3, r7, #6
 8000dea:	881b      	ldrh	r3, [r3, #0]
 8000dec:	2bb4      	cmp	r3, #180	@ 0xb4
 8000dee:	d10a      	bne.n	8000e06 <Paint_NewImage+0xba>
        Paint.Width = Width;
 8000df0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e24 <Paint_NewImage+0xd8>)
 8000df2:	220a      	movs	r2, #10
 8000df4:	18ba      	adds	r2, r7, r2
 8000df6:	8812      	ldrh	r2, [r2, #0]
 8000df8:	809a      	strh	r2, [r3, #4]
        Paint.Height = Height;
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000e24 <Paint_NewImage+0xd8>)
 8000dfc:	2208      	movs	r2, #8
 8000dfe:	18ba      	adds	r2, r7, r2
 8000e00:	8812      	ldrh	r2, [r2, #0]
 8000e02:	80da      	strh	r2, [r3, #6]
 8000e04:	e00a      	b.n	8000e1c <Paint_NewImage+0xd0>
    } else {
        Paint.Width = Height;
 8000e06:	4b07      	ldr	r3, [pc, #28]	@ (8000e24 <Paint_NewImage+0xd8>)
 8000e08:	2208      	movs	r2, #8
 8000e0a:	18ba      	adds	r2, r7, r2
 8000e0c:	8812      	ldrh	r2, [r2, #0]
 8000e0e:	809a      	strh	r2, [r3, #4]
        Paint.Height = Width;
 8000e10:	4b04      	ldr	r3, [pc, #16]	@ (8000e24 <Paint_NewImage+0xd8>)
 8000e12:	220a      	movs	r2, #10
 8000e14:	18ba      	adds	r2, r7, r2
 8000e16:	8812      	ldrh	r2, [r2, #0]
 8000e18:	80da      	strh	r2, [r3, #6]
    }
}
 8000e1a:	46c0      	nop			@ (mov r8, r8)
 8000e1c:	46c0      	nop			@ (mov r8, r8)
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	b004      	add	sp, #16
 8000e22:	bdb0      	pop	{r4, r5, r7, pc}
 8000e24:	20000170 	.word	0x20000170

08000e28 <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 8000e30:	4b03      	ldr	r3, [pc, #12]	@ (8000e40 <Paint_SelectImage+0x18>)
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	601a      	str	r2, [r3, #0]
}
 8000e36:	46c0      	nop			@ (mov r8, r8)
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	b002      	add	sp, #8
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	46c0      	nop			@ (mov r8, r8)
 8000e40:	20000170 	.word	0x20000170

08000e44 <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8000e44:	b590      	push	{r4, r7, lr}
 8000e46:	b08b      	sub	sp, #44	@ 0x2c
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	0004      	movs	r4, r0
 8000e4c:	0008      	movs	r0, r1
 8000e4e:	0011      	movs	r1, r2
 8000e50:	1dbb      	adds	r3, r7, #6
 8000e52:	1c22      	adds	r2, r4, #0
 8000e54:	801a      	strh	r2, [r3, #0]
 8000e56:	1d3b      	adds	r3, r7, #4
 8000e58:	1c02      	adds	r2, r0, #0
 8000e5a:	801a      	strh	r2, [r3, #0]
 8000e5c:	1cbb      	adds	r3, r7, #2
 8000e5e:	1c0a      	adds	r2, r1, #0
 8000e60:	801a      	strh	r2, [r3, #0]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8000e62:	4ba4      	ldr	r3, [pc, #656]	@ (80010f4 <Paint_SetPixel+0x2b0>)
 8000e64:	889b      	ldrh	r3, [r3, #4]
 8000e66:	1dba      	adds	r2, r7, #6
 8000e68:	8812      	ldrh	r2, [r2, #0]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d805      	bhi.n	8000e7a <Paint_SetPixel+0x36>
 8000e6e:	4ba1      	ldr	r3, [pc, #644]	@ (80010f4 <Paint_SetPixel+0x2b0>)
 8000e70:	88db      	ldrh	r3, [r3, #6]
 8000e72:	1d3a      	adds	r2, r7, #4
 8000e74:	8812      	ldrh	r2, [r2, #0]
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d904      	bls.n	8000e84 <Paint_SetPixel+0x40>
        Debug("Exceeding display boundaries\r\n");
 8000e7a:	4b9f      	ldr	r3, [pc, #636]	@ (80010f8 <Paint_SetPixel+0x2b4>)
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	f002 fb75 	bl	800356c <puts>
        return;
 8000e82:	e1ac      	b.n	80011de <Paint_SetPixel+0x39a>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 8000e84:	4b9b      	ldr	r3, [pc, #620]	@ (80010f4 <Paint_SetPixel+0x2b0>)
 8000e86:	89db      	ldrh	r3, [r3, #14]
 8000e88:	2287      	movs	r2, #135	@ 0x87
 8000e8a:	0052      	lsls	r2, r2, #1
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d03d      	beq.n	8000f0c <Paint_SetPixel+0xc8>
 8000e90:	2287      	movs	r2, #135	@ 0x87
 8000e92:	0052      	lsls	r2, r2, #1
 8000e94:	4293      	cmp	r3, r2
 8000e96:	dd00      	ble.n	8000e9a <Paint_SetPixel+0x56>
 8000e98:	e19e      	b.n	80011d8 <Paint_SetPixel+0x394>
 8000e9a:	2bb4      	cmp	r3, #180	@ 0xb4
 8000e9c:	d021      	beq.n	8000ee2 <Paint_SetPixel+0x9e>
 8000e9e:	dd00      	ble.n	8000ea2 <Paint_SetPixel+0x5e>
 8000ea0:	e19a      	b.n	80011d8 <Paint_SetPixel+0x394>
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d002      	beq.n	8000eac <Paint_SetPixel+0x68>
 8000ea6:	2b5a      	cmp	r3, #90	@ 0x5a
 8000ea8:	d00b      	beq.n	8000ec2 <Paint_SetPixel+0x7e>
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 8000eaa:	e195      	b.n	80011d8 <Paint_SetPixel+0x394>
        X = Xpoint;
 8000eac:	2326      	movs	r3, #38	@ 0x26
 8000eae:	18fb      	adds	r3, r7, r3
 8000eb0:	1dba      	adds	r2, r7, #6
 8000eb2:	8812      	ldrh	r2, [r2, #0]
 8000eb4:	801a      	strh	r2, [r3, #0]
        Y = Ypoint;  
 8000eb6:	2324      	movs	r3, #36	@ 0x24
 8000eb8:	18fb      	adds	r3, r7, r3
 8000eba:	1d3a      	adds	r2, r7, #4
 8000ebc:	8812      	ldrh	r2, [r2, #0]
 8000ebe:	801a      	strh	r2, [r3, #0]
        break;
 8000ec0:	e034      	b.n	8000f2c <Paint_SetPixel+0xe8>
        X = Paint.WidthMemory - Ypoint - 1;
 8000ec2:	4b8c      	ldr	r3, [pc, #560]	@ (80010f4 <Paint_SetPixel+0x2b0>)
 8000ec4:	891a      	ldrh	r2, [r3, #8]
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	881b      	ldrh	r3, [r3, #0]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	2326      	movs	r3, #38	@ 0x26
 8000ed0:	18fb      	adds	r3, r7, r3
 8000ed2:	3a01      	subs	r2, #1
 8000ed4:	801a      	strh	r2, [r3, #0]
        Y = Xpoint;
 8000ed6:	2324      	movs	r3, #36	@ 0x24
 8000ed8:	18fb      	adds	r3, r7, r3
 8000eda:	1dba      	adds	r2, r7, #6
 8000edc:	8812      	ldrh	r2, [r2, #0]
 8000ede:	801a      	strh	r2, [r3, #0]
        break;
 8000ee0:	e024      	b.n	8000f2c <Paint_SetPixel+0xe8>
        X = Paint.WidthMemory - Xpoint - 1;
 8000ee2:	4b84      	ldr	r3, [pc, #528]	@ (80010f4 <Paint_SetPixel+0x2b0>)
 8000ee4:	891a      	ldrh	r2, [r3, #8]
 8000ee6:	1dbb      	adds	r3, r7, #6
 8000ee8:	881b      	ldrh	r3, [r3, #0]
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	2326      	movs	r3, #38	@ 0x26
 8000ef0:	18fb      	adds	r3, r7, r3
 8000ef2:	3a01      	subs	r2, #1
 8000ef4:	801a      	strh	r2, [r3, #0]
        Y = Paint.HeightMemory - Ypoint - 1;
 8000ef6:	4b7f      	ldr	r3, [pc, #508]	@ (80010f4 <Paint_SetPixel+0x2b0>)
 8000ef8:	895a      	ldrh	r2, [r3, #10]
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	881b      	ldrh	r3, [r3, #0]
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	2324      	movs	r3, #36	@ 0x24
 8000f04:	18fb      	adds	r3, r7, r3
 8000f06:	3a01      	subs	r2, #1
 8000f08:	801a      	strh	r2, [r3, #0]
        break;
 8000f0a:	e00f      	b.n	8000f2c <Paint_SetPixel+0xe8>
        X = Ypoint;
 8000f0c:	2326      	movs	r3, #38	@ 0x26
 8000f0e:	18fb      	adds	r3, r7, r3
 8000f10:	1d3a      	adds	r2, r7, #4
 8000f12:	8812      	ldrh	r2, [r2, #0]
 8000f14:	801a      	strh	r2, [r3, #0]
        Y = Paint.HeightMemory - Xpoint - 1;
 8000f16:	4b77      	ldr	r3, [pc, #476]	@ (80010f4 <Paint_SetPixel+0x2b0>)
 8000f18:	895a      	ldrh	r2, [r3, #10]
 8000f1a:	1dbb      	adds	r3, r7, #6
 8000f1c:	881b      	ldrh	r3, [r3, #0]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	2324      	movs	r3, #36	@ 0x24
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	3a01      	subs	r2, #1
 8000f28:	801a      	strh	r2, [r3, #0]
        break;
 8000f2a:	46c0      	nop			@ (mov r8, r8)
    }
    
    switch(Paint.Mirror) {
 8000f2c:	4b71      	ldr	r3, [pc, #452]	@ (80010f4 <Paint_SetPixel+0x2b0>)
 8000f2e:	8a1b      	ldrh	r3, [r3, #16]
 8000f30:	2b03      	cmp	r3, #3
 8000f32:	d020      	beq.n	8000f76 <Paint_SetPixel+0x132>
 8000f34:	dd00      	ble.n	8000f38 <Paint_SetPixel+0xf4>
 8000f36:	e151      	b.n	80011dc <Paint_SetPixel+0x398>
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d011      	beq.n	8000f60 <Paint_SetPixel+0x11c>
 8000f3c:	dd00      	ble.n	8000f40 <Paint_SetPixel+0xfc>
 8000f3e:	e14d      	b.n	80011dc <Paint_SetPixel+0x398>
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d02d      	beq.n	8000fa0 <Paint_SetPixel+0x15c>
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d000      	beq.n	8000f4a <Paint_SetPixel+0x106>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
        Y = Paint.HeightMemory - Y - 1;
        break;
    default:
        return;
 8000f48:	e148      	b.n	80011dc <Paint_SetPixel+0x398>
        X = Paint.WidthMemory - X - 1;
 8000f4a:	4b6a      	ldr	r3, [pc, #424]	@ (80010f4 <Paint_SetPixel+0x2b0>)
 8000f4c:	891a      	ldrh	r2, [r3, #8]
 8000f4e:	2126      	movs	r1, #38	@ 0x26
 8000f50:	187b      	adds	r3, r7, r1
 8000f52:	881b      	ldrh	r3, [r3, #0]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	187b      	adds	r3, r7, r1
 8000f5a:	3a01      	subs	r2, #1
 8000f5c:	801a      	strh	r2, [r3, #0]
        break;
 8000f5e:	e020      	b.n	8000fa2 <Paint_SetPixel+0x15e>
        Y = Paint.HeightMemory - Y - 1;
 8000f60:	4b64      	ldr	r3, [pc, #400]	@ (80010f4 <Paint_SetPixel+0x2b0>)
 8000f62:	895a      	ldrh	r2, [r3, #10]
 8000f64:	2124      	movs	r1, #36	@ 0x24
 8000f66:	187b      	adds	r3, r7, r1
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	187b      	adds	r3, r7, r1
 8000f70:	3a01      	subs	r2, #1
 8000f72:	801a      	strh	r2, [r3, #0]
        break;
 8000f74:	e015      	b.n	8000fa2 <Paint_SetPixel+0x15e>
        X = Paint.WidthMemory - X - 1;
 8000f76:	4b5f      	ldr	r3, [pc, #380]	@ (80010f4 <Paint_SetPixel+0x2b0>)
 8000f78:	891a      	ldrh	r2, [r3, #8]
 8000f7a:	2126      	movs	r1, #38	@ 0x26
 8000f7c:	187b      	adds	r3, r7, r1
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	187b      	adds	r3, r7, r1
 8000f86:	3a01      	subs	r2, #1
 8000f88:	801a      	strh	r2, [r3, #0]
        Y = Paint.HeightMemory - Y - 1;
 8000f8a:	4b5a      	ldr	r3, [pc, #360]	@ (80010f4 <Paint_SetPixel+0x2b0>)
 8000f8c:	895a      	ldrh	r2, [r3, #10]
 8000f8e:	2124      	movs	r1, #36	@ 0x24
 8000f90:	187b      	adds	r3, r7, r1
 8000f92:	881b      	ldrh	r3, [r3, #0]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	187b      	adds	r3, r7, r1
 8000f9a:	3a01      	subs	r2, #1
 8000f9c:	801a      	strh	r2, [r3, #0]
        break;
 8000f9e:	e000      	b.n	8000fa2 <Paint_SetPixel+0x15e>
        break;
 8000fa0:	46c0      	nop			@ (mov r8, r8)
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8000fa2:	4b54      	ldr	r3, [pc, #336]	@ (80010f4 <Paint_SetPixel+0x2b0>)
 8000fa4:	891b      	ldrh	r3, [r3, #8]
 8000fa6:	2226      	movs	r2, #38	@ 0x26
 8000fa8:	18ba      	adds	r2, r7, r2
 8000faa:	8812      	ldrh	r2, [r2, #0]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d806      	bhi.n	8000fbe <Paint_SetPixel+0x17a>
 8000fb0:	4b50      	ldr	r3, [pc, #320]	@ (80010f4 <Paint_SetPixel+0x2b0>)
 8000fb2:	895b      	ldrh	r3, [r3, #10]
 8000fb4:	2224      	movs	r2, #36	@ 0x24
 8000fb6:	18ba      	adds	r2, r7, r2
 8000fb8:	8812      	ldrh	r2, [r2, #0]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d904      	bls.n	8000fc8 <Paint_SetPixel+0x184>
        Debug("Exceeding display boundaries\r\n");
 8000fbe:	4b4e      	ldr	r3, [pc, #312]	@ (80010f8 <Paint_SetPixel+0x2b4>)
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f002 fad3 	bl	800356c <puts>
        return;
 8000fc6:	e10a      	b.n	80011de <Paint_SetPixel+0x39a>
    }
    
    if(Paint.Scale == 2){
 8000fc8:	4b4a      	ldr	r3, [pc, #296]	@ (80010f4 <Paint_SetPixel+0x2b0>)
 8000fca:	8adb      	ldrh	r3, [r3, #22]
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d146      	bne.n	800105e <Paint_SetPixel+0x21a>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 8000fd0:	2026      	movs	r0, #38	@ 0x26
 8000fd2:	183b      	adds	r3, r7, r0
 8000fd4:	881b      	ldrh	r3, [r3, #0]
 8000fd6:	08db      	lsrs	r3, r3, #3
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	0019      	movs	r1, r3
 8000fdc:	2324      	movs	r3, #36	@ 0x24
 8000fde:	18fb      	adds	r3, r7, r3
 8000fe0:	881b      	ldrh	r3, [r3, #0]
 8000fe2:	4a44      	ldr	r2, [pc, #272]	@ (80010f4 <Paint_SetPixel+0x2b0>)
 8000fe4:	8a52      	ldrh	r2, [r2, #18]
 8000fe6:	4353      	muls	r3, r2
 8000fe8:	18cb      	adds	r3, r1, r3
 8000fea:	60fb      	str	r3, [r7, #12]
        UBYTE Rdata = Paint.Image[Addr];
 8000fec:	4b41      	ldr	r3, [pc, #260]	@ (80010f4 <Paint_SetPixel+0x2b0>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	18d2      	adds	r2, r2, r3
 8000ff4:	210b      	movs	r1, #11
 8000ff6:	187b      	adds	r3, r7, r1
 8000ff8:	7812      	ldrb	r2, [r2, #0]
 8000ffa:	701a      	strb	r2, [r3, #0]
        if((Color & 0Xff) == BLACK)
 8000ffc:	1cbb      	adds	r3, r7, #2
 8000ffe:	881b      	ldrh	r3, [r3, #0]
 8001000:	22ff      	movs	r2, #255	@ 0xff
 8001002:	4013      	ands	r3, r2
 8001004:	d115      	bne.n	8001032 <Paint_SetPixel+0x1ee>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 8001006:	183b      	adds	r3, r7, r0
 8001008:	881b      	ldrh	r3, [r3, #0]
 800100a:	2207      	movs	r2, #7
 800100c:	4013      	ands	r3, r2
 800100e:	2280      	movs	r2, #128	@ 0x80
 8001010:	411a      	asrs	r2, r3
 8001012:	0013      	movs	r3, r2
 8001014:	b25b      	sxtb	r3, r3
 8001016:	43db      	mvns	r3, r3
 8001018:	b25b      	sxtb	r3, r3
 800101a:	187a      	adds	r2, r7, r1
 800101c:	7812      	ldrb	r2, [r2, #0]
 800101e:	b252      	sxtb	r2, r2
 8001020:	4013      	ands	r3, r2
 8001022:	b259      	sxtb	r1, r3
 8001024:	4b33      	ldr	r3, [pc, #204]	@ (80010f4 <Paint_SetPixel+0x2b0>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	18d3      	adds	r3, r2, r3
 800102c:	b2ca      	uxtb	r2, r1
 800102e:	701a      	strb	r2, [r3, #0]
 8001030:	e0d5      	b.n	80011de <Paint_SetPixel+0x39a>
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 8001032:	2326      	movs	r3, #38	@ 0x26
 8001034:	18fb      	adds	r3, r7, r3
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	2207      	movs	r2, #7
 800103a:	4013      	ands	r3, r2
 800103c:	2280      	movs	r2, #128	@ 0x80
 800103e:	411a      	asrs	r2, r3
 8001040:	0013      	movs	r3, r2
 8001042:	b25a      	sxtb	r2, r3
 8001044:	230b      	movs	r3, #11
 8001046:	18fb      	adds	r3, r7, r3
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	b25b      	sxtb	r3, r3
 800104c:	4313      	orrs	r3, r2
 800104e:	b259      	sxtb	r1, r3
 8001050:	4b28      	ldr	r3, [pc, #160]	@ (80010f4 <Paint_SetPixel+0x2b0>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	18d3      	adds	r3, r2, r3
 8001058:	b2ca      	uxtb	r2, r1
 800105a:	701a      	strb	r2, [r3, #0]
 800105c:	e0bf      	b.n	80011de <Paint_SetPixel+0x39a>
    }else if(Paint.Scale == 4){
 800105e:	4b25      	ldr	r3, [pc, #148]	@ (80010f4 <Paint_SetPixel+0x2b0>)
 8001060:	8adb      	ldrh	r3, [r3, #22]
 8001062:	2b04      	cmp	r3, #4
 8001064:	d14a      	bne.n	80010fc <Paint_SetPixel+0x2b8>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 8001066:	2426      	movs	r4, #38	@ 0x26
 8001068:	193b      	adds	r3, r7, r4
 800106a:	881b      	ldrh	r3, [r3, #0]
 800106c:	089b      	lsrs	r3, r3, #2
 800106e:	b29b      	uxth	r3, r3
 8001070:	0019      	movs	r1, r3
 8001072:	2324      	movs	r3, #36	@ 0x24
 8001074:	18fb      	adds	r3, r7, r3
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	4a1e      	ldr	r2, [pc, #120]	@ (80010f4 <Paint_SetPixel+0x2b0>)
 800107a:	8a52      	ldrh	r2, [r2, #18]
 800107c:	4353      	muls	r3, r2
 800107e:	18cb      	adds	r3, r1, r3
 8001080:	617b      	str	r3, [r7, #20]
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
 8001082:	1cbb      	adds	r3, r7, #2
 8001084:	1cba      	adds	r2, r7, #2
 8001086:	8812      	ldrh	r2, [r2, #0]
 8001088:	2103      	movs	r1, #3
 800108a:	400a      	ands	r2, r1
 800108c:	801a      	strh	r2, [r3, #0]
        UBYTE Rdata = Paint.Image[Addr];
 800108e:	4b19      	ldr	r3, [pc, #100]	@ (80010f4 <Paint_SetPixel+0x2b0>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	18d2      	adds	r2, r2, r3
 8001096:	2013      	movs	r0, #19
 8001098:	183b      	adds	r3, r7, r0
 800109a:	7812      	ldrb	r2, [r2, #0]
 800109c:	701a      	strb	r2, [r3, #0]
        
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 800109e:	0021      	movs	r1, r4
 80010a0:	187b      	adds	r3, r7, r1
 80010a2:	881b      	ldrh	r3, [r3, #0]
 80010a4:	2203      	movs	r2, #3
 80010a6:	4013      	ands	r3, r2
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	22c0      	movs	r2, #192	@ 0xc0
 80010ac:	411a      	asrs	r2, r3
 80010ae:	0013      	movs	r3, r2
 80010b0:	b25b      	sxtb	r3, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	b25b      	sxtb	r3, r3
 80010b6:	183a      	adds	r2, r7, r0
 80010b8:	7812      	ldrb	r2, [r2, #0]
 80010ba:	b252      	sxtb	r2, r2
 80010bc:	4013      	ands	r3, r2
 80010be:	b25a      	sxtb	r2, r3
 80010c0:	183b      	adds	r3, r7, r0
 80010c2:	701a      	strb	r2, [r3, #0]
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 80010c4:	1cbb      	adds	r3, r7, #2
 80010c6:	881b      	ldrh	r3, [r3, #0]
 80010c8:	019a      	lsls	r2, r3, #6
 80010ca:	187b      	adds	r3, r7, r1
 80010cc:	881b      	ldrh	r3, [r3, #0]
 80010ce:	2103      	movs	r1, #3
 80010d0:	400b      	ands	r3, r1
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	411a      	asrs	r2, r3
 80010d6:	0013      	movs	r3, r2
 80010d8:	b25a      	sxtb	r2, r3
 80010da:	183b      	adds	r3, r7, r0
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	b25b      	sxtb	r3, r3
 80010e0:	4313      	orrs	r3, r2
 80010e2:	b259      	sxtb	r1, r3
 80010e4:	4b03      	ldr	r3, [pc, #12]	@ (80010f4 <Paint_SetPixel+0x2b0>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	18d3      	adds	r3, r2, r3
 80010ec:	b2ca      	uxtb	r2, r1
 80010ee:	701a      	strb	r2, [r3, #0]
 80010f0:	e075      	b.n	80011de <Paint_SetPixel+0x39a>
 80010f2:	46c0      	nop			@ (mov r8, r8)
 80010f4:	20000170 	.word	0x20000170
 80010f8:	08004424 	.word	0x08004424
    }else if(Paint.Scale == 16) {
 80010fc:	4b39      	ldr	r3, [pc, #228]	@ (80011e4 <Paint_SetPixel+0x3a0>)
 80010fe:	8adb      	ldrh	r3, [r3, #22]
 8001100:	2b10      	cmp	r3, #16
 8001102:	d145      	bne.n	8001190 <Paint_SetPixel+0x34c>
        UDOUBLE Addr = X / 2 + Y * Paint.WidthByte;
 8001104:	2426      	movs	r4, #38	@ 0x26
 8001106:	193b      	adds	r3, r7, r4
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	085b      	lsrs	r3, r3, #1
 800110c:	b29b      	uxth	r3, r3
 800110e:	0019      	movs	r1, r3
 8001110:	2324      	movs	r3, #36	@ 0x24
 8001112:	18fb      	adds	r3, r7, r3
 8001114:	881b      	ldrh	r3, [r3, #0]
 8001116:	4a33      	ldr	r2, [pc, #204]	@ (80011e4 <Paint_SetPixel+0x3a0>)
 8001118:	8a52      	ldrh	r2, [r2, #18]
 800111a:	4353      	muls	r3, r2
 800111c:	18cb      	adds	r3, r1, r3
 800111e:	61fb      	str	r3, [r7, #28]
        UBYTE Rdata = Paint.Image[Addr];
 8001120:	4b30      	ldr	r3, [pc, #192]	@ (80011e4 <Paint_SetPixel+0x3a0>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	18d2      	adds	r2, r2, r3
 8001128:	201b      	movs	r0, #27
 800112a:	183b      	adds	r3, r7, r0
 800112c:	7812      	ldrb	r2, [r2, #0]
 800112e:	701a      	strb	r2, [r3, #0]
        Color = Color % 16;
 8001130:	1cbb      	adds	r3, r7, #2
 8001132:	1cba      	adds	r2, r7, #2
 8001134:	8812      	ldrh	r2, [r2, #0]
 8001136:	210f      	movs	r1, #15
 8001138:	400a      	ands	r2, r1
 800113a:	801a      	strh	r2, [r3, #0]
        Rdata = Rdata & (~(0xf0 >> ((X % 2)*4)));
 800113c:	0021      	movs	r1, r4
 800113e:	187b      	adds	r3, r7, r1
 8001140:	881b      	ldrh	r3, [r3, #0]
 8001142:	2201      	movs	r2, #1
 8001144:	4013      	ands	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	22f0      	movs	r2, #240	@ 0xf0
 800114a:	411a      	asrs	r2, r3
 800114c:	0013      	movs	r3, r2
 800114e:	b25b      	sxtb	r3, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	b25b      	sxtb	r3, r3
 8001154:	183a      	adds	r2, r7, r0
 8001156:	7812      	ldrb	r2, [r2, #0]
 8001158:	b252      	sxtb	r2, r2
 800115a:	4013      	ands	r3, r2
 800115c:	b25a      	sxtb	r2, r3
 800115e:	183b      	adds	r3, r7, r0
 8001160:	701a      	strb	r2, [r3, #0]
        Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 8001162:	1cbb      	adds	r3, r7, #2
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	011a      	lsls	r2, r3, #4
 8001168:	187b      	adds	r3, r7, r1
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	2101      	movs	r1, #1
 800116e:	400b      	ands	r3, r1
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	411a      	asrs	r2, r3
 8001174:	0013      	movs	r3, r2
 8001176:	b25a      	sxtb	r2, r3
 8001178:	183b      	adds	r3, r7, r0
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	b25b      	sxtb	r3, r3
 800117e:	4313      	orrs	r3, r2
 8001180:	b259      	sxtb	r1, r3
 8001182:	4b18      	ldr	r3, [pc, #96]	@ (80011e4 <Paint_SetPixel+0x3a0>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	18d3      	adds	r3, r2, r3
 800118a:	b2ca      	uxtb	r2, r1
 800118c:	701a      	strb	r2, [r3, #0]
 800118e:	e026      	b.n	80011de <Paint_SetPixel+0x39a>
    }else if(Paint.Scale == 65) {
 8001190:	4b14      	ldr	r3, [pc, #80]	@ (80011e4 <Paint_SetPixel+0x3a0>)
 8001192:	8adb      	ldrh	r3, [r3, #22]
 8001194:	2b41      	cmp	r3, #65	@ 0x41
 8001196:	d122      	bne.n	80011de <Paint_SetPixel+0x39a>
        UDOUBLE Addr = X*2 + Y*Paint.WidthByte;
 8001198:	2326      	movs	r3, #38	@ 0x26
 800119a:	18fb      	adds	r3, r7, r3
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	005a      	lsls	r2, r3, #1
 80011a0:	2324      	movs	r3, #36	@ 0x24
 80011a2:	18fb      	adds	r3, r7, r3
 80011a4:	881b      	ldrh	r3, [r3, #0]
 80011a6:	490f      	ldr	r1, [pc, #60]	@ (80011e4 <Paint_SetPixel+0x3a0>)
 80011a8:	8a49      	ldrh	r1, [r1, #18]
 80011aa:	434b      	muls	r3, r1
 80011ac:	18d3      	adds	r3, r2, r3
 80011ae:	623b      	str	r3, [r7, #32]
        Paint.Image[Addr] = 0xff & (Color>>8);
 80011b0:	1cbb      	adds	r3, r7, #2
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	0a1b      	lsrs	r3, r3, #8
 80011b6:	b299      	uxth	r1, r3
 80011b8:	4b0a      	ldr	r3, [pc, #40]	@ (80011e4 <Paint_SetPixel+0x3a0>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	6a3b      	ldr	r3, [r7, #32]
 80011be:	18d3      	adds	r3, r2, r3
 80011c0:	b2ca      	uxtb	r2, r1
 80011c2:	701a      	strb	r2, [r3, #0]
        Paint.Image[Addr+1] = 0xff & Color;
 80011c4:	4b07      	ldr	r3, [pc, #28]	@ (80011e4 <Paint_SetPixel+0x3a0>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	6a3b      	ldr	r3, [r7, #32]
 80011ca:	3301      	adds	r3, #1
 80011cc:	18d3      	adds	r3, r2, r3
 80011ce:	1cba      	adds	r2, r7, #2
 80011d0:	8812      	ldrh	r2, [r2, #0]
 80011d2:	b2d2      	uxtb	r2, r2
 80011d4:	701a      	strb	r2, [r3, #0]
 80011d6:	e002      	b.n	80011de <Paint_SetPixel+0x39a>
        return;
 80011d8:	46c0      	nop			@ (mov r8, r8)
 80011da:	e000      	b.n	80011de <Paint_SetPixel+0x39a>
        return;
 80011dc:	46c0      	nop			@ (mov r8, r8)
    }
}
 80011de:	46bd      	mov	sp, r7
 80011e0:	b00b      	add	sp, #44	@ 0x2c
 80011e2:	bd90      	pop	{r4, r7, pc}
 80011e4:	20000170 	.word	0x20000170

080011e8 <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	0002      	movs	r2, r0
 80011f0:	1dbb      	adds	r3, r7, #6
 80011f2:	801a      	strh	r2, [r3, #0]
    if(Paint.Scale == 2 || Paint.Scale == 4) {
 80011f4:	4b6b      	ldr	r3, [pc, #428]	@ (80013a4 <Paint_Clear+0x1bc>)
 80011f6:	8adb      	ldrh	r3, [r3, #22]
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d003      	beq.n	8001204 <Paint_Clear+0x1c>
 80011fc:	4b69      	ldr	r3, [pc, #420]	@ (80013a4 <Paint_Clear+0x1bc>)
 80011fe:	8adb      	ldrh	r3, [r3, #22]
 8001200:	2b04      	cmp	r3, #4
 8001202:	d136      	bne.n	8001272 <Paint_Clear+0x8a>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8001204:	231e      	movs	r3, #30
 8001206:	18fb      	adds	r3, r7, r3
 8001208:	2200      	movs	r2, #0
 800120a:	801a      	strh	r2, [r3, #0]
 800120c:	e029      	b.n	8001262 <Paint_Clear+0x7a>
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800120e:	231c      	movs	r3, #28
 8001210:	18fb      	adds	r3, r7, r3
 8001212:	2200      	movs	r2, #0
 8001214:	801a      	strh	r2, [r3, #0]
 8001216:	e017      	b.n	8001248 <Paint_Clear+0x60>
                UDOUBLE Addr = X + Y*Paint.WidthByte;
 8001218:	201c      	movs	r0, #28
 800121a:	183b      	adds	r3, r7, r0
 800121c:	881a      	ldrh	r2, [r3, #0]
 800121e:	231e      	movs	r3, #30
 8001220:	18fb      	adds	r3, r7, r3
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	495f      	ldr	r1, [pc, #380]	@ (80013a4 <Paint_Clear+0x1bc>)
 8001226:	8a49      	ldrh	r1, [r1, #18]
 8001228:	434b      	muls	r3, r1
 800122a:	18d3      	adds	r3, r2, r3
 800122c:	60bb      	str	r3, [r7, #8]
                Paint.Image[Addr] = Color;
 800122e:	4b5d      	ldr	r3, [pc, #372]	@ (80013a4 <Paint_Clear+0x1bc>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	18d3      	adds	r3, r2, r3
 8001236:	1dba      	adds	r2, r7, #6
 8001238:	8812      	ldrh	r2, [r2, #0]
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	701a      	strb	r2, [r3, #0]
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800123e:	183b      	adds	r3, r7, r0
 8001240:	881a      	ldrh	r2, [r3, #0]
 8001242:	183b      	adds	r3, r7, r0
 8001244:	3201      	adds	r2, #1
 8001246:	801a      	strh	r2, [r3, #0]
 8001248:	4b56      	ldr	r3, [pc, #344]	@ (80013a4 <Paint_Clear+0x1bc>)
 800124a:	8a5b      	ldrh	r3, [r3, #18]
 800124c:	221c      	movs	r2, #28
 800124e:	18ba      	adds	r2, r7, r2
 8001250:	8812      	ldrh	r2, [r2, #0]
 8001252:	429a      	cmp	r2, r3
 8001254:	d3e0      	bcc.n	8001218 <Paint_Clear+0x30>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8001256:	211e      	movs	r1, #30
 8001258:	187b      	adds	r3, r7, r1
 800125a:	881a      	ldrh	r2, [r3, #0]
 800125c:	187b      	adds	r3, r7, r1
 800125e:	3201      	adds	r2, #1
 8001260:	801a      	strh	r2, [r3, #0]
 8001262:	4b50      	ldr	r3, [pc, #320]	@ (80013a4 <Paint_Clear+0x1bc>)
 8001264:	8a9b      	ldrh	r3, [r3, #20]
 8001266:	221e      	movs	r2, #30
 8001268:	18ba      	adds	r2, r7, r2
 800126a:	8812      	ldrh	r2, [r2, #0]
 800126c:	429a      	cmp	r2, r3
 800126e:	d3ce      	bcc.n	800120e <Paint_Clear+0x26>
 8001270:	e094      	b.n	800139c <Paint_Clear+0x1b4>
            }
        }
    }else if(Paint.Scale == 16) {
 8001272:	4b4c      	ldr	r3, [pc, #304]	@ (80013a4 <Paint_Clear+0x1bc>)
 8001274:	8adb      	ldrh	r3, [r3, #22]
 8001276:	2b10      	cmp	r3, #16
 8001278:	d143      	bne.n	8001302 <Paint_Clear+0x11a>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800127a:	231a      	movs	r3, #26
 800127c:	18fb      	adds	r3, r7, r3
 800127e:	2200      	movs	r2, #0
 8001280:	801a      	strh	r2, [r3, #0]
 8001282:	e036      	b.n	80012f2 <Paint_Clear+0x10a>
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8001284:	2318      	movs	r3, #24
 8001286:	18fb      	adds	r3, r7, r3
 8001288:	2200      	movs	r2, #0
 800128a:	801a      	strh	r2, [r3, #0]
 800128c:	e024      	b.n	80012d8 <Paint_Clear+0xf0>
                UDOUBLE Addr = X + Y*Paint.WidthByte;
 800128e:	2018      	movs	r0, #24
 8001290:	183b      	adds	r3, r7, r0
 8001292:	881a      	ldrh	r2, [r3, #0]
 8001294:	231a      	movs	r3, #26
 8001296:	18fb      	adds	r3, r7, r3
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	4942      	ldr	r1, [pc, #264]	@ (80013a4 <Paint_Clear+0x1bc>)
 800129c:	8a49      	ldrh	r1, [r1, #18]
 800129e:	434b      	muls	r3, r1
 80012a0:	18d3      	adds	r3, r2, r3
 80012a2:	60fb      	str	r3, [r7, #12]
                Color = Color & 0x0f;
 80012a4:	1dbb      	adds	r3, r7, #6
 80012a6:	1dba      	adds	r2, r7, #6
 80012a8:	8812      	ldrh	r2, [r2, #0]
 80012aa:	210f      	movs	r1, #15
 80012ac:	400a      	ands	r2, r1
 80012ae:	801a      	strh	r2, [r3, #0]
                Paint.Image[Addr] = (Color<<4) | Color;
 80012b0:	1dbb      	adds	r3, r7, #6
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	011b      	lsls	r3, r3, #4
 80012b6:	b25a      	sxtb	r2, r3
 80012b8:	1dbb      	adds	r3, r7, #6
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	b25b      	sxtb	r3, r3
 80012be:	4313      	orrs	r3, r2
 80012c0:	b259      	sxtb	r1, r3
 80012c2:	4b38      	ldr	r3, [pc, #224]	@ (80013a4 <Paint_Clear+0x1bc>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	18d3      	adds	r3, r2, r3
 80012ca:	b2ca      	uxtb	r2, r1
 80012cc:	701a      	strb	r2, [r3, #0]
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 80012ce:	183b      	adds	r3, r7, r0
 80012d0:	881a      	ldrh	r2, [r3, #0]
 80012d2:	183b      	adds	r3, r7, r0
 80012d4:	3201      	adds	r2, #1
 80012d6:	801a      	strh	r2, [r3, #0]
 80012d8:	4b32      	ldr	r3, [pc, #200]	@ (80013a4 <Paint_Clear+0x1bc>)
 80012da:	8a5b      	ldrh	r3, [r3, #18]
 80012dc:	2218      	movs	r2, #24
 80012de:	18ba      	adds	r2, r7, r2
 80012e0:	8812      	ldrh	r2, [r2, #0]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d3d3      	bcc.n	800128e <Paint_Clear+0xa6>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80012e6:	211a      	movs	r1, #26
 80012e8:	187b      	adds	r3, r7, r1
 80012ea:	881a      	ldrh	r2, [r3, #0]
 80012ec:	187b      	adds	r3, r7, r1
 80012ee:	3201      	adds	r2, #1
 80012f0:	801a      	strh	r2, [r3, #0]
 80012f2:	4b2c      	ldr	r3, [pc, #176]	@ (80013a4 <Paint_Clear+0x1bc>)
 80012f4:	8a9b      	ldrh	r3, [r3, #20]
 80012f6:	221a      	movs	r2, #26
 80012f8:	18ba      	adds	r2, r7, r2
 80012fa:	8812      	ldrh	r2, [r2, #0]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d3c1      	bcc.n	8001284 <Paint_Clear+0x9c>
                Paint.Image[Addr] = 0x0f & (Color>>8);
                Paint.Image[Addr+1] = 0x0f & Color;
            }
        }
    }
}
 8001300:	e04c      	b.n	800139c <Paint_Clear+0x1b4>
    }else if(Paint.Scale == 65) {
 8001302:	4b28      	ldr	r3, [pc, #160]	@ (80013a4 <Paint_Clear+0x1bc>)
 8001304:	8adb      	ldrh	r3, [r3, #22]
 8001306:	2b41      	cmp	r3, #65	@ 0x41
 8001308:	d148      	bne.n	800139c <Paint_Clear+0x1b4>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800130a:	2316      	movs	r3, #22
 800130c:	18fb      	adds	r3, r7, r3
 800130e:	2200      	movs	r2, #0
 8001310:	801a      	strh	r2, [r3, #0]
 8001312:	e03b      	b.n	800138c <Paint_Clear+0x1a4>
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8001314:	2314      	movs	r3, #20
 8001316:	18fb      	adds	r3, r7, r3
 8001318:	2200      	movs	r2, #0
 800131a:	801a      	strh	r2, [r3, #0]
 800131c:	e029      	b.n	8001372 <Paint_Clear+0x18a>
                UDOUBLE Addr = X*2 + Y*Paint.WidthByte;
 800131e:	2014      	movs	r0, #20
 8001320:	183b      	adds	r3, r7, r0
 8001322:	881b      	ldrh	r3, [r3, #0]
 8001324:	005a      	lsls	r2, r3, #1
 8001326:	2316      	movs	r3, #22
 8001328:	18fb      	adds	r3, r7, r3
 800132a:	881b      	ldrh	r3, [r3, #0]
 800132c:	491d      	ldr	r1, [pc, #116]	@ (80013a4 <Paint_Clear+0x1bc>)
 800132e:	8a49      	ldrh	r1, [r1, #18]
 8001330:	434b      	muls	r3, r1
 8001332:	18d3      	adds	r3, r2, r3
 8001334:	613b      	str	r3, [r7, #16]
                Paint.Image[Addr] = 0x0f & (Color>>8);
 8001336:	1dbb      	adds	r3, r7, #6
 8001338:	881b      	ldrh	r3, [r3, #0]
 800133a:	0a1b      	lsrs	r3, r3, #8
 800133c:	b29b      	uxth	r3, r3
 800133e:	b2da      	uxtb	r2, r3
 8001340:	4b18      	ldr	r3, [pc, #96]	@ (80013a4 <Paint_Clear+0x1bc>)
 8001342:	6819      	ldr	r1, [r3, #0]
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	18cb      	adds	r3, r1, r3
 8001348:	210f      	movs	r1, #15
 800134a:	400a      	ands	r2, r1
 800134c:	b2d2      	uxtb	r2, r2
 800134e:	701a      	strb	r2, [r3, #0]
                Paint.Image[Addr+1] = 0x0f & Color;
 8001350:	1dbb      	adds	r3, r7, #6
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	b2da      	uxtb	r2, r3
 8001356:	4b13      	ldr	r3, [pc, #76]	@ (80013a4 <Paint_Clear+0x1bc>)
 8001358:	6819      	ldr	r1, [r3, #0]
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	3301      	adds	r3, #1
 800135e:	18cb      	adds	r3, r1, r3
 8001360:	210f      	movs	r1, #15
 8001362:	400a      	ands	r2, r1
 8001364:	b2d2      	uxtb	r2, r2
 8001366:	701a      	strb	r2, [r3, #0]
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8001368:	183b      	adds	r3, r7, r0
 800136a:	881a      	ldrh	r2, [r3, #0]
 800136c:	183b      	adds	r3, r7, r0
 800136e:	3201      	adds	r2, #1
 8001370:	801a      	strh	r2, [r3, #0]
 8001372:	4b0c      	ldr	r3, [pc, #48]	@ (80013a4 <Paint_Clear+0x1bc>)
 8001374:	8a5b      	ldrh	r3, [r3, #18]
 8001376:	2214      	movs	r2, #20
 8001378:	18ba      	adds	r2, r7, r2
 800137a:	8812      	ldrh	r2, [r2, #0]
 800137c:	429a      	cmp	r2, r3
 800137e:	d3ce      	bcc.n	800131e <Paint_Clear+0x136>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8001380:	2116      	movs	r1, #22
 8001382:	187b      	adds	r3, r7, r1
 8001384:	881a      	ldrh	r2, [r3, #0]
 8001386:	187b      	adds	r3, r7, r1
 8001388:	3201      	adds	r2, #1
 800138a:	801a      	strh	r2, [r3, #0]
 800138c:	4b05      	ldr	r3, [pc, #20]	@ (80013a4 <Paint_Clear+0x1bc>)
 800138e:	8a9b      	ldrh	r3, [r3, #20]
 8001390:	2216      	movs	r2, #22
 8001392:	18ba      	adds	r2, r7, r2
 8001394:	8812      	ldrh	r2, [r2, #0]
 8001396:	429a      	cmp	r2, r3
 8001398:	d3bc      	bcc.n	8001314 <Paint_Clear+0x12c>
}
 800139a:	e7ff      	b.n	800139c <Paint_Clear+0x1b4>
 800139c:	46c0      	nop			@ (mov r8, r8)
 800139e:	46bd      	mov	sp, r7
 80013a0:	b008      	add	sp, #32
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000170 	.word	0x20000170

080013a8 <Paint_DrawChar>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 80013a8:	b5b0      	push	{r4, r5, r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	0004      	movs	r4, r0
 80013b0:	0008      	movs	r0, r1
 80013b2:	0011      	movs	r1, r2
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	250e      	movs	r5, #14
 80013b8:	197b      	adds	r3, r7, r5
 80013ba:	1c22      	adds	r2, r4, #0
 80013bc:	801a      	strh	r2, [r3, #0]
 80013be:	240c      	movs	r4, #12
 80013c0:	193b      	adds	r3, r7, r4
 80013c2:	1c02      	adds	r2, r0, #0
 80013c4:	801a      	strh	r2, [r3, #0]
 80013c6:	230b      	movs	r3, #11
 80013c8:	18fb      	adds	r3, r7, r3
 80013ca:	1c0a      	adds	r2, r1, #0
 80013cc:	701a      	strb	r2, [r3, #0]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 80013ce:	4b51      	ldr	r3, [pc, #324]	@ (8001514 <Paint_DrawChar+0x16c>)
 80013d0:	889b      	ldrh	r3, [r3, #4]
 80013d2:	197a      	adds	r2, r7, r5
 80013d4:	8812      	ldrh	r2, [r2, #0]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d805      	bhi.n	80013e6 <Paint_DrawChar+0x3e>
 80013da:	4b4e      	ldr	r3, [pc, #312]	@ (8001514 <Paint_DrawChar+0x16c>)
 80013dc:	88db      	ldrh	r3, [r3, #6]
 80013de:	193a      	adds	r2, r7, r4
 80013e0:	8812      	ldrh	r2, [r2, #0]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d904      	bls.n	80013f0 <Paint_DrawChar+0x48>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 80013e6:	4b4c      	ldr	r3, [pc, #304]	@ (8001518 <Paint_DrawChar+0x170>)
 80013e8:	0018      	movs	r0, r3
 80013ea:	f002 f8bf 	bl	800356c <puts>
        return;
 80013ee:	e08e      	b.n	800150e <Paint_DrawChar+0x166>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 80013f0:	230b      	movs	r3, #11
 80013f2:	18fb      	adds	r3, r7, r3
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	3b20      	subs	r3, #32
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	88d2      	ldrh	r2, [r2, #6]
 80013fc:	4353      	muls	r3, r2
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	8892      	ldrh	r2, [r2, #4]
 8001402:	08d2      	lsrs	r2, r2, #3
 8001404:	b292      	uxth	r2, r2
 8001406:	0010      	movs	r0, r2
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	8892      	ldrh	r2, [r2, #4]
 800140c:	2107      	movs	r1, #7
 800140e:	400a      	ands	r2, r1
 8001410:	b292      	uxth	r2, r2
 8001412:	1e51      	subs	r1, r2, #1
 8001414:	418a      	sbcs	r2, r1
 8001416:	b2d2      	uxtb	r2, r2
 8001418:	1882      	adds	r2, r0, r2
 800141a:	4353      	muls	r3, r2
 800141c:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	18d3      	adds	r3, r2, r3
 8001426:	61fb      	str	r3, [r7, #28]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 8001428:	231a      	movs	r3, #26
 800142a:	18fb      	adds	r3, r7, r3
 800142c:	2200      	movs	r2, #0
 800142e:	801a      	strh	r2, [r3, #0]
 8001430:	e065      	b.n	80014fe <Paint_DrawChar+0x156>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8001432:	2318      	movs	r3, #24
 8001434:	18fb      	adds	r3, r7, r3
 8001436:	2200      	movs	r2, #0
 8001438:	801a      	strh	r2, [r3, #0]
 800143a:	e049      	b.n	80014d0 <Paint_DrawChar+0x128>

            //To determine whether the font background color and screen background color is consistent
        	if (WHITE == FONT_BACKGROUND) { //this process is to speed up the scan
				if (*ptr & (0x80 >> (Column % 8))){
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	0019      	movs	r1, r3
 8001442:	2018      	movs	r0, #24
 8001444:	183b      	adds	r3, r7, r0
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	2207      	movs	r2, #7
 800144a:	4013      	ands	r3, r2
 800144c:	2280      	movs	r2, #128	@ 0x80
 800144e:	411a      	asrs	r2, r3
 8001450:	0013      	movs	r3, r2
 8001452:	400b      	ands	r3, r1
 8001454:	d015      	beq.n	8001482 <Paint_DrawChar+0xda>
					Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8001456:	230e      	movs	r3, #14
 8001458:	18fa      	adds	r2, r7, r3
 800145a:	183b      	adds	r3, r7, r0
 800145c:	8812      	ldrh	r2, [r2, #0]
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	18d3      	adds	r3, r2, r3
 8001462:	b298      	uxth	r0, r3
 8001464:	230c      	movs	r3, #12
 8001466:	18fa      	adds	r2, r7, r3
 8001468:	231a      	movs	r3, #26
 800146a:	18fb      	adds	r3, r7, r3
 800146c:	8812      	ldrh	r2, [r2, #0]
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	18d3      	adds	r3, r2, r3
 8001472:	b299      	uxth	r1, r3
 8001474:	2330      	movs	r3, #48	@ 0x30
 8001476:	18fb      	adds	r3, r7, r3
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	001a      	movs	r2, r3
 800147c:	f7ff fce2 	bl	8000e44 <Paint_SetPixel>
 8001480:	e015      	b.n	80014ae <Paint_DrawChar+0x106>
					// Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
				}
				else{
					Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8001482:	230e      	movs	r3, #14
 8001484:	18fa      	adds	r2, r7, r3
 8001486:	2318      	movs	r3, #24
 8001488:	18fb      	adds	r3, r7, r3
 800148a:	8812      	ldrh	r2, [r2, #0]
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	18d3      	adds	r3, r2, r3
 8001490:	b298      	uxth	r0, r3
 8001492:	230c      	movs	r3, #12
 8001494:	18fa      	adds	r2, r7, r3
 8001496:	231a      	movs	r3, #26
 8001498:	18fb      	adds	r3, r7, r3
 800149a:	8812      	ldrh	r2, [r2, #0]
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	18d3      	adds	r3, r2, r3
 80014a0:	b299      	uxth	r1, r3
 80014a2:	2334      	movs	r3, #52	@ 0x34
 80014a4:	18fb      	adds	r3, r7, r3
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	001a      	movs	r2, r3
 80014aa:	f7ff fccb 	bl	8000e44 <Paint_SetPixel>
					Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
					// Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
				}
			}
            //One pixel is 8 bits
            if (Column % 8 == 7)
 80014ae:	2318      	movs	r3, #24
 80014b0:	18fb      	adds	r3, r7, r3
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	2207      	movs	r2, #7
 80014b6:	4013      	ands	r3, r2
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	2b07      	cmp	r3, #7
 80014bc:	d102      	bne.n	80014c4 <Paint_DrawChar+0x11c>
                ptr++;
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3301      	adds	r3, #1
 80014c2:	61fb      	str	r3, [r7, #28]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 80014c4:	2118      	movs	r1, #24
 80014c6:	187b      	adds	r3, r7, r1
 80014c8:	881a      	ldrh	r2, [r3, #0]
 80014ca:	187b      	adds	r3, r7, r1
 80014cc:	3201      	adds	r2, #1
 80014ce:	801a      	strh	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	889b      	ldrh	r3, [r3, #4]
 80014d4:	2218      	movs	r2, #24
 80014d6:	18ba      	adds	r2, r7, r2
 80014d8:	8812      	ldrh	r2, [r2, #0]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d3ae      	bcc.n	800143c <Paint_DrawChar+0x94>
        }// Write a line
        if (Font->Width % 8 != 0)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	889b      	ldrh	r3, [r3, #4]
 80014e2:	2207      	movs	r2, #7
 80014e4:	4013      	ands	r3, r2
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d002      	beq.n	80014f2 <Paint_DrawChar+0x14a>
            ptr++;
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	3301      	adds	r3, #1
 80014f0:	61fb      	str	r3, [r7, #28]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 80014f2:	211a      	movs	r1, #26
 80014f4:	187b      	adds	r3, r7, r1
 80014f6:	881a      	ldrh	r2, [r3, #0]
 80014f8:	187b      	adds	r3, r7, r1
 80014fa:	3201      	adds	r2, #1
 80014fc:	801a      	strh	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	88db      	ldrh	r3, [r3, #6]
 8001502:	221a      	movs	r2, #26
 8001504:	18ba      	adds	r2, r7, r2
 8001506:	8812      	ldrh	r2, [r2, #0]
 8001508:	429a      	cmp	r2, r3
 800150a:	d200      	bcs.n	800150e <Paint_DrawChar+0x166>
 800150c:	e791      	b.n	8001432 <Paint_DrawChar+0x8a>
    }// Write all
}
 800150e:	46bd      	mov	sp, r7
 8001510:	b008      	add	sp, #32
 8001512:	bdb0      	pop	{r4, r5, r7, pc}
 8001514:	20000170 	.word	0x20000170
 8001518:	08004588 	.word	0x08004588

0800151c <Paint_DrawString_EN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 800151c:	b5b0      	push	{r4, r5, r7, lr}
 800151e:	b088      	sub	sp, #32
 8001520:	af02      	add	r7, sp, #8
 8001522:	60ba      	str	r2, [r7, #8]
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	240e      	movs	r4, #14
 8001528:	193b      	adds	r3, r7, r4
 800152a:	1c02      	adds	r2, r0, #0
 800152c:	801a      	strh	r2, [r3, #0]
 800152e:	200c      	movs	r0, #12
 8001530:	183b      	adds	r3, r7, r0
 8001532:	1c0a      	adds	r2, r1, #0
 8001534:	801a      	strh	r2, [r3, #0]
    UWORD Xpoint = Xstart;
 8001536:	2316      	movs	r3, #22
 8001538:	18fb      	adds	r3, r7, r3
 800153a:	0021      	movs	r1, r4
 800153c:	187a      	adds	r2, r7, r1
 800153e:	8812      	ldrh	r2, [r2, #0]
 8001540:	801a      	strh	r2, [r3, #0]
    UWORD Ypoint = Ystart;
 8001542:	2314      	movs	r3, #20
 8001544:	18fb      	adds	r3, r7, r3
 8001546:	183a      	adds	r2, r7, r0
 8001548:	8812      	ldrh	r2, [r2, #0]
 800154a:	801a      	strh	r2, [r3, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 800154c:	4b30      	ldr	r3, [pc, #192]	@ (8001610 <Paint_DrawString_EN+0xf4>)
 800154e:	889b      	ldrh	r3, [r3, #4]
 8001550:	187a      	adds	r2, r7, r1
 8001552:	8812      	ldrh	r2, [r2, #0]
 8001554:	429a      	cmp	r2, r3
 8001556:	d805      	bhi.n	8001564 <Paint_DrawString_EN+0x48>
 8001558:	4b2d      	ldr	r3, [pc, #180]	@ (8001610 <Paint_DrawString_EN+0xf4>)
 800155a:	88db      	ldrh	r3, [r3, #6]
 800155c:	183a      	adds	r2, r7, r0
 800155e:	8812      	ldrh	r2, [r2, #0]
 8001560:	429a      	cmp	r2, r3
 8001562:	d94e      	bls.n	8001602 <Paint_DrawString_EN+0xe6>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 8001564:	4b2b      	ldr	r3, [pc, #172]	@ (8001614 <Paint_DrawString_EN+0xf8>)
 8001566:	0018      	movs	r0, r3
 8001568:	f002 f800 	bl	800356c <puts>
        return;
 800156c:	e04d      	b.n	800160a <Paint_DrawString_EN+0xee>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 800156e:	2116      	movs	r1, #22
 8001570:	187b      	adds	r3, r7, r1
 8001572:	881b      	ldrh	r3, [r3, #0]
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	8892      	ldrh	r2, [r2, #4]
 8001578:	189b      	adds	r3, r3, r2
 800157a:	4a25      	ldr	r2, [pc, #148]	@ (8001610 <Paint_DrawString_EN+0xf4>)
 800157c:	8892      	ldrh	r2, [r2, #4]
 800157e:	4293      	cmp	r3, r2
 8001580:	dd0c      	ble.n	800159c <Paint_DrawString_EN+0x80>
            Xpoint = Xstart;
 8001582:	187b      	adds	r3, r7, r1
 8001584:	220e      	movs	r2, #14
 8001586:	18ba      	adds	r2, r7, r2
 8001588:	8812      	ldrh	r2, [r2, #0]
 800158a:	801a      	strh	r2, [r3, #0]
            Ypoint += Font->Height;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	88d9      	ldrh	r1, [r3, #6]
 8001590:	2214      	movs	r2, #20
 8001592:	18bb      	adds	r3, r7, r2
 8001594:	18ba      	adds	r2, r7, r2
 8001596:	8812      	ldrh	r2, [r2, #0]
 8001598:	188a      	adds	r2, r1, r2
 800159a:	801a      	strh	r2, [r3, #0]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 800159c:	2114      	movs	r1, #20
 800159e:	187b      	adds	r3, r7, r1
 80015a0:	881b      	ldrh	r3, [r3, #0]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	88d2      	ldrh	r2, [r2, #6]
 80015a6:	189b      	adds	r3, r3, r2
 80015a8:	4a19      	ldr	r2, [pc, #100]	@ (8001610 <Paint_DrawString_EN+0xf4>)
 80015aa:	88d2      	ldrh	r2, [r2, #6]
 80015ac:	4293      	cmp	r3, r2
 80015ae:	dd0a      	ble.n	80015c6 <Paint_DrawString_EN+0xaa>
            Xpoint = Xstart;
 80015b0:	2316      	movs	r3, #22
 80015b2:	18fb      	adds	r3, r7, r3
 80015b4:	220e      	movs	r2, #14
 80015b6:	18ba      	adds	r2, r7, r2
 80015b8:	8812      	ldrh	r2, [r2, #0]
 80015ba:	801a      	strh	r2, [r3, #0]
            Ypoint = Ystart;
 80015bc:	187b      	adds	r3, r7, r1
 80015be:	220c      	movs	r2, #12
 80015c0:	18ba      	adds	r2, r7, r2
 80015c2:	8812      	ldrh	r2, [r2, #0]
 80015c4:	801a      	strh	r2, [r3, #0]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Foreground, Color_Background);
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	781a      	ldrb	r2, [r3, #0]
 80015ca:	687c      	ldr	r4, [r7, #4]
 80015cc:	2314      	movs	r3, #20
 80015ce:	18fb      	adds	r3, r7, r3
 80015d0:	8819      	ldrh	r1, [r3, #0]
 80015d2:	2516      	movs	r5, #22
 80015d4:	197b      	adds	r3, r7, r5
 80015d6:	8818      	ldrh	r0, [r3, #0]
 80015d8:	232c      	movs	r3, #44	@ 0x2c
 80015da:	18fb      	adds	r3, r7, r3
 80015dc:	881b      	ldrh	r3, [r3, #0]
 80015de:	9301      	str	r3, [sp, #4]
 80015e0:	2328      	movs	r3, #40	@ 0x28
 80015e2:	18fb      	adds	r3, r7, r3
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	0023      	movs	r3, r4
 80015ea:	f7ff fedd 	bl	80013a8 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	3301      	adds	r3, #1
 80015f2:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	8899      	ldrh	r1, [r3, #4]
 80015f8:	197b      	adds	r3, r7, r5
 80015fa:	197a      	adds	r2, r7, r5
 80015fc:	8812      	ldrh	r2, [r2, #0]
 80015fe:	188a      	adds	r2, r1, r2
 8001600:	801a      	strh	r2, [r3, #0]
    while (* pString != '\0') {
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1b1      	bne.n	800156e <Paint_DrawString_EN+0x52>
    }
}
 800160a:	46bd      	mov	sp, r7
 800160c:	b006      	add	sp, #24
 800160e:	bdb0      	pop	{r4, r5, r7, pc}
 8001610:	20000170 	.word	0x20000170
 8001614:	080045c8 	.word	0x080045c8

08001618 <OLED_0in96_Reset>:
/*******************************************************************************
function:
			Hardware reset
*******************************************************************************/
static void OLED_0in96_Reset(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
    OLED_RST_1;
 800161c:	4b0e      	ldr	r3, [pc, #56]	@ (8001658 <OLED_0in96_Reset+0x40>)
 800161e:	2201      	movs	r2, #1
 8001620:	2102      	movs	r1, #2
 8001622:	0018      	movs	r0, r3
 8001624:	f000 fbc7 	bl	8001db6 <HAL_GPIO_WritePin>
    Driver_Delay_ms(100);
 8001628:	2064      	movs	r0, #100	@ 0x64
 800162a:	f7ff f9bf 	bl	80009ac <Driver_Delay_ms>
    OLED_RST_0;
 800162e:	4b0a      	ldr	r3, [pc, #40]	@ (8001658 <OLED_0in96_Reset+0x40>)
 8001630:	2200      	movs	r2, #0
 8001632:	2102      	movs	r1, #2
 8001634:	0018      	movs	r0, r3
 8001636:	f000 fbbe 	bl	8001db6 <HAL_GPIO_WritePin>
    Driver_Delay_ms(100);
 800163a:	2064      	movs	r0, #100	@ 0x64
 800163c:	f7ff f9b6 	bl	80009ac <Driver_Delay_ms>
    OLED_RST_1;
 8001640:	4b05      	ldr	r3, [pc, #20]	@ (8001658 <OLED_0in96_Reset+0x40>)
 8001642:	2201      	movs	r2, #1
 8001644:	2102      	movs	r1, #2
 8001646:	0018      	movs	r0, r3
 8001648:	f000 fbb5 	bl	8001db6 <HAL_GPIO_WritePin>
    Driver_Delay_ms(100);
 800164c:	2064      	movs	r0, #100	@ 0x64
 800164e:	f7ff f9ad 	bl	80009ac <Driver_Delay_ms>
}
 8001652:	46c0      	nop			@ (mov r8, r8)
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	48000400 	.word	0x48000400

0800165c <OLED_0in96_WriteReg>:
/*******************************************************************************
function:
			Write register address and data
*******************************************************************************/
static void OLED_0in96_WriteReg(uint8_t Reg)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	0002      	movs	r2, r0
 8001664:	1dfb      	adds	r3, r7, #7
 8001666:	701a      	strb	r2, [r3, #0]
    OLED_DC_0;
    OLED_CS_0;
    SPI4W_Write_Byte(Reg);
    OLED_CS_1;
#elif USE_IIC_SOFT
	iic_start();
 8001668:	f7ff f9d6 	bl	8000a18 <iic_start>
	iic_write_byte(0x3D << 1);
 800166c:	207a      	movs	r0, #122	@ 0x7a
 800166e:	f7ff fa8f 	bl	8000b90 <iic_write_byte>
	iic_wait_for_ack();
 8001672:	f7ff fa3f 	bl	8000af4 <iic_wait_for_ack>
	iic_write_byte(0x00);
 8001676:	2000      	movs	r0, #0
 8001678:	f7ff fa8a 	bl	8000b90 <iic_write_byte>
	iic_wait_for_ack();
 800167c:	f7ff fa3a 	bl	8000af4 <iic_wait_for_ack>
	iic_write_byte(Reg);
 8001680:	1dfb      	adds	r3, r7, #7
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	0018      	movs	r0, r3
 8001686:	f7ff fa83 	bl	8000b90 <iic_write_byte>
	iic_wait_for_ack();
 800168a:	f7ff fa33 	bl	8000af4 <iic_wait_for_ack>
	iic_stop();
 800168e:	f7ff fa05 	bl	8000a9c <iic_stop>
#endif
}
 8001692:	46c0      	nop			@ (mov r8, r8)
 8001694:	46bd      	mov	sp, r7
 8001696:	b002      	add	sp, #8
 8001698:	bd80      	pop	{r7, pc}

0800169a <OLED_0in96_WriteData>:
/*******************************************************************************
function:
			Common register initialization
*******************************************************************************/
static void OLED_0in96_WriteData(uint8_t Data)
{	
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	0002      	movs	r2, r0
 80016a2:	1dfb      	adds	r3, r7, #7
 80016a4:	701a      	strb	r2, [r3, #0]
    OLED_DC_1;
    OLED_CS_0;
    SPI4W_Write_Byte(Data);
    OLED_CS_1;
#elif USE_IIC_SOFT	
	iic_start();
 80016a6:	f7ff f9b7 	bl	8000a18 <iic_start>
	iic_write_byte(0x3D << 1);
 80016aa:	207a      	movs	r0, #122	@ 0x7a
 80016ac:	f7ff fa70 	bl	8000b90 <iic_write_byte>
	iic_wait_for_ack();
 80016b0:	f7ff fa20 	bl	8000af4 <iic_wait_for_ack>
	iic_write_byte(0x40);
 80016b4:	2040      	movs	r0, #64	@ 0x40
 80016b6:	f7ff fa6b 	bl	8000b90 <iic_write_byte>
	iic_wait_for_ack();
 80016ba:	f7ff fa1b 	bl	8000af4 <iic_wait_for_ack>
	iic_write_byte(Data);
 80016be:	1dfb      	adds	r3, r7, #7
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	0018      	movs	r0, r3
 80016c4:	f7ff fa64 	bl	8000b90 <iic_write_byte>
	iic_wait_for_ack();
 80016c8:	f7ff fa14 	bl	8000af4 <iic_wait_for_ack>
	iic_stop();
 80016cc:	f7ff f9e6 	bl	8000a9c <iic_stop>
#endif
}
 80016d0:	46c0      	nop			@ (mov r8, r8)
 80016d2:	46bd      	mov	sp, r7
 80016d4:	b002      	add	sp, #8
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <OLED_0in96_InitReg>:

static void OLED_0in96_InitReg()
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
	OLED_0in96_WriteReg(SSD1306_DISPLAYOFF);
 80016dc:	20ae      	movs	r0, #174	@ 0xae
 80016de:	f7ff ffbd 	bl	800165c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(SSD1306_SETDISPLAYCLOCKDIV);
 80016e2:	20d5      	movs	r0, #213	@ 0xd5
 80016e4:	f7ff ffba 	bl	800165c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(0x80);                              // the suggested ratio 0x80
 80016e8:	2080      	movs	r0, #128	@ 0x80
 80016ea:	f7ff ffb7 	bl	800165c <OLED_0in96_WriteReg>

	OLED_0in96_WriteReg(SSD1306_SETMULTIPLEX);
 80016ee:	20a8      	movs	r0, #168	@ 0xa8
 80016f0:	f7ff ffb4 	bl	800165c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(0x3F);
 80016f4:	203f      	movs	r0, #63	@ 0x3f
 80016f6:	f7ff ffb1 	bl	800165c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(SSD1306_SETDISPLAYOFFSET);
 80016fa:	20d3      	movs	r0, #211	@ 0xd3
 80016fc:	f7ff ffae 	bl	800165c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(0x0);                               // no offset
 8001700:	2000      	movs	r0, #0
 8001702:	f7ff ffab 	bl	800165c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(SSD1306_SETSTARTLINE | 0x0);        // line #0
 8001706:	2040      	movs	r0, #64	@ 0x40
 8001708:	f7ff ffa8 	bl	800165c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(SSD1306_CHARGEPUMP);
 800170c:	208d      	movs	r0, #141	@ 0x8d
 800170e:	f7ff ffa5 	bl	800165c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
 8001712:	2014      	movs	r0, #20
 8001714:	f7ff ffa2 	bl	800165c <OLED_0in96_WriteReg>

	OLED_0in96_WriteReg(SSD1306_MEMORYMODE);
 8001718:	2020      	movs	r0, #32
 800171a:	f7ff ff9f 	bl	800165c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(0x00);                              // 0x0 act like ks0108
 800171e:	2000      	movs	r0, #0
 8001720:	f7ff ff9c 	bl	800165c <OLED_0in96_WriteReg>

	OLED_0in96_WriteReg(SSD1306_SEGREMAP | 0x1);
 8001724:	20a1      	movs	r0, #161	@ 0xa1
 8001726:	f7ff ff99 	bl	800165c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(SSD1306_COMSCANDEC);
 800172a:	20c8      	movs	r0, #200	@ 0xc8
 800172c:	f7ff ff96 	bl	800165c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(SSD1306_SETCOMPINS);
 8001730:	20da      	movs	r0, #218	@ 0xda
 8001732:	f7ff ff93 	bl	800165c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(0x12);           // TODO - calculate based on _rawHieght ?
 8001736:	2012      	movs	r0, #18
 8001738:	f7ff ff90 	bl	800165c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(SSD1306_SETCONTRAST);
 800173c:	2081      	movs	r0, #129	@ 0x81
 800173e:	f7ff ff8d 	bl	800165c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
 8001742:	20cf      	movs	r0, #207	@ 0xcf
 8001744:	f7ff ff8a 	bl	800165c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(SSD1306_SETPRECHARGE);
 8001748:	20d9      	movs	r0, #217	@ 0xd9
 800174a:	f7ff ff87 	bl	800165c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
 800174e:	20f1      	movs	r0, #241	@ 0xf1
 8001750:	f7ff ff84 	bl	800165c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(SSD1306_SETVCOMDETECT);
 8001754:	20db      	movs	r0, #219	@ 0xdb
 8001756:	f7ff ff81 	bl	800165c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(0x40);
 800175a:	2040      	movs	r0, #64	@ 0x40
 800175c:	f7ff ff7e 	bl	800165c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(SSD1306_DISPLAYALLON_RESUME);
 8001760:	20a4      	movs	r0, #164	@ 0xa4
 8001762:	f7ff ff7b 	bl	800165c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(SSD1306_NORMALDISPLAY);
 8001766:	20a6      	movs	r0, #166	@ 0xa6
 8001768:	f7ff ff78 	bl	800165c <OLED_0in96_WriteReg>
}
 800176c:	46c0      	nop			@ (mov r8, r8)
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <OLED_0in96_Init>:
/********************************************************************************
function:
			initialization
********************************************************************************/
void OLED_0in96_Init()
{
 8001772:	b580      	push	{r7, lr}
 8001774:	af00      	add	r7, sp, #0
    //Hardware reset
    OLED_0in96_Reset();
 8001776:	f7ff ff4f 	bl	8001618 <OLED_0in96_Reset>

    //Set the initialization register
    OLED_0in96_InitReg();
 800177a:	f7ff ffad 	bl	80016d8 <OLED_0in96_InitReg>
    Driver_Delay_ms(200);
 800177e:	20c8      	movs	r0, #200	@ 0xc8
 8001780:	f7ff f914 	bl	80009ac <Driver_Delay_ms>

    //Turn on the OLED display
    OLED_0in96_WriteReg(0xaf);
 8001784:	20af      	movs	r0, #175	@ 0xaf
 8001786:	f7ff ff69 	bl	800165c <OLED_0in96_WriteReg>
}
 800178a:	46c0      	nop			@ (mov r8, r8)
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <OLED_0in96_display>:
/********************************************************************************
function:
			Update all memory to OLED
********************************************************************************/
void OLED_0in96_display(const UBYTE *Image)
{
 8001790:	b590      	push	{r4, r7, lr}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
    UWORD j, i, temp;
	OLED_0in96_WriteReg(SSD1306_COLUMNADDR);
 8001798:	2021      	movs	r0, #33	@ 0x21
 800179a:	f7ff ff5f 	bl	800165c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(0);         //cloumn start address
 800179e:	2000      	movs	r0, #0
 80017a0:	f7ff ff5c 	bl	800165c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(OLED_0in96_HEIGHT -1); //cloumn end address
 80017a4:	207f      	movs	r0, #127	@ 0x7f
 80017a6:	f7ff ff59 	bl	800165c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(SSD1306_PAGEADDR);
 80017aa:	2022      	movs	r0, #34	@ 0x22
 80017ac:	f7ff ff56 	bl	800165c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(0);         //page atart address
 80017b0:	2000      	movs	r0, #0
 80017b2:	f7ff ff53 	bl	800165c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(OLED_0in96_WIDTH/8 -1); //page end address
 80017b6:	2007      	movs	r0, #7
 80017b8:	f7ff ff50 	bl	800165c <OLED_0in96_WriteReg>
    
    for (j = 0; j < 8; j++) {
 80017bc:	230e      	movs	r3, #14
 80017be:	18fb      	adds	r3, r7, r3
 80017c0:	2200      	movs	r2, #0
 80017c2:	801a      	strh	r2, [r3, #0]
 80017c4:	e02b      	b.n	800181e <OLED_0in96_display+0x8e>
        for(i = 0; i < 128; i++) {
 80017c6:	230c      	movs	r3, #12
 80017c8:	18fb      	adds	r3, r7, r3
 80017ca:	2200      	movs	r2, #0
 80017cc:	801a      	strh	r2, [r3, #0]
 80017ce:	e01b      	b.n	8001808 <OLED_0in96_display+0x78>
            temp = Image[7-j + i*8];
 80017d0:	230e      	movs	r3, #14
 80017d2:	18fb      	adds	r3, r7, r3
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	2207      	movs	r2, #7
 80017d8:	1ad2      	subs	r2, r2, r3
 80017da:	240c      	movs	r4, #12
 80017dc:	193b      	adds	r3, r7, r4
 80017de:	881b      	ldrh	r3, [r3, #0]
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	18d3      	adds	r3, r2, r3
 80017e4:	001a      	movs	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	189b      	adds	r3, r3, r2
 80017ea:	781a      	ldrb	r2, [r3, #0]
 80017ec:	210a      	movs	r1, #10
 80017ee:	187b      	adds	r3, r7, r1
 80017f0:	801a      	strh	r2, [r3, #0]
            OLED_0in96_WriteData(temp);
 80017f2:	187b      	adds	r3, r7, r1
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	0018      	movs	r0, r3
 80017fa:	f7ff ff4e 	bl	800169a <OLED_0in96_WriteData>
        for(i = 0; i < 128; i++) {
 80017fe:	193b      	adds	r3, r7, r4
 8001800:	881a      	ldrh	r2, [r3, #0]
 8001802:	193b      	adds	r3, r7, r4
 8001804:	3201      	adds	r2, #1
 8001806:	801a      	strh	r2, [r3, #0]
 8001808:	230c      	movs	r3, #12
 800180a:	18fb      	adds	r3, r7, r3
 800180c:	881b      	ldrh	r3, [r3, #0]
 800180e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001810:	d9de      	bls.n	80017d0 <OLED_0in96_display+0x40>
    for (j = 0; j < 8; j++) {
 8001812:	210e      	movs	r1, #14
 8001814:	187b      	adds	r3, r7, r1
 8001816:	881a      	ldrh	r2, [r3, #0]
 8001818:	187b      	adds	r3, r7, r1
 800181a:	3201      	adds	r2, #1
 800181c:	801a      	strh	r2, [r3, #0]
 800181e:	230e      	movs	r3, #14
 8001820:	18fb      	adds	r3, r7, r3
 8001822:	881b      	ldrh	r3, [r3, #0]
 8001824:	2b07      	cmp	r3, #7
 8001826:	d9ce      	bls.n	80017c6 <OLED_0in96_display+0x36>
        }
    }
}
 8001828:	46c0      	nop			@ (mov r8, r8)
 800182a:	46c0      	nop			@ (mov r8, r8)
 800182c:	46bd      	mov	sp, r7
 800182e:	b005      	add	sp, #20
 8001830:	bd90      	pop	{r4, r7, pc}
	...

08001834 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001838:	4b07      	ldr	r3, [pc, #28]	@ (8001858 <HAL_Init+0x24>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <HAL_Init+0x24>)
 800183e:	2110      	movs	r1, #16
 8001840:	430a      	orrs	r2, r1
 8001842:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001844:	2000      	movs	r0, #0
 8001846:	f000 f809 	bl	800185c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800184a:	f7fe fe8b 	bl	8000564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800184e:	2300      	movs	r3, #0
}
 8001850:	0018      	movs	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	46c0      	nop			@ (mov r8, r8)
 8001858:	40022000 	.word	0x40022000

0800185c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800185c:	b590      	push	{r4, r7, lr}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001864:	4b14      	ldr	r3, [pc, #80]	@ (80018b8 <HAL_InitTick+0x5c>)
 8001866:	681c      	ldr	r4, [r3, #0]
 8001868:	4b14      	ldr	r3, [pc, #80]	@ (80018bc <HAL_InitTick+0x60>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	0019      	movs	r1, r3
 800186e:	23fa      	movs	r3, #250	@ 0xfa
 8001870:	0098      	lsls	r0, r3, #2
 8001872:	f7fe fc53 	bl	800011c <__udivsi3>
 8001876:	0003      	movs	r3, r0
 8001878:	0019      	movs	r1, r3
 800187a:	0020      	movs	r0, r4
 800187c:	f7fe fc4e 	bl	800011c <__udivsi3>
 8001880:	0003      	movs	r3, r0
 8001882:	0018      	movs	r0, r3
 8001884:	f000 f905 	bl	8001a92 <HAL_SYSTICK_Config>
 8001888:	1e03      	subs	r3, r0, #0
 800188a:	d001      	beq.n	8001890 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e00f      	b.n	80018b0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b03      	cmp	r3, #3
 8001894:	d80b      	bhi.n	80018ae <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	2301      	movs	r3, #1
 800189a:	425b      	negs	r3, r3
 800189c:	2200      	movs	r2, #0
 800189e:	0018      	movs	r0, r3
 80018a0:	f000 f8e2 	bl	8001a68 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a4:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <HAL_InitTick+0x64>)
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
 80018ac:	e000      	b.n	80018b0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
}
 80018b0:	0018      	movs	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	b003      	add	sp, #12
 80018b6:	bd90      	pop	{r4, r7, pc}
 80018b8:	20000000 	.word	0x20000000
 80018bc:	20000010 	.word	0x20000010
 80018c0:	2000000c 	.word	0x2000000c

080018c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c8:	4b05      	ldr	r3, [pc, #20]	@ (80018e0 <HAL_IncTick+0x1c>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	001a      	movs	r2, r3
 80018ce:	4b05      	ldr	r3, [pc, #20]	@ (80018e4 <HAL_IncTick+0x20>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	18d2      	adds	r2, r2, r3
 80018d4:	4b03      	ldr	r3, [pc, #12]	@ (80018e4 <HAL_IncTick+0x20>)
 80018d6:	601a      	str	r2, [r3, #0]
}
 80018d8:	46c0      	nop			@ (mov r8, r8)
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	46c0      	nop			@ (mov r8, r8)
 80018e0:	20000010 	.word	0x20000010
 80018e4:	20000188 	.word	0x20000188

080018e8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  return uwTick;
 80018ec:	4b02      	ldr	r3, [pc, #8]	@ (80018f8 <HAL_GetTick+0x10>)
 80018ee:	681b      	ldr	r3, [r3, #0]
}
 80018f0:	0018      	movs	r0, r3
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	46c0      	nop			@ (mov r8, r8)
 80018f8:	20000188 	.word	0x20000188

080018fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001904:	f7ff fff0 	bl	80018e8 <HAL_GetTick>
 8001908:	0003      	movs	r3, r0
 800190a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	3301      	adds	r3, #1
 8001914:	d005      	beq.n	8001922 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001916:	4b0a      	ldr	r3, [pc, #40]	@ (8001940 <HAL_Delay+0x44>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	001a      	movs	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	189b      	adds	r3, r3, r2
 8001920:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001922:	46c0      	nop			@ (mov r8, r8)
 8001924:	f7ff ffe0 	bl	80018e8 <HAL_GetTick>
 8001928:	0002      	movs	r2, r0
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	429a      	cmp	r2, r3
 8001932:	d8f7      	bhi.n	8001924 <HAL_Delay+0x28>
  {
  }
}
 8001934:	46c0      	nop			@ (mov r8, r8)
 8001936:	46c0      	nop			@ (mov r8, r8)
 8001938:	46bd      	mov	sp, r7
 800193a:	b004      	add	sp, #16
 800193c:	bd80      	pop	{r7, pc}
 800193e:	46c0      	nop			@ (mov r8, r8)
 8001940:	20000010 	.word	0x20000010

08001944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001944:	b590      	push	{r4, r7, lr}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	0002      	movs	r2, r0
 800194c:	6039      	str	r1, [r7, #0]
 800194e:	1dfb      	adds	r3, r7, #7
 8001950:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001952:	1dfb      	adds	r3, r7, #7
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b7f      	cmp	r3, #127	@ 0x7f
 8001958:	d828      	bhi.n	80019ac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800195a:	4a2f      	ldr	r2, [pc, #188]	@ (8001a18 <__NVIC_SetPriority+0xd4>)
 800195c:	1dfb      	adds	r3, r7, #7
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	b25b      	sxtb	r3, r3
 8001962:	089b      	lsrs	r3, r3, #2
 8001964:	33c0      	adds	r3, #192	@ 0xc0
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	589b      	ldr	r3, [r3, r2]
 800196a:	1dfa      	adds	r2, r7, #7
 800196c:	7812      	ldrb	r2, [r2, #0]
 800196e:	0011      	movs	r1, r2
 8001970:	2203      	movs	r2, #3
 8001972:	400a      	ands	r2, r1
 8001974:	00d2      	lsls	r2, r2, #3
 8001976:	21ff      	movs	r1, #255	@ 0xff
 8001978:	4091      	lsls	r1, r2
 800197a:	000a      	movs	r2, r1
 800197c:	43d2      	mvns	r2, r2
 800197e:	401a      	ands	r2, r3
 8001980:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	019b      	lsls	r3, r3, #6
 8001986:	22ff      	movs	r2, #255	@ 0xff
 8001988:	401a      	ands	r2, r3
 800198a:	1dfb      	adds	r3, r7, #7
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	0018      	movs	r0, r3
 8001990:	2303      	movs	r3, #3
 8001992:	4003      	ands	r3, r0
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001998:	481f      	ldr	r0, [pc, #124]	@ (8001a18 <__NVIC_SetPriority+0xd4>)
 800199a:	1dfb      	adds	r3, r7, #7
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	b25b      	sxtb	r3, r3
 80019a0:	089b      	lsrs	r3, r3, #2
 80019a2:	430a      	orrs	r2, r1
 80019a4:	33c0      	adds	r3, #192	@ 0xc0
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80019aa:	e031      	b.n	8001a10 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019ac:	4a1b      	ldr	r2, [pc, #108]	@ (8001a1c <__NVIC_SetPriority+0xd8>)
 80019ae:	1dfb      	adds	r3, r7, #7
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	0019      	movs	r1, r3
 80019b4:	230f      	movs	r3, #15
 80019b6:	400b      	ands	r3, r1
 80019b8:	3b08      	subs	r3, #8
 80019ba:	089b      	lsrs	r3, r3, #2
 80019bc:	3306      	adds	r3, #6
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	18d3      	adds	r3, r2, r3
 80019c2:	3304      	adds	r3, #4
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	1dfa      	adds	r2, r7, #7
 80019c8:	7812      	ldrb	r2, [r2, #0]
 80019ca:	0011      	movs	r1, r2
 80019cc:	2203      	movs	r2, #3
 80019ce:	400a      	ands	r2, r1
 80019d0:	00d2      	lsls	r2, r2, #3
 80019d2:	21ff      	movs	r1, #255	@ 0xff
 80019d4:	4091      	lsls	r1, r2
 80019d6:	000a      	movs	r2, r1
 80019d8:	43d2      	mvns	r2, r2
 80019da:	401a      	ands	r2, r3
 80019dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	019b      	lsls	r3, r3, #6
 80019e2:	22ff      	movs	r2, #255	@ 0xff
 80019e4:	401a      	ands	r2, r3
 80019e6:	1dfb      	adds	r3, r7, #7
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	0018      	movs	r0, r3
 80019ec:	2303      	movs	r3, #3
 80019ee:	4003      	ands	r3, r0
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019f4:	4809      	ldr	r0, [pc, #36]	@ (8001a1c <__NVIC_SetPriority+0xd8>)
 80019f6:	1dfb      	adds	r3, r7, #7
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	001c      	movs	r4, r3
 80019fc:	230f      	movs	r3, #15
 80019fe:	4023      	ands	r3, r4
 8001a00:	3b08      	subs	r3, #8
 8001a02:	089b      	lsrs	r3, r3, #2
 8001a04:	430a      	orrs	r2, r1
 8001a06:	3306      	adds	r3, #6
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	18c3      	adds	r3, r0, r3
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	601a      	str	r2, [r3, #0]
}
 8001a10:	46c0      	nop			@ (mov r8, r8)
 8001a12:	46bd      	mov	sp, r7
 8001a14:	b003      	add	sp, #12
 8001a16:	bd90      	pop	{r4, r7, pc}
 8001a18:	e000e100 	.word	0xe000e100
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	1e5a      	subs	r2, r3, #1
 8001a2c:	2380      	movs	r3, #128	@ 0x80
 8001a2e:	045b      	lsls	r3, r3, #17
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d301      	bcc.n	8001a38 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a34:	2301      	movs	r3, #1
 8001a36:	e010      	b.n	8001a5a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a38:	4b0a      	ldr	r3, [pc, #40]	@ (8001a64 <SysTick_Config+0x44>)
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	3a01      	subs	r2, #1
 8001a3e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a40:	2301      	movs	r3, #1
 8001a42:	425b      	negs	r3, r3
 8001a44:	2103      	movs	r1, #3
 8001a46:	0018      	movs	r0, r3
 8001a48:	f7ff ff7c 	bl	8001944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a4c:	4b05      	ldr	r3, [pc, #20]	@ (8001a64 <SysTick_Config+0x44>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a52:	4b04      	ldr	r3, [pc, #16]	@ (8001a64 <SysTick_Config+0x44>)
 8001a54:	2207      	movs	r2, #7
 8001a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	b002      	add	sp, #8
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	46c0      	nop			@ (mov r8, r8)
 8001a64:	e000e010 	.word	0xe000e010

08001a68 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60b9      	str	r1, [r7, #8]
 8001a70:	607a      	str	r2, [r7, #4]
 8001a72:	210f      	movs	r1, #15
 8001a74:	187b      	adds	r3, r7, r1
 8001a76:	1c02      	adds	r2, r0, #0
 8001a78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001a7a:	68ba      	ldr	r2, [r7, #8]
 8001a7c:	187b      	adds	r3, r7, r1
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	b25b      	sxtb	r3, r3
 8001a82:	0011      	movs	r1, r2
 8001a84:	0018      	movs	r0, r3
 8001a86:	f7ff ff5d 	bl	8001944 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001a8a:	46c0      	nop			@ (mov r8, r8)
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	b004      	add	sp, #16
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f7ff ffbf 	bl	8001a20 <SysTick_Config>
 8001aa2:	0003      	movs	r3, r0
}
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	b002      	add	sp, #8
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aba:	e149      	b.n	8001d50 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	4091      	lsls	r1, r2
 8001ac6:	000a      	movs	r2, r1
 8001ac8:	4013      	ands	r3, r2
 8001aca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d100      	bne.n	8001ad4 <HAL_GPIO_Init+0x28>
 8001ad2:	e13a      	b.n	8001d4a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2203      	movs	r2, #3
 8001ada:	4013      	ands	r3, r2
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d005      	beq.n	8001aec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2203      	movs	r2, #3
 8001ae6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d130      	bne.n	8001b4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	2203      	movs	r2, #3
 8001af8:	409a      	lsls	r2, r3
 8001afa:	0013      	movs	r3, r2
 8001afc:	43da      	mvns	r2, r3
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	68da      	ldr	r2, [r3, #12]
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	409a      	lsls	r2, r3
 8001b0e:	0013      	movs	r3, r2
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b22:	2201      	movs	r2, #1
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	409a      	lsls	r2, r3
 8001b28:	0013      	movs	r3, r2
 8001b2a:	43da      	mvns	r2, r3
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	091b      	lsrs	r3, r3, #4
 8001b38:	2201      	movs	r2, #1
 8001b3a:	401a      	ands	r2, r3
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	409a      	lsls	r2, r3
 8001b40:	0013      	movs	r3, r2
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2203      	movs	r2, #3
 8001b54:	4013      	ands	r3, r2
 8001b56:	2b03      	cmp	r3, #3
 8001b58:	d017      	beq.n	8001b8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	2203      	movs	r2, #3
 8001b66:	409a      	lsls	r2, r3
 8001b68:	0013      	movs	r3, r2
 8001b6a:	43da      	mvns	r2, r3
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	689a      	ldr	r2, [r3, #8]
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	409a      	lsls	r2, r3
 8001b7c:	0013      	movs	r3, r2
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2203      	movs	r2, #3
 8001b90:	4013      	ands	r3, r2
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d123      	bne.n	8001bde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	08da      	lsrs	r2, r3, #3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	3208      	adds	r2, #8
 8001b9e:	0092      	lsls	r2, r2, #2
 8001ba0:	58d3      	ldr	r3, [r2, r3]
 8001ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	2207      	movs	r2, #7
 8001ba8:	4013      	ands	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	220f      	movs	r2, #15
 8001bae:	409a      	lsls	r2, r3
 8001bb0:	0013      	movs	r3, r2
 8001bb2:	43da      	mvns	r2, r3
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	691a      	ldr	r2, [r3, #16]
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	2107      	movs	r1, #7
 8001bc2:	400b      	ands	r3, r1
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	409a      	lsls	r2, r3
 8001bc8:	0013      	movs	r3, r2
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	08da      	lsrs	r2, r3, #3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3208      	adds	r2, #8
 8001bd8:	0092      	lsls	r2, r2, #2
 8001bda:	6939      	ldr	r1, [r7, #16]
 8001bdc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	2203      	movs	r2, #3
 8001bea:	409a      	lsls	r2, r3
 8001bec:	0013      	movs	r3, r2
 8001bee:	43da      	mvns	r2, r3
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2203      	movs	r2, #3
 8001bfc:	401a      	ands	r2, r3
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	409a      	lsls	r2, r3
 8001c04:	0013      	movs	r3, r2
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	23c0      	movs	r3, #192	@ 0xc0
 8001c18:	029b      	lsls	r3, r3, #10
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	d100      	bne.n	8001c20 <HAL_GPIO_Init+0x174>
 8001c1e:	e094      	b.n	8001d4a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c20:	4b51      	ldr	r3, [pc, #324]	@ (8001d68 <HAL_GPIO_Init+0x2bc>)
 8001c22:	699a      	ldr	r2, [r3, #24]
 8001c24:	4b50      	ldr	r3, [pc, #320]	@ (8001d68 <HAL_GPIO_Init+0x2bc>)
 8001c26:	2101      	movs	r1, #1
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	619a      	str	r2, [r3, #24]
 8001c2c:	4b4e      	ldr	r3, [pc, #312]	@ (8001d68 <HAL_GPIO_Init+0x2bc>)
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	2201      	movs	r2, #1
 8001c32:	4013      	ands	r3, r2
 8001c34:	60bb      	str	r3, [r7, #8]
 8001c36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c38:	4a4c      	ldr	r2, [pc, #304]	@ (8001d6c <HAL_GPIO_Init+0x2c0>)
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	089b      	lsrs	r3, r3, #2
 8001c3e:	3302      	adds	r3, #2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	589b      	ldr	r3, [r3, r2]
 8001c44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	2203      	movs	r2, #3
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	220f      	movs	r2, #15
 8001c50:	409a      	lsls	r2, r3
 8001c52:	0013      	movs	r3, r2
 8001c54:	43da      	mvns	r2, r3
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	2390      	movs	r3, #144	@ 0x90
 8001c60:	05db      	lsls	r3, r3, #23
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d00d      	beq.n	8001c82 <HAL_GPIO_Init+0x1d6>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a41      	ldr	r2, [pc, #260]	@ (8001d70 <HAL_GPIO_Init+0x2c4>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d007      	beq.n	8001c7e <HAL_GPIO_Init+0x1d2>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a40      	ldr	r2, [pc, #256]	@ (8001d74 <HAL_GPIO_Init+0x2c8>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d101      	bne.n	8001c7a <HAL_GPIO_Init+0x1ce>
 8001c76:	2302      	movs	r3, #2
 8001c78:	e004      	b.n	8001c84 <HAL_GPIO_Init+0x1d8>
 8001c7a:	2305      	movs	r3, #5
 8001c7c:	e002      	b.n	8001c84 <HAL_GPIO_Init+0x1d8>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <HAL_GPIO_Init+0x1d8>
 8001c82:	2300      	movs	r3, #0
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	2103      	movs	r1, #3
 8001c88:	400a      	ands	r2, r1
 8001c8a:	0092      	lsls	r2, r2, #2
 8001c8c:	4093      	lsls	r3, r2
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c94:	4935      	ldr	r1, [pc, #212]	@ (8001d6c <HAL_GPIO_Init+0x2c0>)
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	089b      	lsrs	r3, r3, #2
 8001c9a:	3302      	adds	r3, #2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ca2:	4b35      	ldr	r3, [pc, #212]	@ (8001d78 <HAL_GPIO_Init+0x2cc>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	43da      	mvns	r2, r3
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	2380      	movs	r3, #128	@ 0x80
 8001cb8:	035b      	lsls	r3, r3, #13
 8001cba:	4013      	ands	r3, r2
 8001cbc:	d003      	beq.n	8001cc6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001cc6:	4b2c      	ldr	r3, [pc, #176]	@ (8001d78 <HAL_GPIO_Init+0x2cc>)
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001ccc:	4b2a      	ldr	r3, [pc, #168]	@ (8001d78 <HAL_GPIO_Init+0x2cc>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	43da      	mvns	r2, r3
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	2380      	movs	r3, #128	@ 0x80
 8001ce2:	039b      	lsls	r3, r3, #14
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d003      	beq.n	8001cf0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001cf0:	4b21      	ldr	r3, [pc, #132]	@ (8001d78 <HAL_GPIO_Init+0x2cc>)
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001cf6:	4b20      	ldr	r3, [pc, #128]	@ (8001d78 <HAL_GPIO_Init+0x2cc>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	43da      	mvns	r2, r3
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	4013      	ands	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	2380      	movs	r3, #128	@ 0x80
 8001d0c:	029b      	lsls	r3, r3, #10
 8001d0e:	4013      	ands	r3, r2
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d1a:	4b17      	ldr	r3, [pc, #92]	@ (8001d78 <HAL_GPIO_Init+0x2cc>)
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001d20:	4b15      	ldr	r3, [pc, #84]	@ (8001d78 <HAL_GPIO_Init+0x2cc>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	43da      	mvns	r2, r3
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	2380      	movs	r3, #128	@ 0x80
 8001d36:	025b      	lsls	r3, r3, #9
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d003      	beq.n	8001d44 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d44:	4b0c      	ldr	r3, [pc, #48]	@ (8001d78 <HAL_GPIO_Init+0x2cc>)
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	40da      	lsrs	r2, r3
 8001d58:	1e13      	subs	r3, r2, #0
 8001d5a:	d000      	beq.n	8001d5e <HAL_GPIO_Init+0x2b2>
 8001d5c:	e6ae      	b.n	8001abc <HAL_GPIO_Init+0x10>
  } 
}
 8001d5e:	46c0      	nop			@ (mov r8, r8)
 8001d60:	46c0      	nop			@ (mov r8, r8)
 8001d62:	46bd      	mov	sp, r7
 8001d64:	b006      	add	sp, #24
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	40010000 	.word	0x40010000
 8001d70:	48000400 	.word	0x48000400
 8001d74:	48000800 	.word	0x48000800
 8001d78:	40010400 	.word	0x40010400

08001d7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	000a      	movs	r2, r1
 8001d86:	1cbb      	adds	r3, r7, #2
 8001d88:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	1cba      	adds	r2, r7, #2
 8001d90:	8812      	ldrh	r2, [r2, #0]
 8001d92:	4013      	ands	r3, r2
 8001d94:	d004      	beq.n	8001da0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001d96:	230f      	movs	r3, #15
 8001d98:	18fb      	adds	r3, r7, r3
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	701a      	strb	r2, [r3, #0]
 8001d9e:	e003      	b.n	8001da8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001da0:	230f      	movs	r3, #15
 8001da2:	18fb      	adds	r3, r7, r3
 8001da4:	2200      	movs	r2, #0
 8001da6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001da8:	230f      	movs	r3, #15
 8001daa:	18fb      	adds	r3, r7, r3
 8001dac:	781b      	ldrb	r3, [r3, #0]
  }
 8001dae:	0018      	movs	r0, r3
 8001db0:	46bd      	mov	sp, r7
 8001db2:	b004      	add	sp, #16
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
 8001dbe:	0008      	movs	r0, r1
 8001dc0:	0011      	movs	r1, r2
 8001dc2:	1cbb      	adds	r3, r7, #2
 8001dc4:	1c02      	adds	r2, r0, #0
 8001dc6:	801a      	strh	r2, [r3, #0]
 8001dc8:	1c7b      	adds	r3, r7, #1
 8001dca:	1c0a      	adds	r2, r1, #0
 8001dcc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dce:	1c7b      	adds	r3, r7, #1
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d004      	beq.n	8001de0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dd6:	1cbb      	adds	r3, r7, #2
 8001dd8:	881a      	ldrh	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001dde:	e003      	b.n	8001de8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001de0:	1cbb      	adds	r3, r7, #2
 8001de2:	881a      	ldrh	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001de8:	46c0      	nop			@ (mov r8, r8)
 8001dea:	46bd      	mov	sp, r7
 8001dec:	b002      	add	sp, #8
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e08f      	b.n	8001f22 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2241      	movs	r2, #65	@ 0x41
 8001e06:	5c9b      	ldrb	r3, [r3, r2]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d107      	bne.n	8001e1e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2240      	movs	r2, #64	@ 0x40
 8001e12:	2100      	movs	r1, #0
 8001e14:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	0018      	movs	r0, r3
 8001e1a:	f7fe fbc7 	bl	80005ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2241      	movs	r2, #65	@ 0x41
 8001e22:	2124      	movs	r1, #36	@ 0x24
 8001e24:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2101      	movs	r1, #1
 8001e32:	438a      	bics	r2, r1
 8001e34:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	493b      	ldr	r1, [pc, #236]	@ (8001f2c <HAL_I2C_Init+0x13c>)
 8001e40:	400a      	ands	r2, r1
 8001e42:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4938      	ldr	r1, [pc, #224]	@ (8001f30 <HAL_I2C_Init+0x140>)
 8001e50:	400a      	ands	r2, r1
 8001e52:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d108      	bne.n	8001e6e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2180      	movs	r1, #128	@ 0x80
 8001e66:	0209      	lsls	r1, r1, #8
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	e007      	b.n	8001e7e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689a      	ldr	r2, [r3, #8]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2184      	movs	r1, #132	@ 0x84
 8001e78:	0209      	lsls	r1, r1, #8
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d109      	bne.n	8001e9a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2180      	movs	r1, #128	@ 0x80
 8001e92:	0109      	lsls	r1, r1, #4
 8001e94:	430a      	orrs	r2, r1
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	e007      	b.n	8001eaa <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4923      	ldr	r1, [pc, #140]	@ (8001f34 <HAL_I2C_Init+0x144>)
 8001ea6:	400a      	ands	r2, r1
 8001ea8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4920      	ldr	r1, [pc, #128]	@ (8001f38 <HAL_I2C_Init+0x148>)
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68da      	ldr	r2, [r3, #12]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	491a      	ldr	r1, [pc, #104]	@ (8001f30 <HAL_I2C_Init+0x140>)
 8001ec6:	400a      	ands	r2, r1
 8001ec8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	691a      	ldr	r2, [r3, #16]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69d9      	ldr	r1, [r3, #28]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a1a      	ldr	r2, [r3, #32]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2101      	movs	r1, #1
 8001f00:	430a      	orrs	r2, r1
 8001f02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2241      	movs	r2, #65	@ 0x41
 8001f0e:	2120      	movs	r1, #32
 8001f10:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2242      	movs	r2, #66	@ 0x42
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	0018      	movs	r0, r3
 8001f24:	46bd      	mov	sp, r7
 8001f26:	b002      	add	sp, #8
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	46c0      	nop			@ (mov r8, r8)
 8001f2c:	f0ffffff 	.word	0xf0ffffff
 8001f30:	ffff7fff 	.word	0xffff7fff
 8001f34:	fffff7ff 	.word	0xfffff7ff
 8001f38:	02008000 	.word	0x02008000

08001f3c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2241      	movs	r2, #65	@ 0x41
 8001f4a:	5c9b      	ldrb	r3, [r3, r2]
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b20      	cmp	r3, #32
 8001f50:	d138      	bne.n	8001fc4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2240      	movs	r2, #64	@ 0x40
 8001f56:	5c9b      	ldrb	r3, [r3, r2]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d101      	bne.n	8001f60 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	e032      	b.n	8001fc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2240      	movs	r2, #64	@ 0x40
 8001f64:	2101      	movs	r1, #1
 8001f66:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2241      	movs	r2, #65	@ 0x41
 8001f6c:	2124      	movs	r1, #36	@ 0x24
 8001f6e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	438a      	bics	r2, r1
 8001f7e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4911      	ldr	r1, [pc, #68]	@ (8001fd0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001f8c:	400a      	ands	r2, r1
 8001f8e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6819      	ldr	r1, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2101      	movs	r1, #1
 8001fac:	430a      	orrs	r2, r1
 8001fae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2241      	movs	r2, #65	@ 0x41
 8001fb4:	2120      	movs	r1, #32
 8001fb6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2240      	movs	r2, #64	@ 0x40
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	e000      	b.n	8001fc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001fc4:	2302      	movs	r3, #2
  }
}
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	b002      	add	sp, #8
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	46c0      	nop			@ (mov r8, r8)
 8001fd0:	ffffefff 	.word	0xffffefff

08001fd4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2241      	movs	r2, #65	@ 0x41
 8001fe2:	5c9b      	ldrb	r3, [r3, r2]
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b20      	cmp	r3, #32
 8001fe8:	d139      	bne.n	800205e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2240      	movs	r2, #64	@ 0x40
 8001fee:	5c9b      	ldrb	r3, [r3, r2]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d101      	bne.n	8001ff8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	e033      	b.n	8002060 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2240      	movs	r2, #64	@ 0x40
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2241      	movs	r2, #65	@ 0x41
 8002004:	2124      	movs	r1, #36	@ 0x24
 8002006:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2101      	movs	r1, #1
 8002014:	438a      	bics	r2, r1
 8002016:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4a11      	ldr	r2, [pc, #68]	@ (8002068 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002024:	4013      	ands	r3, r2
 8002026:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	021b      	lsls	r3, r3, #8
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	4313      	orrs	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2101      	movs	r1, #1
 8002046:	430a      	orrs	r2, r1
 8002048:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2241      	movs	r2, #65	@ 0x41
 800204e:	2120      	movs	r1, #32
 8002050:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2240      	movs	r2, #64	@ 0x40
 8002056:	2100      	movs	r1, #0
 8002058:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800205a:	2300      	movs	r3, #0
 800205c:	e000      	b.n	8002060 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800205e:	2302      	movs	r3, #2
  }
}
 8002060:	0018      	movs	r0, r3
 8002062:	46bd      	mov	sp, r7
 8002064:	b004      	add	sp, #16
 8002066:	bd80      	pop	{r7, pc}
 8002068:	fffff0ff 	.word	0xfffff0ff

0800206c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b088      	sub	sp, #32
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e0d0      	b.n	8002220 <HAL_I2S_Init+0x1b4>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2235      	movs	r2, #53	@ 0x35
 8002082:	5c9b      	ldrb	r3, [r3, r2]
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d107      	bne.n	800209a <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2234      	movs	r2, #52	@ 0x34
 800208e:	2100      	movs	r1, #0
 8002090:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	0018      	movs	r0, r3
 8002096:	f7fe fad7 	bl	8000648 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2235      	movs	r2, #53	@ 0x35
 800209e:	2102      	movs	r1, #2
 80020a0:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	69da      	ldr	r2, [r3, #28]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	495e      	ldr	r1, [pc, #376]	@ (8002228 <HAL_I2S_Init+0x1bc>)
 80020ae:	400a      	ands	r2, r1
 80020b0:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2202      	movs	r2, #2
 80020b8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d073      	beq.n	80021aa <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d102      	bne.n	80020d0 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80020ca:	2310      	movs	r3, #16
 80020cc:	617b      	str	r3, [r7, #20]
 80020ce:	e001      	b.n	80020d4 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80020d0:	2320      	movs	r3, #32
 80020d2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	2b20      	cmp	r3, #32
 80020da:	d802      	bhi.n	80020e2 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 80020e2:	f000 fd03 	bl	8002aec <HAL_RCC_GetSysClockFreq>
 80020e6:	0003      	movs	r3, r0
 80020e8:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691a      	ldr	r2, [r3, #16]
 80020ee:	2380      	movs	r3, #128	@ 0x80
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d131      	bne.n	800215a <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d016      	beq.n	800212c <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	0019      	movs	r1, r3
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f7fe f809 	bl	800011c <__udivsi3>
 800210a:	0003      	movs	r3, r0
 800210c:	001a      	movs	r2, r3
 800210e:	0013      	movs	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	189b      	adds	r3, r3, r2
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	001a      	movs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	0019      	movs	r1, r3
 800211e:	0010      	movs	r0, r2
 8002120:	f7fd fffc 	bl	800011c <__udivsi3>
 8002124:	0003      	movs	r3, r0
 8002126:	3305      	adds	r3, #5
 8002128:	613b      	str	r3, [r7, #16]
 800212a:	e02a      	b.n	8002182 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	0019      	movs	r1, r3
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f7fd fff2 	bl	800011c <__udivsi3>
 8002138:	0003      	movs	r3, r0
 800213a:	001a      	movs	r2, r3
 800213c:	0013      	movs	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	189b      	adds	r3, r3, r2
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	001a      	movs	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	0019      	movs	r1, r3
 800214c:	0010      	movs	r0, r2
 800214e:	f7fd ffe5 	bl	800011c <__udivsi3>
 8002152:	0003      	movs	r3, r0
 8002154:	3305      	adds	r3, #5
 8002156:	613b      	str	r3, [r7, #16]
 8002158:	e013      	b.n	8002182 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800215a:	6979      	ldr	r1, [r7, #20]
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f7fd ffdd 	bl	800011c <__udivsi3>
 8002162:	0003      	movs	r3, r0
 8002164:	001a      	movs	r2, r3
 8002166:	0013      	movs	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	189b      	adds	r3, r3, r2
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	001a      	movs	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	0019      	movs	r1, r3
 8002176:	0010      	movs	r0, r2
 8002178:	f7fd ffd0 	bl	800011c <__udivsi3>
 800217c:	0003      	movs	r3, r0
 800217e:	3305      	adds	r3, #5
 8002180:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	210a      	movs	r1, #10
 8002186:	0018      	movs	r0, r3
 8002188:	f7fd ffc8 	bl	800011c <__udivsi3>
 800218c:	0003      	movs	r3, r0
 800218e:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	2201      	movs	r2, #1
 8002194:	4013      	ands	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	085b      	lsrs	r3, r3, #1
 80021a0:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	021b      	lsls	r3, r3, #8
 80021a6:	61bb      	str	r3, [r7, #24]
 80021a8:	e003      	b.n	80021b2 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80021aa:	2302      	movs	r3, #2
 80021ac:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d902      	bls.n	80021be <HAL_I2S_Init+0x152>
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	2bff      	cmp	r3, #255	@ 0xff
 80021bc:	d907      	bls.n	80021ce <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021c2:	2210      	movs	r2, #16
 80021c4:	431a      	orrs	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e028      	b.n	8002220 <HAL_I2S_Init+0x1b4>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691a      	ldr	r2, [r3, #16]
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	431a      	orrs	r2, r3
 80021d6:	0011      	movs	r1, r2
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	69fa      	ldr	r2, [r7, #28]
 80021de:	430a      	orrs	r2, r1
 80021e0:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	4a0f      	ldr	r2, [pc, #60]	@ (8002228 <HAL_I2S_Init+0x1bc>)
 80021ea:	401a      	ands	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6859      	ldr	r1, [r3, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	4319      	orrs	r1, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	4319      	orrs	r1, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	430b      	orrs	r3, r1
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2180      	movs	r1, #128	@ 0x80
 800220a:	0109      	lsls	r1, r1, #4
 800220c:	430a      	orrs	r2, r1
 800220e:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2235      	movs	r2, #53	@ 0x35
 800221a:	2101      	movs	r1, #1
 800221c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	0018      	movs	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	b008      	add	sp, #32
 8002226:	bd80      	pop	{r7, pc}
 8002228:	fffff040 	.word	0xfffff040

0800222c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b088      	sub	sp, #32
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d102      	bne.n	8002240 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	f000 fb76 	bl	800292c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2201      	movs	r2, #1
 8002246:	4013      	ands	r3, r2
 8002248:	d100      	bne.n	800224c <HAL_RCC_OscConfig+0x20>
 800224a:	e08e      	b.n	800236a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800224c:	4bc5      	ldr	r3, [pc, #788]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	220c      	movs	r2, #12
 8002252:	4013      	ands	r3, r2
 8002254:	2b04      	cmp	r3, #4
 8002256:	d00e      	beq.n	8002276 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002258:	4bc2      	ldr	r3, [pc, #776]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	220c      	movs	r2, #12
 800225e:	4013      	ands	r3, r2
 8002260:	2b08      	cmp	r3, #8
 8002262:	d117      	bne.n	8002294 <HAL_RCC_OscConfig+0x68>
 8002264:	4bbf      	ldr	r3, [pc, #764]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	23c0      	movs	r3, #192	@ 0xc0
 800226a:	025b      	lsls	r3, r3, #9
 800226c:	401a      	ands	r2, r3
 800226e:	2380      	movs	r3, #128	@ 0x80
 8002270:	025b      	lsls	r3, r3, #9
 8002272:	429a      	cmp	r2, r3
 8002274:	d10e      	bne.n	8002294 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002276:	4bbb      	ldr	r3, [pc, #748]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	2380      	movs	r3, #128	@ 0x80
 800227c:	029b      	lsls	r3, r3, #10
 800227e:	4013      	ands	r3, r2
 8002280:	d100      	bne.n	8002284 <HAL_RCC_OscConfig+0x58>
 8002282:	e071      	b.n	8002368 <HAL_RCC_OscConfig+0x13c>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d000      	beq.n	800228e <HAL_RCC_OscConfig+0x62>
 800228c:	e06c      	b.n	8002368 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	f000 fb4c 	bl	800292c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d107      	bne.n	80022ac <HAL_RCC_OscConfig+0x80>
 800229c:	4bb1      	ldr	r3, [pc, #708]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	4bb0      	ldr	r3, [pc, #704]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 80022a2:	2180      	movs	r1, #128	@ 0x80
 80022a4:	0249      	lsls	r1, r1, #9
 80022a6:	430a      	orrs	r2, r1
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	e02f      	b.n	800230c <HAL_RCC_OscConfig+0xe0>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10c      	bne.n	80022ce <HAL_RCC_OscConfig+0xa2>
 80022b4:	4bab      	ldr	r3, [pc, #684]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	4baa      	ldr	r3, [pc, #680]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 80022ba:	49ab      	ldr	r1, [pc, #684]	@ (8002568 <HAL_RCC_OscConfig+0x33c>)
 80022bc:	400a      	ands	r2, r1
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	4ba8      	ldr	r3, [pc, #672]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	4ba7      	ldr	r3, [pc, #668]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 80022c6:	49a9      	ldr	r1, [pc, #676]	@ (800256c <HAL_RCC_OscConfig+0x340>)
 80022c8:	400a      	ands	r2, r1
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	e01e      	b.n	800230c <HAL_RCC_OscConfig+0xe0>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b05      	cmp	r3, #5
 80022d4:	d10e      	bne.n	80022f4 <HAL_RCC_OscConfig+0xc8>
 80022d6:	4ba3      	ldr	r3, [pc, #652]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	4ba2      	ldr	r3, [pc, #648]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 80022dc:	2180      	movs	r1, #128	@ 0x80
 80022de:	02c9      	lsls	r1, r1, #11
 80022e0:	430a      	orrs	r2, r1
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	4b9f      	ldr	r3, [pc, #636]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4b9e      	ldr	r3, [pc, #632]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 80022ea:	2180      	movs	r1, #128	@ 0x80
 80022ec:	0249      	lsls	r1, r1, #9
 80022ee:	430a      	orrs	r2, r1
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	e00b      	b.n	800230c <HAL_RCC_OscConfig+0xe0>
 80022f4:	4b9b      	ldr	r3, [pc, #620]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	4b9a      	ldr	r3, [pc, #616]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 80022fa:	499b      	ldr	r1, [pc, #620]	@ (8002568 <HAL_RCC_OscConfig+0x33c>)
 80022fc:	400a      	ands	r2, r1
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	4b98      	ldr	r3, [pc, #608]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	4b97      	ldr	r3, [pc, #604]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 8002306:	4999      	ldr	r1, [pc, #612]	@ (800256c <HAL_RCC_OscConfig+0x340>)
 8002308:	400a      	ands	r2, r1
 800230a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d014      	beq.n	800233e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002314:	f7ff fae8 	bl	80018e8 <HAL_GetTick>
 8002318:	0003      	movs	r3, r0
 800231a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800231e:	f7ff fae3 	bl	80018e8 <HAL_GetTick>
 8002322:	0002      	movs	r2, r0
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b64      	cmp	r3, #100	@ 0x64
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e2fd      	b.n	800292c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002330:	4b8c      	ldr	r3, [pc, #560]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	2380      	movs	r3, #128	@ 0x80
 8002336:	029b      	lsls	r3, r3, #10
 8002338:	4013      	ands	r3, r2
 800233a:	d0f0      	beq.n	800231e <HAL_RCC_OscConfig+0xf2>
 800233c:	e015      	b.n	800236a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233e:	f7ff fad3 	bl	80018e8 <HAL_GetTick>
 8002342:	0003      	movs	r3, r0
 8002344:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002348:	f7ff face 	bl	80018e8 <HAL_GetTick>
 800234c:	0002      	movs	r2, r0
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b64      	cmp	r3, #100	@ 0x64
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e2e8      	b.n	800292c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800235a:	4b82      	ldr	r3, [pc, #520]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	2380      	movs	r3, #128	@ 0x80
 8002360:	029b      	lsls	r3, r3, #10
 8002362:	4013      	ands	r3, r2
 8002364:	d1f0      	bne.n	8002348 <HAL_RCC_OscConfig+0x11c>
 8002366:	e000      	b.n	800236a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002368:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2202      	movs	r2, #2
 8002370:	4013      	ands	r3, r2
 8002372:	d100      	bne.n	8002376 <HAL_RCC_OscConfig+0x14a>
 8002374:	e06c      	b.n	8002450 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002376:	4b7b      	ldr	r3, [pc, #492]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	220c      	movs	r2, #12
 800237c:	4013      	ands	r3, r2
 800237e:	d00e      	beq.n	800239e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002380:	4b78      	ldr	r3, [pc, #480]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	220c      	movs	r2, #12
 8002386:	4013      	ands	r3, r2
 8002388:	2b08      	cmp	r3, #8
 800238a:	d11f      	bne.n	80023cc <HAL_RCC_OscConfig+0x1a0>
 800238c:	4b75      	ldr	r3, [pc, #468]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	23c0      	movs	r3, #192	@ 0xc0
 8002392:	025b      	lsls	r3, r3, #9
 8002394:	401a      	ands	r2, r3
 8002396:	2380      	movs	r3, #128	@ 0x80
 8002398:	021b      	lsls	r3, r3, #8
 800239a:	429a      	cmp	r2, r3
 800239c:	d116      	bne.n	80023cc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800239e:	4b71      	ldr	r3, [pc, #452]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2202      	movs	r2, #2
 80023a4:	4013      	ands	r3, r2
 80023a6:	d005      	beq.n	80023b4 <HAL_RCC_OscConfig+0x188>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d001      	beq.n	80023b4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e2bb      	b.n	800292c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b4:	4b6b      	ldr	r3, [pc, #428]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	22f8      	movs	r2, #248	@ 0xf8
 80023ba:	4393      	bics	r3, r2
 80023bc:	0019      	movs	r1, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	00da      	lsls	r2, r3, #3
 80023c4:	4b67      	ldr	r3, [pc, #412]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 80023c6:	430a      	orrs	r2, r1
 80023c8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ca:	e041      	b.n	8002450 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d024      	beq.n	800241e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023d4:	4b63      	ldr	r3, [pc, #396]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4b62      	ldr	r3, [pc, #392]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 80023da:	2101      	movs	r1, #1
 80023dc:	430a      	orrs	r2, r1
 80023de:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e0:	f7ff fa82 	bl	80018e8 <HAL_GetTick>
 80023e4:	0003      	movs	r3, r0
 80023e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023ea:	f7ff fa7d 	bl	80018e8 <HAL_GetTick>
 80023ee:	0002      	movs	r2, r0
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e297      	b.n	800292c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023fc:	4b59      	ldr	r3, [pc, #356]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2202      	movs	r2, #2
 8002402:	4013      	ands	r3, r2
 8002404:	d0f1      	beq.n	80023ea <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002406:	4b57      	ldr	r3, [pc, #348]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	22f8      	movs	r2, #248	@ 0xf8
 800240c:	4393      	bics	r3, r2
 800240e:	0019      	movs	r1, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	00da      	lsls	r2, r3, #3
 8002416:	4b53      	ldr	r3, [pc, #332]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 8002418:	430a      	orrs	r2, r1
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	e018      	b.n	8002450 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800241e:	4b51      	ldr	r3, [pc, #324]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	4b50      	ldr	r3, [pc, #320]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 8002424:	2101      	movs	r1, #1
 8002426:	438a      	bics	r2, r1
 8002428:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242a:	f7ff fa5d 	bl	80018e8 <HAL_GetTick>
 800242e:	0003      	movs	r3, r0
 8002430:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002434:	f7ff fa58 	bl	80018e8 <HAL_GetTick>
 8002438:	0002      	movs	r2, r0
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e272      	b.n	800292c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002446:	4b47      	ldr	r3, [pc, #284]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2202      	movs	r2, #2
 800244c:	4013      	ands	r3, r2
 800244e:	d1f1      	bne.n	8002434 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2208      	movs	r2, #8
 8002456:	4013      	ands	r3, r2
 8002458:	d036      	beq.n	80024c8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d019      	beq.n	8002496 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002462:	4b40      	ldr	r3, [pc, #256]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 8002464:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002466:	4b3f      	ldr	r3, [pc, #252]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 8002468:	2101      	movs	r1, #1
 800246a:	430a      	orrs	r2, r1
 800246c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246e:	f7ff fa3b 	bl	80018e8 <HAL_GetTick>
 8002472:	0003      	movs	r3, r0
 8002474:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002478:	f7ff fa36 	bl	80018e8 <HAL_GetTick>
 800247c:	0002      	movs	r2, r0
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e250      	b.n	800292c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800248a:	4b36      	ldr	r3, [pc, #216]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 800248c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248e:	2202      	movs	r2, #2
 8002490:	4013      	ands	r3, r2
 8002492:	d0f1      	beq.n	8002478 <HAL_RCC_OscConfig+0x24c>
 8002494:	e018      	b.n	80024c8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002496:	4b33      	ldr	r3, [pc, #204]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 8002498:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800249a:	4b32      	ldr	r3, [pc, #200]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 800249c:	2101      	movs	r1, #1
 800249e:	438a      	bics	r2, r1
 80024a0:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a2:	f7ff fa21 	bl	80018e8 <HAL_GetTick>
 80024a6:	0003      	movs	r3, r0
 80024a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ac:	f7ff fa1c 	bl	80018e8 <HAL_GetTick>
 80024b0:	0002      	movs	r2, r0
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e236      	b.n	800292c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024be:	4b29      	ldr	r3, [pc, #164]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 80024c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c2:	2202      	movs	r2, #2
 80024c4:	4013      	ands	r3, r2
 80024c6:	d1f1      	bne.n	80024ac <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2204      	movs	r2, #4
 80024ce:	4013      	ands	r3, r2
 80024d0:	d100      	bne.n	80024d4 <HAL_RCC_OscConfig+0x2a8>
 80024d2:	e0b5      	b.n	8002640 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024d4:	201f      	movs	r0, #31
 80024d6:	183b      	adds	r3, r7, r0
 80024d8:	2200      	movs	r2, #0
 80024da:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024dc:	4b21      	ldr	r3, [pc, #132]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 80024de:	69da      	ldr	r2, [r3, #28]
 80024e0:	2380      	movs	r3, #128	@ 0x80
 80024e2:	055b      	lsls	r3, r3, #21
 80024e4:	4013      	ands	r3, r2
 80024e6:	d110      	bne.n	800250a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024e8:	4b1e      	ldr	r3, [pc, #120]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 80024ea:	69da      	ldr	r2, [r3, #28]
 80024ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 80024ee:	2180      	movs	r1, #128	@ 0x80
 80024f0:	0549      	lsls	r1, r1, #21
 80024f2:	430a      	orrs	r2, r1
 80024f4:	61da      	str	r2, [r3, #28]
 80024f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 80024f8:	69da      	ldr	r2, [r3, #28]
 80024fa:	2380      	movs	r3, #128	@ 0x80
 80024fc:	055b      	lsls	r3, r3, #21
 80024fe:	4013      	ands	r3, r2
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002504:	183b      	adds	r3, r7, r0
 8002506:	2201      	movs	r2, #1
 8002508:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800250a:	4b19      	ldr	r3, [pc, #100]	@ (8002570 <HAL_RCC_OscConfig+0x344>)
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	2380      	movs	r3, #128	@ 0x80
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	4013      	ands	r3, r2
 8002514:	d11a      	bne.n	800254c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002516:	4b16      	ldr	r3, [pc, #88]	@ (8002570 <HAL_RCC_OscConfig+0x344>)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	4b15      	ldr	r3, [pc, #84]	@ (8002570 <HAL_RCC_OscConfig+0x344>)
 800251c:	2180      	movs	r1, #128	@ 0x80
 800251e:	0049      	lsls	r1, r1, #1
 8002520:	430a      	orrs	r2, r1
 8002522:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002524:	f7ff f9e0 	bl	80018e8 <HAL_GetTick>
 8002528:	0003      	movs	r3, r0
 800252a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800252e:	f7ff f9db 	bl	80018e8 <HAL_GetTick>
 8002532:	0002      	movs	r2, r0
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b64      	cmp	r3, #100	@ 0x64
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e1f5      	b.n	800292c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002540:	4b0b      	ldr	r3, [pc, #44]	@ (8002570 <HAL_RCC_OscConfig+0x344>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	2380      	movs	r3, #128	@ 0x80
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	4013      	ands	r3, r2
 800254a:	d0f0      	beq.n	800252e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d10f      	bne.n	8002574 <HAL_RCC_OscConfig+0x348>
 8002554:	4b03      	ldr	r3, [pc, #12]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 8002556:	6a1a      	ldr	r2, [r3, #32]
 8002558:	4b02      	ldr	r3, [pc, #8]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 800255a:	2101      	movs	r1, #1
 800255c:	430a      	orrs	r2, r1
 800255e:	621a      	str	r2, [r3, #32]
 8002560:	e036      	b.n	80025d0 <HAL_RCC_OscConfig+0x3a4>
 8002562:	46c0      	nop			@ (mov r8, r8)
 8002564:	40021000 	.word	0x40021000
 8002568:	fffeffff 	.word	0xfffeffff
 800256c:	fffbffff 	.word	0xfffbffff
 8002570:	40007000 	.word	0x40007000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10c      	bne.n	8002596 <HAL_RCC_OscConfig+0x36a>
 800257c:	4bca      	ldr	r3, [pc, #808]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 800257e:	6a1a      	ldr	r2, [r3, #32]
 8002580:	4bc9      	ldr	r3, [pc, #804]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 8002582:	2101      	movs	r1, #1
 8002584:	438a      	bics	r2, r1
 8002586:	621a      	str	r2, [r3, #32]
 8002588:	4bc7      	ldr	r3, [pc, #796]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 800258a:	6a1a      	ldr	r2, [r3, #32]
 800258c:	4bc6      	ldr	r3, [pc, #792]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 800258e:	2104      	movs	r1, #4
 8002590:	438a      	bics	r2, r1
 8002592:	621a      	str	r2, [r3, #32]
 8002594:	e01c      	b.n	80025d0 <HAL_RCC_OscConfig+0x3a4>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	2b05      	cmp	r3, #5
 800259c:	d10c      	bne.n	80025b8 <HAL_RCC_OscConfig+0x38c>
 800259e:	4bc2      	ldr	r3, [pc, #776]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80025a0:	6a1a      	ldr	r2, [r3, #32]
 80025a2:	4bc1      	ldr	r3, [pc, #772]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80025a4:	2104      	movs	r1, #4
 80025a6:	430a      	orrs	r2, r1
 80025a8:	621a      	str	r2, [r3, #32]
 80025aa:	4bbf      	ldr	r3, [pc, #764]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80025ac:	6a1a      	ldr	r2, [r3, #32]
 80025ae:	4bbe      	ldr	r3, [pc, #760]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80025b0:	2101      	movs	r1, #1
 80025b2:	430a      	orrs	r2, r1
 80025b4:	621a      	str	r2, [r3, #32]
 80025b6:	e00b      	b.n	80025d0 <HAL_RCC_OscConfig+0x3a4>
 80025b8:	4bbb      	ldr	r3, [pc, #748]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80025ba:	6a1a      	ldr	r2, [r3, #32]
 80025bc:	4bba      	ldr	r3, [pc, #744]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80025be:	2101      	movs	r1, #1
 80025c0:	438a      	bics	r2, r1
 80025c2:	621a      	str	r2, [r3, #32]
 80025c4:	4bb8      	ldr	r3, [pc, #736]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80025c6:	6a1a      	ldr	r2, [r3, #32]
 80025c8:	4bb7      	ldr	r3, [pc, #732]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80025ca:	2104      	movs	r1, #4
 80025cc:	438a      	bics	r2, r1
 80025ce:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d014      	beq.n	8002602 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d8:	f7ff f986 	bl	80018e8 <HAL_GetTick>
 80025dc:	0003      	movs	r3, r0
 80025de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e0:	e009      	b.n	80025f6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025e2:	f7ff f981 	bl	80018e8 <HAL_GetTick>
 80025e6:	0002      	movs	r2, r0
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	4aaf      	ldr	r2, [pc, #700]	@ (80028ac <HAL_RCC_OscConfig+0x680>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e19a      	b.n	800292c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f6:	4bac      	ldr	r3, [pc, #688]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	2202      	movs	r2, #2
 80025fc:	4013      	ands	r3, r2
 80025fe:	d0f0      	beq.n	80025e2 <HAL_RCC_OscConfig+0x3b6>
 8002600:	e013      	b.n	800262a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002602:	f7ff f971 	bl	80018e8 <HAL_GetTick>
 8002606:	0003      	movs	r3, r0
 8002608:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800260a:	e009      	b.n	8002620 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800260c:	f7ff f96c 	bl	80018e8 <HAL_GetTick>
 8002610:	0002      	movs	r2, r0
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	4aa5      	ldr	r2, [pc, #660]	@ (80028ac <HAL_RCC_OscConfig+0x680>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e185      	b.n	800292c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002620:	4ba1      	ldr	r3, [pc, #644]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	2202      	movs	r2, #2
 8002626:	4013      	ands	r3, r2
 8002628:	d1f0      	bne.n	800260c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800262a:	231f      	movs	r3, #31
 800262c:	18fb      	adds	r3, r7, r3
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d105      	bne.n	8002640 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002634:	4b9c      	ldr	r3, [pc, #624]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 8002636:	69da      	ldr	r2, [r3, #28]
 8002638:	4b9b      	ldr	r3, [pc, #620]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 800263a:	499d      	ldr	r1, [pc, #628]	@ (80028b0 <HAL_RCC_OscConfig+0x684>)
 800263c:	400a      	ands	r2, r1
 800263e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2210      	movs	r2, #16
 8002646:	4013      	ands	r3, r2
 8002648:	d063      	beq.n	8002712 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d12a      	bne.n	80026a8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002652:	4b95      	ldr	r3, [pc, #596]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 8002654:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002656:	4b94      	ldr	r3, [pc, #592]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 8002658:	2104      	movs	r1, #4
 800265a:	430a      	orrs	r2, r1
 800265c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800265e:	4b92      	ldr	r3, [pc, #584]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 8002660:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002662:	4b91      	ldr	r3, [pc, #580]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 8002664:	2101      	movs	r1, #1
 8002666:	430a      	orrs	r2, r1
 8002668:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800266a:	f7ff f93d 	bl	80018e8 <HAL_GetTick>
 800266e:	0003      	movs	r3, r0
 8002670:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002674:	f7ff f938 	bl	80018e8 <HAL_GetTick>
 8002678:	0002      	movs	r2, r0
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e152      	b.n	800292c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002686:	4b88      	ldr	r3, [pc, #544]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 8002688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800268a:	2202      	movs	r2, #2
 800268c:	4013      	ands	r3, r2
 800268e:	d0f1      	beq.n	8002674 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002690:	4b85      	ldr	r3, [pc, #532]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 8002692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002694:	22f8      	movs	r2, #248	@ 0xf8
 8002696:	4393      	bics	r3, r2
 8002698:	0019      	movs	r1, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	00da      	lsls	r2, r3, #3
 80026a0:	4b81      	ldr	r3, [pc, #516]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80026a2:	430a      	orrs	r2, r1
 80026a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80026a6:	e034      	b.n	8002712 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	3305      	adds	r3, #5
 80026ae:	d111      	bne.n	80026d4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80026b0:	4b7d      	ldr	r3, [pc, #500]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80026b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026b4:	4b7c      	ldr	r3, [pc, #496]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80026b6:	2104      	movs	r1, #4
 80026b8:	438a      	bics	r2, r1
 80026ba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80026bc:	4b7a      	ldr	r3, [pc, #488]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80026be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026c0:	22f8      	movs	r2, #248	@ 0xf8
 80026c2:	4393      	bics	r3, r2
 80026c4:	0019      	movs	r1, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	00da      	lsls	r2, r3, #3
 80026cc:	4b76      	ldr	r3, [pc, #472]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80026ce:	430a      	orrs	r2, r1
 80026d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80026d2:	e01e      	b.n	8002712 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80026d4:	4b74      	ldr	r3, [pc, #464]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80026d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026d8:	4b73      	ldr	r3, [pc, #460]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80026da:	2104      	movs	r1, #4
 80026dc:	430a      	orrs	r2, r1
 80026de:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80026e0:	4b71      	ldr	r3, [pc, #452]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80026e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026e4:	4b70      	ldr	r3, [pc, #448]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80026e6:	2101      	movs	r1, #1
 80026e8:	438a      	bics	r2, r1
 80026ea:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ec:	f7ff f8fc 	bl	80018e8 <HAL_GetTick>
 80026f0:	0003      	movs	r3, r0
 80026f2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80026f6:	f7ff f8f7 	bl	80018e8 <HAL_GetTick>
 80026fa:	0002      	movs	r2, r0
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e111      	b.n	800292c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002708:	4b67      	ldr	r3, [pc, #412]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 800270a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800270c:	2202      	movs	r2, #2
 800270e:	4013      	ands	r3, r2
 8002710:	d1f1      	bne.n	80026f6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2220      	movs	r2, #32
 8002718:	4013      	ands	r3, r2
 800271a:	d05c      	beq.n	80027d6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800271c:	4b62      	ldr	r3, [pc, #392]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	220c      	movs	r2, #12
 8002722:	4013      	ands	r3, r2
 8002724:	2b0c      	cmp	r3, #12
 8002726:	d00e      	beq.n	8002746 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002728:	4b5f      	ldr	r3, [pc, #380]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	220c      	movs	r2, #12
 800272e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002730:	2b08      	cmp	r3, #8
 8002732:	d114      	bne.n	800275e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002734:	4b5c      	ldr	r3, [pc, #368]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	23c0      	movs	r3, #192	@ 0xc0
 800273a:	025b      	lsls	r3, r3, #9
 800273c:	401a      	ands	r2, r3
 800273e:	23c0      	movs	r3, #192	@ 0xc0
 8002740:	025b      	lsls	r3, r3, #9
 8002742:	429a      	cmp	r2, r3
 8002744:	d10b      	bne.n	800275e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002746:	4b58      	ldr	r3, [pc, #352]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 8002748:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800274a:	2380      	movs	r3, #128	@ 0x80
 800274c:	029b      	lsls	r3, r3, #10
 800274e:	4013      	ands	r3, r2
 8002750:	d040      	beq.n	80027d4 <HAL_RCC_OscConfig+0x5a8>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d03c      	beq.n	80027d4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e0e6      	b.n	800292c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d01b      	beq.n	800279e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002766:	4b50      	ldr	r3, [pc, #320]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 8002768:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800276a:	4b4f      	ldr	r3, [pc, #316]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 800276c:	2180      	movs	r1, #128	@ 0x80
 800276e:	0249      	lsls	r1, r1, #9
 8002770:	430a      	orrs	r2, r1
 8002772:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002774:	f7ff f8b8 	bl	80018e8 <HAL_GetTick>
 8002778:	0003      	movs	r3, r0
 800277a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800277e:	f7ff f8b3 	bl	80018e8 <HAL_GetTick>
 8002782:	0002      	movs	r2, r0
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e0cd      	b.n	800292c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002790:	4b45      	ldr	r3, [pc, #276]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 8002792:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002794:	2380      	movs	r3, #128	@ 0x80
 8002796:	029b      	lsls	r3, r3, #10
 8002798:	4013      	ands	r3, r2
 800279a:	d0f0      	beq.n	800277e <HAL_RCC_OscConfig+0x552>
 800279c:	e01b      	b.n	80027d6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800279e:	4b42      	ldr	r3, [pc, #264]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80027a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027a2:	4b41      	ldr	r3, [pc, #260]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80027a4:	4943      	ldr	r1, [pc, #268]	@ (80028b4 <HAL_RCC_OscConfig+0x688>)
 80027a6:	400a      	ands	r2, r1
 80027a8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027aa:	f7ff f89d 	bl	80018e8 <HAL_GetTick>
 80027ae:	0003      	movs	r3, r0
 80027b0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027b4:	f7ff f898 	bl	80018e8 <HAL_GetTick>
 80027b8:	0002      	movs	r2, r0
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e0b2      	b.n	800292c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80027c6:	4b38      	ldr	r3, [pc, #224]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80027c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027ca:	2380      	movs	r3, #128	@ 0x80
 80027cc:	029b      	lsls	r3, r3, #10
 80027ce:	4013      	ands	r3, r2
 80027d0:	d1f0      	bne.n	80027b4 <HAL_RCC_OscConfig+0x588>
 80027d2:	e000      	b.n	80027d6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80027d4:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d100      	bne.n	80027e0 <HAL_RCC_OscConfig+0x5b4>
 80027de:	e0a4      	b.n	800292a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027e0:	4b31      	ldr	r3, [pc, #196]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	220c      	movs	r2, #12
 80027e6:	4013      	ands	r3, r2
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	d100      	bne.n	80027ee <HAL_RCC_OscConfig+0x5c2>
 80027ec:	e078      	b.n	80028e0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d14c      	bne.n	8002890 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f6:	4b2c      	ldr	r3, [pc, #176]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	4b2b      	ldr	r3, [pc, #172]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80027fc:	492e      	ldr	r1, [pc, #184]	@ (80028b8 <HAL_RCC_OscConfig+0x68c>)
 80027fe:	400a      	ands	r2, r1
 8002800:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002802:	f7ff f871 	bl	80018e8 <HAL_GetTick>
 8002806:	0003      	movs	r3, r0
 8002808:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800280c:	f7ff f86c 	bl	80018e8 <HAL_GetTick>
 8002810:	0002      	movs	r2, r0
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e086      	b.n	800292c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800281e:	4b22      	ldr	r3, [pc, #136]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	2380      	movs	r3, #128	@ 0x80
 8002824:	049b      	lsls	r3, r3, #18
 8002826:	4013      	ands	r3, r2
 8002828:	d1f0      	bne.n	800280c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800282a:	4b1f      	ldr	r3, [pc, #124]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 800282c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800282e:	220f      	movs	r2, #15
 8002830:	4393      	bics	r3, r2
 8002832:	0019      	movs	r1, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002838:	4b1b      	ldr	r3, [pc, #108]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 800283a:	430a      	orrs	r2, r1
 800283c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800283e:	4b1a      	ldr	r3, [pc, #104]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	4a1e      	ldr	r2, [pc, #120]	@ (80028bc <HAL_RCC_OscConfig+0x690>)
 8002844:	4013      	ands	r3, r2
 8002846:	0019      	movs	r1, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002850:	431a      	orrs	r2, r3
 8002852:	4b15      	ldr	r3, [pc, #84]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 8002854:	430a      	orrs	r2, r1
 8002856:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002858:	4b13      	ldr	r3, [pc, #76]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	4b12      	ldr	r3, [pc, #72]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 800285e:	2180      	movs	r1, #128	@ 0x80
 8002860:	0449      	lsls	r1, r1, #17
 8002862:	430a      	orrs	r2, r1
 8002864:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002866:	f7ff f83f 	bl	80018e8 <HAL_GetTick>
 800286a:	0003      	movs	r3, r0
 800286c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002870:	f7ff f83a 	bl	80018e8 <HAL_GetTick>
 8002874:	0002      	movs	r2, r0
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e054      	b.n	800292c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002882:	4b09      	ldr	r3, [pc, #36]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	2380      	movs	r3, #128	@ 0x80
 8002888:	049b      	lsls	r3, r3, #18
 800288a:	4013      	ands	r3, r2
 800288c:	d0f0      	beq.n	8002870 <HAL_RCC_OscConfig+0x644>
 800288e:	e04c      	b.n	800292a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002890:	4b05      	ldr	r3, [pc, #20]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	4b04      	ldr	r3, [pc, #16]	@ (80028a8 <HAL_RCC_OscConfig+0x67c>)
 8002896:	4908      	ldr	r1, [pc, #32]	@ (80028b8 <HAL_RCC_OscConfig+0x68c>)
 8002898:	400a      	ands	r2, r1
 800289a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289c:	f7ff f824 	bl	80018e8 <HAL_GetTick>
 80028a0:	0003      	movs	r3, r0
 80028a2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a4:	e015      	b.n	80028d2 <HAL_RCC_OscConfig+0x6a6>
 80028a6:	46c0      	nop			@ (mov r8, r8)
 80028a8:	40021000 	.word	0x40021000
 80028ac:	00001388 	.word	0x00001388
 80028b0:	efffffff 	.word	0xefffffff
 80028b4:	fffeffff 	.word	0xfffeffff
 80028b8:	feffffff 	.word	0xfeffffff
 80028bc:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c0:	f7ff f812 	bl	80018e8 <HAL_GetTick>
 80028c4:	0002      	movs	r2, r0
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e02c      	b.n	800292c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028d2:	4b18      	ldr	r3, [pc, #96]	@ (8002934 <HAL_RCC_OscConfig+0x708>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	2380      	movs	r3, #128	@ 0x80
 80028d8:	049b      	lsls	r3, r3, #18
 80028da:	4013      	ands	r3, r2
 80028dc:	d1f0      	bne.n	80028c0 <HAL_RCC_OscConfig+0x694>
 80028de:	e024      	b.n	800292a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d101      	bne.n	80028ec <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e01f      	b.n	800292c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80028ec:	4b11      	ldr	r3, [pc, #68]	@ (8002934 <HAL_RCC_OscConfig+0x708>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80028f2:	4b10      	ldr	r3, [pc, #64]	@ (8002934 <HAL_RCC_OscConfig+0x708>)
 80028f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028f6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	23c0      	movs	r3, #192	@ 0xc0
 80028fc:	025b      	lsls	r3, r3, #9
 80028fe:	401a      	ands	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002904:	429a      	cmp	r2, r3
 8002906:	d10e      	bne.n	8002926 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	220f      	movs	r2, #15
 800290c:	401a      	ands	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002912:	429a      	cmp	r2, r3
 8002914:	d107      	bne.n	8002926 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	23f0      	movs	r3, #240	@ 0xf0
 800291a:	039b      	lsls	r3, r3, #14
 800291c:	401a      	ands	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002922:	429a      	cmp	r2, r3
 8002924:	d001      	beq.n	800292a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e000      	b.n	800292c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	0018      	movs	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	b008      	add	sp, #32
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40021000 	.word	0x40021000

08002938 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e0bf      	b.n	8002acc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800294c:	4b61      	ldr	r3, [pc, #388]	@ (8002ad4 <HAL_RCC_ClockConfig+0x19c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2201      	movs	r2, #1
 8002952:	4013      	ands	r3, r2
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d911      	bls.n	800297e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295a:	4b5e      	ldr	r3, [pc, #376]	@ (8002ad4 <HAL_RCC_ClockConfig+0x19c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2201      	movs	r2, #1
 8002960:	4393      	bics	r3, r2
 8002962:	0019      	movs	r1, r3
 8002964:	4b5b      	ldr	r3, [pc, #364]	@ (8002ad4 <HAL_RCC_ClockConfig+0x19c>)
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	430a      	orrs	r2, r1
 800296a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800296c:	4b59      	ldr	r3, [pc, #356]	@ (8002ad4 <HAL_RCC_ClockConfig+0x19c>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2201      	movs	r2, #1
 8002972:	4013      	ands	r3, r2
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	429a      	cmp	r2, r3
 8002978:	d001      	beq.n	800297e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e0a6      	b.n	8002acc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2202      	movs	r2, #2
 8002984:	4013      	ands	r3, r2
 8002986:	d015      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2204      	movs	r2, #4
 800298e:	4013      	ands	r3, r2
 8002990:	d006      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002992:	4b51      	ldr	r3, [pc, #324]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	4b50      	ldr	r3, [pc, #320]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8002998:	21e0      	movs	r1, #224	@ 0xe0
 800299a:	00c9      	lsls	r1, r1, #3
 800299c:	430a      	orrs	r2, r1
 800299e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a0:	4b4d      	ldr	r3, [pc, #308]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1a0>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	22f0      	movs	r2, #240	@ 0xf0
 80029a6:	4393      	bics	r3, r2
 80029a8:	0019      	movs	r1, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689a      	ldr	r2, [r3, #8]
 80029ae:	4b4a      	ldr	r3, [pc, #296]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1a0>)
 80029b0:	430a      	orrs	r2, r1
 80029b2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2201      	movs	r2, #1
 80029ba:	4013      	ands	r3, r2
 80029bc:	d04c      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d107      	bne.n	80029d6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c6:	4b44      	ldr	r3, [pc, #272]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1a0>)
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	2380      	movs	r3, #128	@ 0x80
 80029cc:	029b      	lsls	r3, r3, #10
 80029ce:	4013      	ands	r3, r2
 80029d0:	d120      	bne.n	8002a14 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e07a      	b.n	8002acc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d107      	bne.n	80029ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029de:	4b3e      	ldr	r3, [pc, #248]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1a0>)
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	2380      	movs	r3, #128	@ 0x80
 80029e4:	049b      	lsls	r3, r3, #18
 80029e6:	4013      	ands	r3, r2
 80029e8:	d114      	bne.n	8002a14 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e06e      	b.n	8002acc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	d107      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80029f6:	4b38      	ldr	r3, [pc, #224]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1a0>)
 80029f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029fa:	2380      	movs	r3, #128	@ 0x80
 80029fc:	029b      	lsls	r3, r3, #10
 80029fe:	4013      	ands	r3, r2
 8002a00:	d108      	bne.n	8002a14 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e062      	b.n	8002acc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a06:	4b34      	ldr	r3, [pc, #208]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	d101      	bne.n	8002a14 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e05b      	b.n	8002acc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a14:	4b30      	ldr	r3, [pc, #192]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	2203      	movs	r2, #3
 8002a1a:	4393      	bics	r3, r2
 8002a1c:	0019      	movs	r1, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	4b2d      	ldr	r3, [pc, #180]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8002a24:	430a      	orrs	r2, r1
 8002a26:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a28:	f7fe ff5e 	bl	80018e8 <HAL_GetTick>
 8002a2c:	0003      	movs	r3, r0
 8002a2e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a30:	e009      	b.n	8002a46 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a32:	f7fe ff59 	bl	80018e8 <HAL_GetTick>
 8002a36:	0002      	movs	r2, r0
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	4a27      	ldr	r2, [pc, #156]	@ (8002adc <HAL_RCC_ClockConfig+0x1a4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e042      	b.n	8002acc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a46:	4b24      	ldr	r3, [pc, #144]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	220c      	movs	r2, #12
 8002a4c:	401a      	ands	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d1ec      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a58:	4b1e      	ldr	r3, [pc, #120]	@ (8002ad4 <HAL_RCC_ClockConfig+0x19c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	4013      	ands	r3, r2
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d211      	bcs.n	8002a8a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a66:	4b1b      	ldr	r3, [pc, #108]	@ (8002ad4 <HAL_RCC_ClockConfig+0x19c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	4393      	bics	r3, r2
 8002a6e:	0019      	movs	r1, r3
 8002a70:	4b18      	ldr	r3, [pc, #96]	@ (8002ad4 <HAL_RCC_ClockConfig+0x19c>)
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a78:	4b16      	ldr	r3, [pc, #88]	@ (8002ad4 <HAL_RCC_ClockConfig+0x19c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	4013      	ands	r3, r2
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d001      	beq.n	8002a8a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e020      	b.n	8002acc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2204      	movs	r2, #4
 8002a90:	4013      	ands	r3, r2
 8002a92:	d009      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002a94:	4b10      	ldr	r3, [pc, #64]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	4a11      	ldr	r2, [pc, #68]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1a8>)
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	0019      	movs	r1, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002aa8:	f000 f820 	bl	8002aec <HAL_RCC_GetSysClockFreq>
 8002aac:	0001      	movs	r1, r0
 8002aae:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	091b      	lsrs	r3, r3, #4
 8002ab4:	220f      	movs	r2, #15
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	4a0a      	ldr	r2, [pc, #40]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1ac>)
 8002aba:	5cd3      	ldrb	r3, [r2, r3]
 8002abc:	000a      	movs	r2, r1
 8002abe:	40da      	lsrs	r2, r3
 8002ac0:	4b09      	ldr	r3, [pc, #36]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1b0>)
 8002ac2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002ac4:	2000      	movs	r0, #0
 8002ac6:	f7fe fec9 	bl	800185c <HAL_InitTick>
  
  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	0018      	movs	r0, r3
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	b004      	add	sp, #16
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40022000 	.word	0x40022000
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	00001388 	.word	0x00001388
 8002ae0:	fffff8ff 	.word	0xfffff8ff
 8002ae4:	08004654 	.word	0x08004654
 8002ae8:	20000000 	.word	0x20000000

08002aec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	60fb      	str	r3, [r7, #12]
 8002af6:	2300      	movs	r3, #0
 8002af8:	60bb      	str	r3, [r7, #8]
 8002afa:	2300      	movs	r3, #0
 8002afc:	617b      	str	r3, [r7, #20]
 8002afe:	2300      	movs	r3, #0
 8002b00:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002b06:	4b2d      	ldr	r3, [pc, #180]	@ (8002bbc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	220c      	movs	r2, #12
 8002b10:	4013      	ands	r3, r2
 8002b12:	2b0c      	cmp	r3, #12
 8002b14:	d046      	beq.n	8002ba4 <HAL_RCC_GetSysClockFreq+0xb8>
 8002b16:	d848      	bhi.n	8002baa <HAL_RCC_GetSysClockFreq+0xbe>
 8002b18:	2b04      	cmp	r3, #4
 8002b1a:	d002      	beq.n	8002b22 <HAL_RCC_GetSysClockFreq+0x36>
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	d003      	beq.n	8002b28 <HAL_RCC_GetSysClockFreq+0x3c>
 8002b20:	e043      	b.n	8002baa <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b22:	4b27      	ldr	r3, [pc, #156]	@ (8002bc0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002b24:	613b      	str	r3, [r7, #16]
      break;
 8002b26:	e043      	b.n	8002bb0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	0c9b      	lsrs	r3, r3, #18
 8002b2c:	220f      	movs	r2, #15
 8002b2e:	4013      	ands	r3, r2
 8002b30:	4a24      	ldr	r2, [pc, #144]	@ (8002bc4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002b32:	5cd3      	ldrb	r3, [r2, r3]
 8002b34:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002b36:	4b21      	ldr	r3, [pc, #132]	@ (8002bbc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b3a:	220f      	movs	r2, #15
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	4a22      	ldr	r2, [pc, #136]	@ (8002bc8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002b40:	5cd3      	ldrb	r3, [r2, r3]
 8002b42:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	23c0      	movs	r3, #192	@ 0xc0
 8002b48:	025b      	lsls	r3, r3, #9
 8002b4a:	401a      	ands	r2, r3
 8002b4c:	2380      	movs	r3, #128	@ 0x80
 8002b4e:	025b      	lsls	r3, r3, #9
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d109      	bne.n	8002b68 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b54:	68b9      	ldr	r1, [r7, #8]
 8002b56:	481a      	ldr	r0, [pc, #104]	@ (8002bc0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002b58:	f7fd fae0 	bl	800011c <__udivsi3>
 8002b5c:	0003      	movs	r3, r0
 8002b5e:	001a      	movs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4353      	muls	r3, r2
 8002b64:	617b      	str	r3, [r7, #20]
 8002b66:	e01a      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	23c0      	movs	r3, #192	@ 0xc0
 8002b6c:	025b      	lsls	r3, r3, #9
 8002b6e:	401a      	ands	r2, r3
 8002b70:	23c0      	movs	r3, #192	@ 0xc0
 8002b72:	025b      	lsls	r3, r3, #9
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d109      	bne.n	8002b8c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b78:	68b9      	ldr	r1, [r7, #8]
 8002b7a:	4814      	ldr	r0, [pc, #80]	@ (8002bcc <HAL_RCC_GetSysClockFreq+0xe0>)
 8002b7c:	f7fd face 	bl	800011c <__udivsi3>
 8002b80:	0003      	movs	r3, r0
 8002b82:	001a      	movs	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4353      	muls	r3, r2
 8002b88:	617b      	str	r3, [r7, #20]
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b8c:	68b9      	ldr	r1, [r7, #8]
 8002b8e:	480c      	ldr	r0, [pc, #48]	@ (8002bc0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002b90:	f7fd fac4 	bl	800011c <__udivsi3>
 8002b94:	0003      	movs	r3, r0
 8002b96:	001a      	movs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4353      	muls	r3, r2
 8002b9c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	613b      	str	r3, [r7, #16]
      break;
 8002ba2:	e005      	b.n	8002bb0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002ba4:	4b09      	ldr	r3, [pc, #36]	@ (8002bcc <HAL_RCC_GetSysClockFreq+0xe0>)
 8002ba6:	613b      	str	r3, [r7, #16]
      break;
 8002ba8:	e002      	b.n	8002bb0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002baa:	4b05      	ldr	r3, [pc, #20]	@ (8002bc0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002bac:	613b      	str	r3, [r7, #16]
      break;
 8002bae:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002bb0:	693b      	ldr	r3, [r7, #16]
}
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	b006      	add	sp, #24
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	46c0      	nop			@ (mov r8, r8)
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	007a1200 	.word	0x007a1200
 8002bc4:	08004964 	.word	0x08004964
 8002bc8:	08004974 	.word	0x08004974
 8002bcc:	02dc6c00 	.word	0x02dc6c00

08002bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bd4:	4b02      	ldr	r3, [pc, #8]	@ (8002be0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
}
 8002bd8:	0018      	movs	r0, r3
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	46c0      	nop			@ (mov r8, r8)
 8002be0:	20000000 	.word	0x20000000

08002be4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002be8:	f7ff fff2 	bl	8002bd0 <HAL_RCC_GetHCLKFreq>
 8002bec:	0001      	movs	r1, r0
 8002bee:	4b06      	ldr	r3, [pc, #24]	@ (8002c08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	0a1b      	lsrs	r3, r3, #8
 8002bf4:	2207      	movs	r2, #7
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	4a04      	ldr	r2, [pc, #16]	@ (8002c0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bfa:	5cd3      	ldrb	r3, [r2, r3]
 8002bfc:	40d9      	lsrs	r1, r3
 8002bfe:	000b      	movs	r3, r1
}    
 8002c00:	0018      	movs	r0, r3
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	46c0      	nop			@ (mov r8, r8)
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	08004664 	.word	0x08004664

08002c10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	2380      	movs	r3, #128	@ 0x80
 8002c26:	025b      	lsls	r3, r3, #9
 8002c28:	4013      	ands	r3, r2
 8002c2a:	d100      	bne.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002c2c:	e08e      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002c2e:	2017      	movs	r0, #23
 8002c30:	183b      	adds	r3, r7, r0
 8002c32:	2200      	movs	r2, #0
 8002c34:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c36:	4b67      	ldr	r3, [pc, #412]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c38:	69da      	ldr	r2, [r3, #28]
 8002c3a:	2380      	movs	r3, #128	@ 0x80
 8002c3c:	055b      	lsls	r3, r3, #21
 8002c3e:	4013      	ands	r3, r2
 8002c40:	d110      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c42:	4b64      	ldr	r3, [pc, #400]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c44:	69da      	ldr	r2, [r3, #28]
 8002c46:	4b63      	ldr	r3, [pc, #396]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c48:	2180      	movs	r1, #128	@ 0x80
 8002c4a:	0549      	lsls	r1, r1, #21
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	61da      	str	r2, [r3, #28]
 8002c50:	4b60      	ldr	r3, [pc, #384]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c52:	69da      	ldr	r2, [r3, #28]
 8002c54:	2380      	movs	r3, #128	@ 0x80
 8002c56:	055b      	lsls	r3, r3, #21
 8002c58:	4013      	ands	r3, r2
 8002c5a:	60bb      	str	r3, [r7, #8]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c5e:	183b      	adds	r3, r7, r0
 8002c60:	2201      	movs	r2, #1
 8002c62:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c64:	4b5c      	ldr	r3, [pc, #368]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	2380      	movs	r3, #128	@ 0x80
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	d11a      	bne.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c70:	4b59      	ldr	r3, [pc, #356]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	4b58      	ldr	r3, [pc, #352]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002c76:	2180      	movs	r1, #128	@ 0x80
 8002c78:	0049      	lsls	r1, r1, #1
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c7e:	f7fe fe33 	bl	80018e8 <HAL_GetTick>
 8002c82:	0003      	movs	r3, r0
 8002c84:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c86:	e008      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c88:	f7fe fe2e 	bl	80018e8 <HAL_GetTick>
 8002c8c:	0002      	movs	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b64      	cmp	r3, #100	@ 0x64
 8002c94:	d901      	bls.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e097      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9a:	4b4f      	ldr	r3, [pc, #316]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	2380      	movs	r3, #128	@ 0x80
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d0f0      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ca6:	4b4b      	ldr	r3, [pc, #300]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ca8:	6a1a      	ldr	r2, [r3, #32]
 8002caa:	23c0      	movs	r3, #192	@ 0xc0
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4013      	ands	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d034      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	23c0      	movs	r3, #192	@ 0xc0
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d02c      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cc8:	4b42      	ldr	r3, [pc, #264]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	4a43      	ldr	r2, [pc, #268]	@ (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002cce:	4013      	ands	r3, r2
 8002cd0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cd2:	4b40      	ldr	r3, [pc, #256]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002cd4:	6a1a      	ldr	r2, [r3, #32]
 8002cd6:	4b3f      	ldr	r3, [pc, #252]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002cd8:	2180      	movs	r1, #128	@ 0x80
 8002cda:	0249      	lsls	r1, r1, #9
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ce0:	4b3c      	ldr	r3, [pc, #240]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ce2:	6a1a      	ldr	r2, [r3, #32]
 8002ce4:	4b3b      	ldr	r3, [pc, #236]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ce6:	493e      	ldr	r1, [pc, #248]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ce8:	400a      	ands	r2, r1
 8002cea:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002cec:	4b39      	ldr	r3, [pc, #228]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	d013      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfa:	f7fe fdf5 	bl	80018e8 <HAL_GetTick>
 8002cfe:	0003      	movs	r3, r0
 8002d00:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d02:	e009      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d04:	f7fe fdf0 	bl	80018e8 <HAL_GetTick>
 8002d08:	0002      	movs	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	4a35      	ldr	r2, [pc, #212]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e058      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d18:	4b2e      	ldr	r3, [pc, #184]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	4013      	ands	r3, r2
 8002d20:	d0f0      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d22:	4b2c      	ldr	r3, [pc, #176]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	4a2d      	ldr	r2, [pc, #180]	@ (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d28:	4013      	ands	r3, r2
 8002d2a:	0019      	movs	r1, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	4b28      	ldr	r3, [pc, #160]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d32:	430a      	orrs	r2, r1
 8002d34:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d36:	2317      	movs	r3, #23
 8002d38:	18fb      	adds	r3, r7, r3
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d105      	bne.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d40:	4b24      	ldr	r3, [pc, #144]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d42:	69da      	ldr	r2, [r3, #28]
 8002d44:	4b23      	ldr	r3, [pc, #140]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d46:	4928      	ldr	r1, [pc, #160]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002d48:	400a      	ands	r2, r1
 8002d4a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2201      	movs	r2, #1
 8002d52:	4013      	ands	r3, r2
 8002d54:	d009      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d56:	4b1f      	ldr	r3, [pc, #124]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5a:	2203      	movs	r2, #3
 8002d5c:	4393      	bics	r3, r2
 8002d5e:	0019      	movs	r1, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d66:	430a      	orrs	r2, r1
 8002d68:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	4013      	ands	r3, r2
 8002d72:	d009      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d74:	4b17      	ldr	r3, [pc, #92]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d78:	2210      	movs	r2, #16
 8002d7a:	4393      	bics	r3, r2
 8002d7c:	0019      	movs	r1, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68da      	ldr	r2, [r3, #12]
 8002d82:	4b14      	ldr	r3, [pc, #80]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d84:	430a      	orrs	r2, r1
 8002d86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	2380      	movs	r3, #128	@ 0x80
 8002d8e:	029b      	lsls	r3, r3, #10
 8002d90:	4013      	ands	r3, r2
 8002d92:	d009      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d94:	4b0f      	ldr	r3, [pc, #60]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d98:	2280      	movs	r2, #128	@ 0x80
 8002d9a:	4393      	bics	r3, r2
 8002d9c:	0019      	movs	r1, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695a      	ldr	r2, [r3, #20]
 8002da2:	4b0c      	ldr	r3, [pc, #48]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002da4:	430a      	orrs	r2, r1
 8002da6:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	2380      	movs	r3, #128	@ 0x80
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	4013      	ands	r3, r2
 8002db2:	d009      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002db4:	4b07      	ldr	r3, [pc, #28]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db8:	2240      	movs	r2, #64	@ 0x40
 8002dba:	4393      	bics	r3, r2
 8002dbc:	0019      	movs	r1, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691a      	ldr	r2, [r3, #16]
 8002dc2:	4b04      	ldr	r3, [pc, #16]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	0018      	movs	r0, r3
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	b006      	add	sp, #24
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	46c0      	nop			@ (mov r8, r8)
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	40007000 	.word	0x40007000
 8002ddc:	fffffcff 	.word	0xfffffcff
 8002de0:	fffeffff 	.word	0xfffeffff
 8002de4:	00001388 	.word	0x00001388
 8002de8:	efffffff 	.word	0xefffffff

08002dec <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e03f      	b.n	8002e7e <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2249      	movs	r2, #73	@ 0x49
 8002e02:	5c9b      	ldrb	r3, [r3, r2]
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d107      	bne.n	8002e1a <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2248      	movs	r2, #72	@ 0x48
 8002e0e:	2100      	movs	r1, #0
 8002e10:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	0018      	movs	r0, r3
 8002e16:	f7fd fc63 	bl	80006e0 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2249      	movs	r2, #73	@ 0x49
 8002e1e:	2102      	movs	r1, #2
 8002e20:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	438a      	bics	r2, r1
 8002e30:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	0018      	movs	r0, r3
 8002e36:	f000 f85f 	bl	8002ef8 <USART_SetConfig>
 8002e3a:	0003      	movs	r3, r0
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d101      	bne.n	8002e44 <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e01c      	b.n	8002e7e <HAL_USART_Init+0x92>
  /* In Synchronous SPI mode, the following bits must be kept cleared:
  - LINEN bit (if LIN is supported) in the USART_CR2 register
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported) bits in the USART_CR3 register.
  */
#if  defined (USART_CR2_LINEN)
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	490e      	ldr	r1, [pc, #56]	@ (8002e88 <HAL_USART_Init+0x9c>)
 8002e50:	400a      	ands	r2, r1
 8002e52:	605a      	str	r2, [r3, #4]
#endif /* USART_CR2_LINEN */
#if  defined (USART_CR3_SCEN)
#if  defined (USART_CR3_IREN)
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	212a      	movs	r1, #42	@ 0x2a
 8002e60:	438a      	bics	r2, r1
 8002e62:	609a      	str	r2, [r3, #8]
  husart->Instance->CR3 &= ~(USART_CR3_HDSEL);
#endif /* USART_CR3_IREN */
#endif /* USART_CR3_SCEN */

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2101      	movs	r1, #1
 8002e70:	430a      	orrs	r2, r1
 8002e72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	0018      	movs	r0, r3
 8002e78:	f000 f94e 	bl	8003118 <USART_CheckIdleState>
 8002e7c:	0003      	movs	r3, r0
}
 8002e7e:	0018      	movs	r0, r3
 8002e80:	46bd      	mov	sp, r7
 8002e82:	b002      	add	sp, #8
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	46c0      	nop			@ (mov r8, r8)
 8002e88:	ffffbfff 	.word	0xffffbfff

08002e8c <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	603b      	str	r3, [r7, #0]
 8002e98:	1dfb      	adds	r3, r7, #7
 8002e9a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8002e9c:	e017      	b.n	8002ece <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	d014      	beq.n	8002ece <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea4:	f7fe fd20 	bl	80018e8 <HAL_GetTick>
 8002ea8:	0002      	movs	r2, r0
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d302      	bcc.n	8002eba <USART_WaitOnFlagUntilTimeout+0x2e>
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d109      	bne.n	8002ece <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2249      	movs	r2, #73	@ 0x49
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2248      	movs	r2, #72	@ 0x48
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e00f      	b.n	8002eee <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	69db      	ldr	r3, [r3, #28]
 8002ed4:	68ba      	ldr	r2, [r7, #8]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	68ba      	ldr	r2, [r7, #8]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	425a      	negs	r2, r3
 8002ede:	4153      	adcs	r3, r2
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	001a      	movs	r2, r3
 8002ee4:	1dfb      	adds	r3, r7, #7
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d0d8      	beq.n	8002e9e <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	0018      	movs	r0, r3
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	b004      	add	sp, #16
 8002ef4:	bd80      	pop	{r7, pc}
	...

08002ef8 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b088      	sub	sp, #32
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8002f00:	231e      	movs	r3, #30
 8002f02:	18fb      	adds	r3, r7, r3
 8002f04:	2200      	movs	r2, #0
 8002f06:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	431a      	orrs	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	2280      	movs	r2, #128	@ 0x80
 8002f1e:	0212      	lsls	r2, r2, #8
 8002f20:	4313      	orrs	r3, r2
 8002f22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a75      	ldr	r2, [pc, #468]	@ (8003100 <USART_SetConfig+0x208>)
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	0019      	movs	r1, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL and STOP bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in USART Synchronous SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8002f3a:	2380      	movs	r3, #128	@ 0x80
 8002f3c:	011b      	lsls	r3, r3, #4
 8002f3e:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	699a      	ldr	r2, [r3, #24]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	4a66      	ldr	r2, [pc, #408]	@ (8003104 <USART_SetConfig+0x20c>)
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	0019      	movs	r1, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	605a      	str	r2, [r3, #4]


  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a62      	ldr	r2, [pc, #392]	@ (8003108 <USART_SetConfig+0x210>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d127      	bne.n	8002fd4 <USART_SetConfig+0xdc>
 8002f84:	4b61      	ldr	r3, [pc, #388]	@ (800310c <USART_SetConfig+0x214>)
 8002f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f88:	2203      	movs	r2, #3
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	2b03      	cmp	r3, #3
 8002f8e:	d00d      	beq.n	8002fac <USART_SetConfig+0xb4>
 8002f90:	d81b      	bhi.n	8002fca <USART_SetConfig+0xd2>
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d014      	beq.n	8002fc0 <USART_SetConfig+0xc8>
 8002f96:	d818      	bhi.n	8002fca <USART_SetConfig+0xd2>
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d002      	beq.n	8002fa2 <USART_SetConfig+0xaa>
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d00a      	beq.n	8002fb6 <USART_SetConfig+0xbe>
 8002fa0:	e013      	b.n	8002fca <USART_SetConfig+0xd2>
 8002fa2:	231f      	movs	r3, #31
 8002fa4:	18fb      	adds	r3, r7, r3
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	701a      	strb	r2, [r3, #0]
 8002faa:	e021      	b.n	8002ff0 <USART_SetConfig+0xf8>
 8002fac:	231f      	movs	r3, #31
 8002fae:	18fb      	adds	r3, r7, r3
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	701a      	strb	r2, [r3, #0]
 8002fb4:	e01c      	b.n	8002ff0 <USART_SetConfig+0xf8>
 8002fb6:	231f      	movs	r3, #31
 8002fb8:	18fb      	adds	r3, r7, r3
 8002fba:	2204      	movs	r2, #4
 8002fbc:	701a      	strb	r2, [r3, #0]
 8002fbe:	e017      	b.n	8002ff0 <USART_SetConfig+0xf8>
 8002fc0:	231f      	movs	r3, #31
 8002fc2:	18fb      	adds	r3, r7, r3
 8002fc4:	2208      	movs	r2, #8
 8002fc6:	701a      	strb	r2, [r3, #0]
 8002fc8:	e012      	b.n	8002ff0 <USART_SetConfig+0xf8>
 8002fca:	231f      	movs	r3, #31
 8002fcc:	18fb      	adds	r3, r7, r3
 8002fce:	2210      	movs	r2, #16
 8002fd0:	701a      	strb	r2, [r3, #0]
 8002fd2:	e00d      	b.n	8002ff0 <USART_SetConfig+0xf8>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a4d      	ldr	r2, [pc, #308]	@ (8003110 <USART_SetConfig+0x218>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d104      	bne.n	8002fe8 <USART_SetConfig+0xf0>
 8002fde:	231f      	movs	r3, #31
 8002fe0:	18fb      	adds	r3, r7, r3
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	701a      	strb	r2, [r3, #0]
 8002fe6:	e003      	b.n	8002ff0 <USART_SetConfig+0xf8>
 8002fe8:	231f      	movs	r3, #31
 8002fea:	18fb      	adds	r3, r7, r3
 8002fec:	2210      	movs	r2, #16
 8002fee:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 8002ff0:	231f      	movs	r3, #31
 8002ff2:	18fb      	adds	r3, r7, r3
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	2b08      	cmp	r3, #8
 8002ff8:	d03c      	beq.n	8003074 <USART_SetConfig+0x17c>
 8002ffa:	dc4a      	bgt.n	8003092 <USART_SetConfig+0x19a>
 8002ffc:	2b04      	cmp	r3, #4
 8002ffe:	d026      	beq.n	800304e <USART_SetConfig+0x156>
 8003000:	dc47      	bgt.n	8003092 <USART_SetConfig+0x19a>
 8003002:	2b00      	cmp	r3, #0
 8003004:	d002      	beq.n	800300c <USART_SetConfig+0x114>
 8003006:	2b02      	cmp	r3, #2
 8003008:	d013      	beq.n	8003032 <USART_SetConfig+0x13a>
 800300a:	e042      	b.n	8003092 <USART_SetConfig+0x19a>
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800300c:	f7ff fdea 	bl	8002be4 <HAL_RCC_GetPCLK1Freq>
 8003010:	0003      	movs	r3, r0
 8003012:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	005a      	lsls	r2, r3, #1
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	085b      	lsrs	r3, r3, #1
 800301e:	18d2      	adds	r2, r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	0019      	movs	r1, r3
 8003026:	0010      	movs	r0, r2
 8003028:	f7fd f878 	bl	800011c <__udivsi3>
 800302c:	0003      	movs	r3, r0
 800302e:	61bb      	str	r3, [r7, #24]
      break;
 8003030:	e034      	b.n	800309c <USART_SetConfig+0x1a4>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	085b      	lsrs	r3, r3, #1
 8003038:	4a36      	ldr	r2, [pc, #216]	@ (8003114 <USART_SetConfig+0x21c>)
 800303a:	189a      	adds	r2, r3, r2
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	0019      	movs	r1, r3
 8003042:	0010      	movs	r0, r2
 8003044:	f7fd f86a 	bl	800011c <__udivsi3>
 8003048:	0003      	movs	r3, r0
 800304a:	61bb      	str	r3, [r7, #24]
      break;
 800304c:	e026      	b.n	800309c <USART_SetConfig+0x1a4>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 800304e:	f7ff fd4d 	bl	8002aec <HAL_RCC_GetSysClockFreq>
 8003052:	0003      	movs	r3, r0
 8003054:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	005a      	lsls	r2, r3, #1
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	085b      	lsrs	r3, r3, #1
 8003060:	18d2      	adds	r2, r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	0019      	movs	r1, r3
 8003068:	0010      	movs	r0, r2
 800306a:	f7fd f857 	bl	800011c <__udivsi3>
 800306e:	0003      	movs	r3, r0
 8003070:	61bb      	str	r3, [r7, #24]
      break;
 8003072:	e013      	b.n	800309c <USART_SetConfig+0x1a4>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	085b      	lsrs	r3, r3, #1
 800307a:	2280      	movs	r2, #128	@ 0x80
 800307c:	0252      	lsls	r2, r2, #9
 800307e:	189a      	adds	r2, r3, r2
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	0019      	movs	r1, r3
 8003086:	0010      	movs	r0, r2
 8003088:	f7fd f848 	bl	800011c <__udivsi3>
 800308c:	0003      	movs	r3, r0
 800308e:	61bb      	str	r3, [r7, #24]
      break;
 8003090:	e004      	b.n	800309c <USART_SetConfig+0x1a4>
    default:
      ret = HAL_ERROR;
 8003092:	231e      	movs	r3, #30
 8003094:	18fb      	adds	r3, r7, r3
 8003096:	2201      	movs	r2, #1
 8003098:	701a      	strb	r2, [r3, #0]
      break;
 800309a:	46c0      	nop			@ (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	2b0f      	cmp	r3, #15
 80030a0:	d91c      	bls.n	80030dc <USART_SetConfig+0x1e4>
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	2380      	movs	r3, #128	@ 0x80
 80030a6:	025b      	lsls	r3, r3, #9
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d217      	bcs.n	80030dc <USART_SetConfig+0x1e4>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	200e      	movs	r0, #14
 80030b2:	183b      	adds	r3, r7, r0
 80030b4:	210f      	movs	r1, #15
 80030b6:	438a      	bics	r2, r1
 80030b8:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	085b      	lsrs	r3, r3, #1
 80030be:	b29b      	uxth	r3, r3
 80030c0:	2207      	movs	r2, #7
 80030c2:	4013      	ands	r3, r2
 80030c4:	b299      	uxth	r1, r3
 80030c6:	183b      	adds	r3, r7, r0
 80030c8:	183a      	adds	r2, r7, r0
 80030ca:	8812      	ldrh	r2, [r2, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	183a      	adds	r2, r7, r0
 80030d6:	8812      	ldrh	r2, [r2, #0]
 80030d8:	60da      	str	r2, [r3, #12]
 80030da:	e003      	b.n	80030e4 <USART_SetConfig+0x1ec>
  }
  else
  {
    ret = HAL_ERROR;
 80030dc:	231e      	movs	r3, #30
 80030de:	18fb      	adds	r3, r7, r3
 80030e0:	2201      	movs	r2, #1
 80030e2:	701a      	strb	r2, [r3, #0]
  }


  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	639a      	str	r2, [r3, #56]	@ 0x38
  husart->TxISR   = NULL;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	63da      	str	r2, [r3, #60]	@ 0x3c

  return ret;
 80030f0:	231e      	movs	r3, #30
 80030f2:	18fb      	adds	r3, r7, r3
 80030f4:	781b      	ldrb	r3, [r3, #0]
}
 80030f6:	0018      	movs	r0, r3
 80030f8:	46bd      	mov	sp, r7
 80030fa:	b008      	add	sp, #32
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	46c0      	nop			@ (mov r8, r8)
 8003100:	efff69f3 	.word	0xefff69f3
 8003104:	ffffc0ff 	.word	0xffffc0ff
 8003108:	40013800 	.word	0x40013800
 800310c:	40021000 	.word	0x40021000
 8003110:	40004400 	.word	0x40004400
 8003114:	00f42400 	.word	0x00f42400

08003118 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af02      	add	r7, sp, #8
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003126:	f7fe fbdf 	bl	80018e8 <HAL_GetTick>
 800312a:	0003      	movs	r3, r0
 800312c:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2208      	movs	r2, #8
 8003136:	4013      	ands	r3, r2
 8003138:	2b08      	cmp	r3, #8
 800313a:	d10e      	bne.n	800315a <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	2380      	movs	r3, #128	@ 0x80
 8003140:	0399      	lsls	r1, r3, #14
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	23fa      	movs	r3, #250	@ 0xfa
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	0013      	movs	r3, r2
 800314c:	2200      	movs	r2, #0
 800314e:	f7ff fe9d 	bl	8002e8c <USART_WaitOnFlagUntilTimeout>
 8003152:	1e03      	subs	r3, r0, #0
 8003154:	d001      	beq.n	800315a <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e01e      	b.n	8003198 <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2204      	movs	r2, #4
 8003162:	4013      	ands	r3, r2
 8003164:	2b04      	cmp	r3, #4
 8003166:	d10e      	bne.n	8003186 <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	2380      	movs	r3, #128	@ 0x80
 800316c:	03d9      	lsls	r1, r3, #15
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	23fa      	movs	r3, #250	@ 0xfa
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	0013      	movs	r3, r2
 8003178:	2200      	movs	r2, #0
 800317a:	f7ff fe87 	bl	8002e8c <USART_WaitOnFlagUntilTimeout>
 800317e:	1e03      	subs	r3, r0, #0
 8003180:	d001      	beq.n	8003186 <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e008      	b.n	8003198 <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2249      	movs	r2, #73	@ 0x49
 800318a:	2101      	movs	r1, #1
 800318c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2248      	movs	r2, #72	@ 0x48
 8003192:	2100      	movs	r1, #0
 8003194:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	0018      	movs	r0, r3
 800319a:	46bd      	mov	sp, r7
 800319c:	b004      	add	sp, #16
 800319e:	bd80      	pop	{r7, pc}

080031a0 <malloc>:
 80031a0:	b510      	push	{r4, lr}
 80031a2:	4b03      	ldr	r3, [pc, #12]	@ (80031b0 <malloc+0x10>)
 80031a4:	0001      	movs	r1, r0
 80031a6:	6818      	ldr	r0, [r3, #0]
 80031a8:	f000 f826 	bl	80031f8 <_malloc_r>
 80031ac:	bd10      	pop	{r4, pc}
 80031ae:	46c0      	nop			@ (mov r8, r8)
 80031b0:	20000020 	.word	0x20000020

080031b4 <sbrk_aligned>:
 80031b4:	b570      	push	{r4, r5, r6, lr}
 80031b6:	4e0f      	ldr	r6, [pc, #60]	@ (80031f4 <sbrk_aligned+0x40>)
 80031b8:	000d      	movs	r5, r1
 80031ba:	6831      	ldr	r1, [r6, #0]
 80031bc:	0004      	movs	r4, r0
 80031be:	2900      	cmp	r1, #0
 80031c0:	d102      	bne.n	80031c8 <sbrk_aligned+0x14>
 80031c2:	f000 fb0b 	bl	80037dc <_sbrk_r>
 80031c6:	6030      	str	r0, [r6, #0]
 80031c8:	0029      	movs	r1, r5
 80031ca:	0020      	movs	r0, r4
 80031cc:	f000 fb06 	bl	80037dc <_sbrk_r>
 80031d0:	1c43      	adds	r3, r0, #1
 80031d2:	d103      	bne.n	80031dc <sbrk_aligned+0x28>
 80031d4:	2501      	movs	r5, #1
 80031d6:	426d      	negs	r5, r5
 80031d8:	0028      	movs	r0, r5
 80031da:	bd70      	pop	{r4, r5, r6, pc}
 80031dc:	2303      	movs	r3, #3
 80031de:	1cc5      	adds	r5, r0, #3
 80031e0:	439d      	bics	r5, r3
 80031e2:	42a8      	cmp	r0, r5
 80031e4:	d0f8      	beq.n	80031d8 <sbrk_aligned+0x24>
 80031e6:	1a29      	subs	r1, r5, r0
 80031e8:	0020      	movs	r0, r4
 80031ea:	f000 faf7 	bl	80037dc <_sbrk_r>
 80031ee:	3001      	adds	r0, #1
 80031f0:	d1f2      	bne.n	80031d8 <sbrk_aligned+0x24>
 80031f2:	e7ef      	b.n	80031d4 <sbrk_aligned+0x20>
 80031f4:	2000018c 	.word	0x2000018c

080031f8 <_malloc_r>:
 80031f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031fa:	2203      	movs	r2, #3
 80031fc:	1ccb      	adds	r3, r1, #3
 80031fe:	4393      	bics	r3, r2
 8003200:	3308      	adds	r3, #8
 8003202:	0005      	movs	r5, r0
 8003204:	001f      	movs	r7, r3
 8003206:	2b0c      	cmp	r3, #12
 8003208:	d234      	bcs.n	8003274 <_malloc_r+0x7c>
 800320a:	270c      	movs	r7, #12
 800320c:	42b9      	cmp	r1, r7
 800320e:	d833      	bhi.n	8003278 <_malloc_r+0x80>
 8003210:	0028      	movs	r0, r5
 8003212:	f000 f871 	bl	80032f8 <__malloc_lock>
 8003216:	4e37      	ldr	r6, [pc, #220]	@ (80032f4 <_malloc_r+0xfc>)
 8003218:	6833      	ldr	r3, [r6, #0]
 800321a:	001c      	movs	r4, r3
 800321c:	2c00      	cmp	r4, #0
 800321e:	d12f      	bne.n	8003280 <_malloc_r+0x88>
 8003220:	0039      	movs	r1, r7
 8003222:	0028      	movs	r0, r5
 8003224:	f7ff ffc6 	bl	80031b4 <sbrk_aligned>
 8003228:	0004      	movs	r4, r0
 800322a:	1c43      	adds	r3, r0, #1
 800322c:	d15f      	bne.n	80032ee <_malloc_r+0xf6>
 800322e:	6834      	ldr	r4, [r6, #0]
 8003230:	9400      	str	r4, [sp, #0]
 8003232:	9b00      	ldr	r3, [sp, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d14a      	bne.n	80032ce <_malloc_r+0xd6>
 8003238:	2c00      	cmp	r4, #0
 800323a:	d052      	beq.n	80032e2 <_malloc_r+0xea>
 800323c:	6823      	ldr	r3, [r4, #0]
 800323e:	0028      	movs	r0, r5
 8003240:	18e3      	adds	r3, r4, r3
 8003242:	9900      	ldr	r1, [sp, #0]
 8003244:	9301      	str	r3, [sp, #4]
 8003246:	f000 fac9 	bl	80037dc <_sbrk_r>
 800324a:	9b01      	ldr	r3, [sp, #4]
 800324c:	4283      	cmp	r3, r0
 800324e:	d148      	bne.n	80032e2 <_malloc_r+0xea>
 8003250:	6823      	ldr	r3, [r4, #0]
 8003252:	0028      	movs	r0, r5
 8003254:	1aff      	subs	r7, r7, r3
 8003256:	0039      	movs	r1, r7
 8003258:	f7ff ffac 	bl	80031b4 <sbrk_aligned>
 800325c:	3001      	adds	r0, #1
 800325e:	d040      	beq.n	80032e2 <_malloc_r+0xea>
 8003260:	6823      	ldr	r3, [r4, #0]
 8003262:	19db      	adds	r3, r3, r7
 8003264:	6023      	str	r3, [r4, #0]
 8003266:	6833      	ldr	r3, [r6, #0]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	2a00      	cmp	r2, #0
 800326c:	d133      	bne.n	80032d6 <_malloc_r+0xde>
 800326e:	9b00      	ldr	r3, [sp, #0]
 8003270:	6033      	str	r3, [r6, #0]
 8003272:	e019      	b.n	80032a8 <_malloc_r+0xb0>
 8003274:	2b00      	cmp	r3, #0
 8003276:	dac9      	bge.n	800320c <_malloc_r+0x14>
 8003278:	230c      	movs	r3, #12
 800327a:	602b      	str	r3, [r5, #0]
 800327c:	2000      	movs	r0, #0
 800327e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003280:	6821      	ldr	r1, [r4, #0]
 8003282:	1bc9      	subs	r1, r1, r7
 8003284:	d420      	bmi.n	80032c8 <_malloc_r+0xd0>
 8003286:	290b      	cmp	r1, #11
 8003288:	d90a      	bls.n	80032a0 <_malloc_r+0xa8>
 800328a:	19e2      	adds	r2, r4, r7
 800328c:	6027      	str	r7, [r4, #0]
 800328e:	42a3      	cmp	r3, r4
 8003290:	d104      	bne.n	800329c <_malloc_r+0xa4>
 8003292:	6032      	str	r2, [r6, #0]
 8003294:	6863      	ldr	r3, [r4, #4]
 8003296:	6011      	str	r1, [r2, #0]
 8003298:	6053      	str	r3, [r2, #4]
 800329a:	e005      	b.n	80032a8 <_malloc_r+0xb0>
 800329c:	605a      	str	r2, [r3, #4]
 800329e:	e7f9      	b.n	8003294 <_malloc_r+0x9c>
 80032a0:	6862      	ldr	r2, [r4, #4]
 80032a2:	42a3      	cmp	r3, r4
 80032a4:	d10e      	bne.n	80032c4 <_malloc_r+0xcc>
 80032a6:	6032      	str	r2, [r6, #0]
 80032a8:	0028      	movs	r0, r5
 80032aa:	f000 f82d 	bl	8003308 <__malloc_unlock>
 80032ae:	0020      	movs	r0, r4
 80032b0:	2207      	movs	r2, #7
 80032b2:	300b      	adds	r0, #11
 80032b4:	1d23      	adds	r3, r4, #4
 80032b6:	4390      	bics	r0, r2
 80032b8:	1ac2      	subs	r2, r0, r3
 80032ba:	4298      	cmp	r0, r3
 80032bc:	d0df      	beq.n	800327e <_malloc_r+0x86>
 80032be:	1a1b      	subs	r3, r3, r0
 80032c0:	50a3      	str	r3, [r4, r2]
 80032c2:	e7dc      	b.n	800327e <_malloc_r+0x86>
 80032c4:	605a      	str	r2, [r3, #4]
 80032c6:	e7ef      	b.n	80032a8 <_malloc_r+0xb0>
 80032c8:	0023      	movs	r3, r4
 80032ca:	6864      	ldr	r4, [r4, #4]
 80032cc:	e7a6      	b.n	800321c <_malloc_r+0x24>
 80032ce:	9c00      	ldr	r4, [sp, #0]
 80032d0:	6863      	ldr	r3, [r4, #4]
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	e7ad      	b.n	8003232 <_malloc_r+0x3a>
 80032d6:	001a      	movs	r2, r3
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	42a3      	cmp	r3, r4
 80032dc:	d1fb      	bne.n	80032d6 <_malloc_r+0xde>
 80032de:	2300      	movs	r3, #0
 80032e0:	e7da      	b.n	8003298 <_malloc_r+0xa0>
 80032e2:	230c      	movs	r3, #12
 80032e4:	0028      	movs	r0, r5
 80032e6:	602b      	str	r3, [r5, #0]
 80032e8:	f000 f80e 	bl	8003308 <__malloc_unlock>
 80032ec:	e7c6      	b.n	800327c <_malloc_r+0x84>
 80032ee:	6007      	str	r7, [r0, #0]
 80032f0:	e7da      	b.n	80032a8 <_malloc_r+0xb0>
 80032f2:	46c0      	nop			@ (mov r8, r8)
 80032f4:	20000190 	.word	0x20000190

080032f8 <__malloc_lock>:
 80032f8:	b510      	push	{r4, lr}
 80032fa:	4802      	ldr	r0, [pc, #8]	@ (8003304 <__malloc_lock+0xc>)
 80032fc:	f000 fabf 	bl	800387e <__retarget_lock_acquire_recursive>
 8003300:	bd10      	pop	{r4, pc}
 8003302:	46c0      	nop			@ (mov r8, r8)
 8003304:	200002d4 	.word	0x200002d4

08003308 <__malloc_unlock>:
 8003308:	b510      	push	{r4, lr}
 800330a:	4802      	ldr	r0, [pc, #8]	@ (8003314 <__malloc_unlock+0xc>)
 800330c:	f000 fab8 	bl	8003880 <__retarget_lock_release_recursive>
 8003310:	bd10      	pop	{r4, pc}
 8003312:	46c0      	nop			@ (mov r8, r8)
 8003314:	200002d4 	.word	0x200002d4

08003318 <std>:
 8003318:	2300      	movs	r3, #0
 800331a:	b510      	push	{r4, lr}
 800331c:	0004      	movs	r4, r0
 800331e:	6003      	str	r3, [r0, #0]
 8003320:	6043      	str	r3, [r0, #4]
 8003322:	6083      	str	r3, [r0, #8]
 8003324:	8181      	strh	r1, [r0, #12]
 8003326:	6643      	str	r3, [r0, #100]	@ 0x64
 8003328:	81c2      	strh	r2, [r0, #14]
 800332a:	6103      	str	r3, [r0, #16]
 800332c:	6143      	str	r3, [r0, #20]
 800332e:	6183      	str	r3, [r0, #24]
 8003330:	0019      	movs	r1, r3
 8003332:	2208      	movs	r2, #8
 8003334:	305c      	adds	r0, #92	@ 0x5c
 8003336:	f000 fa0f 	bl	8003758 <memset>
 800333a:	4b0b      	ldr	r3, [pc, #44]	@ (8003368 <std+0x50>)
 800333c:	6224      	str	r4, [r4, #32]
 800333e:	6263      	str	r3, [r4, #36]	@ 0x24
 8003340:	4b0a      	ldr	r3, [pc, #40]	@ (800336c <std+0x54>)
 8003342:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003344:	4b0a      	ldr	r3, [pc, #40]	@ (8003370 <std+0x58>)
 8003346:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003348:	4b0a      	ldr	r3, [pc, #40]	@ (8003374 <std+0x5c>)
 800334a:	6323      	str	r3, [r4, #48]	@ 0x30
 800334c:	4b0a      	ldr	r3, [pc, #40]	@ (8003378 <std+0x60>)
 800334e:	429c      	cmp	r4, r3
 8003350:	d005      	beq.n	800335e <std+0x46>
 8003352:	4b0a      	ldr	r3, [pc, #40]	@ (800337c <std+0x64>)
 8003354:	429c      	cmp	r4, r3
 8003356:	d002      	beq.n	800335e <std+0x46>
 8003358:	4b09      	ldr	r3, [pc, #36]	@ (8003380 <std+0x68>)
 800335a:	429c      	cmp	r4, r3
 800335c:	d103      	bne.n	8003366 <std+0x4e>
 800335e:	0020      	movs	r0, r4
 8003360:	3058      	adds	r0, #88	@ 0x58
 8003362:	f000 fa8b 	bl	800387c <__retarget_lock_init_recursive>
 8003366:	bd10      	pop	{r4, pc}
 8003368:	08003581 	.word	0x08003581
 800336c:	080035a9 	.word	0x080035a9
 8003370:	080035e1 	.word	0x080035e1
 8003374:	0800360d 	.word	0x0800360d
 8003378:	20000194 	.word	0x20000194
 800337c:	200001fc 	.word	0x200001fc
 8003380:	20000264 	.word	0x20000264

08003384 <stdio_exit_handler>:
 8003384:	b510      	push	{r4, lr}
 8003386:	4a03      	ldr	r2, [pc, #12]	@ (8003394 <stdio_exit_handler+0x10>)
 8003388:	4903      	ldr	r1, [pc, #12]	@ (8003398 <stdio_exit_handler+0x14>)
 800338a:	4804      	ldr	r0, [pc, #16]	@ (800339c <stdio_exit_handler+0x18>)
 800338c:	f000 f86c 	bl	8003468 <_fwalk_sglue>
 8003390:	bd10      	pop	{r4, pc}
 8003392:	46c0      	nop			@ (mov r8, r8)
 8003394:	20000014 	.word	0x20000014
 8003398:	08003fa9 	.word	0x08003fa9
 800339c:	20000024 	.word	0x20000024

080033a0 <cleanup_stdio>:
 80033a0:	6841      	ldr	r1, [r0, #4]
 80033a2:	4b0b      	ldr	r3, [pc, #44]	@ (80033d0 <cleanup_stdio+0x30>)
 80033a4:	b510      	push	{r4, lr}
 80033a6:	0004      	movs	r4, r0
 80033a8:	4299      	cmp	r1, r3
 80033aa:	d001      	beq.n	80033b0 <cleanup_stdio+0x10>
 80033ac:	f000 fdfc 	bl	8003fa8 <_fflush_r>
 80033b0:	68a1      	ldr	r1, [r4, #8]
 80033b2:	4b08      	ldr	r3, [pc, #32]	@ (80033d4 <cleanup_stdio+0x34>)
 80033b4:	4299      	cmp	r1, r3
 80033b6:	d002      	beq.n	80033be <cleanup_stdio+0x1e>
 80033b8:	0020      	movs	r0, r4
 80033ba:	f000 fdf5 	bl	8003fa8 <_fflush_r>
 80033be:	68e1      	ldr	r1, [r4, #12]
 80033c0:	4b05      	ldr	r3, [pc, #20]	@ (80033d8 <cleanup_stdio+0x38>)
 80033c2:	4299      	cmp	r1, r3
 80033c4:	d002      	beq.n	80033cc <cleanup_stdio+0x2c>
 80033c6:	0020      	movs	r0, r4
 80033c8:	f000 fdee 	bl	8003fa8 <_fflush_r>
 80033cc:	bd10      	pop	{r4, pc}
 80033ce:	46c0      	nop			@ (mov r8, r8)
 80033d0:	20000194 	.word	0x20000194
 80033d4:	200001fc 	.word	0x200001fc
 80033d8:	20000264 	.word	0x20000264

080033dc <global_stdio_init.part.0>:
 80033dc:	b510      	push	{r4, lr}
 80033de:	4b09      	ldr	r3, [pc, #36]	@ (8003404 <global_stdio_init.part.0+0x28>)
 80033e0:	4a09      	ldr	r2, [pc, #36]	@ (8003408 <global_stdio_init.part.0+0x2c>)
 80033e2:	2104      	movs	r1, #4
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	4809      	ldr	r0, [pc, #36]	@ (800340c <global_stdio_init.part.0+0x30>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	f7ff ff95 	bl	8003318 <std>
 80033ee:	2201      	movs	r2, #1
 80033f0:	2109      	movs	r1, #9
 80033f2:	4807      	ldr	r0, [pc, #28]	@ (8003410 <global_stdio_init.part.0+0x34>)
 80033f4:	f7ff ff90 	bl	8003318 <std>
 80033f8:	2202      	movs	r2, #2
 80033fa:	2112      	movs	r1, #18
 80033fc:	4805      	ldr	r0, [pc, #20]	@ (8003414 <global_stdio_init.part.0+0x38>)
 80033fe:	f7ff ff8b 	bl	8003318 <std>
 8003402:	bd10      	pop	{r4, pc}
 8003404:	200002cc 	.word	0x200002cc
 8003408:	08003385 	.word	0x08003385
 800340c:	20000194 	.word	0x20000194
 8003410:	200001fc 	.word	0x200001fc
 8003414:	20000264 	.word	0x20000264

08003418 <__sfp_lock_acquire>:
 8003418:	b510      	push	{r4, lr}
 800341a:	4802      	ldr	r0, [pc, #8]	@ (8003424 <__sfp_lock_acquire+0xc>)
 800341c:	f000 fa2f 	bl	800387e <__retarget_lock_acquire_recursive>
 8003420:	bd10      	pop	{r4, pc}
 8003422:	46c0      	nop			@ (mov r8, r8)
 8003424:	200002d5 	.word	0x200002d5

08003428 <__sfp_lock_release>:
 8003428:	b510      	push	{r4, lr}
 800342a:	4802      	ldr	r0, [pc, #8]	@ (8003434 <__sfp_lock_release+0xc>)
 800342c:	f000 fa28 	bl	8003880 <__retarget_lock_release_recursive>
 8003430:	bd10      	pop	{r4, pc}
 8003432:	46c0      	nop			@ (mov r8, r8)
 8003434:	200002d5 	.word	0x200002d5

08003438 <__sinit>:
 8003438:	b510      	push	{r4, lr}
 800343a:	0004      	movs	r4, r0
 800343c:	f7ff ffec 	bl	8003418 <__sfp_lock_acquire>
 8003440:	6a23      	ldr	r3, [r4, #32]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d002      	beq.n	800344c <__sinit+0x14>
 8003446:	f7ff ffef 	bl	8003428 <__sfp_lock_release>
 800344a:	bd10      	pop	{r4, pc}
 800344c:	4b04      	ldr	r3, [pc, #16]	@ (8003460 <__sinit+0x28>)
 800344e:	6223      	str	r3, [r4, #32]
 8003450:	4b04      	ldr	r3, [pc, #16]	@ (8003464 <__sinit+0x2c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1f6      	bne.n	8003446 <__sinit+0xe>
 8003458:	f7ff ffc0 	bl	80033dc <global_stdio_init.part.0>
 800345c:	e7f3      	b.n	8003446 <__sinit+0xe>
 800345e:	46c0      	nop			@ (mov r8, r8)
 8003460:	080033a1 	.word	0x080033a1
 8003464:	200002cc 	.word	0x200002cc

08003468 <_fwalk_sglue>:
 8003468:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800346a:	0014      	movs	r4, r2
 800346c:	2600      	movs	r6, #0
 800346e:	9000      	str	r0, [sp, #0]
 8003470:	9101      	str	r1, [sp, #4]
 8003472:	68a5      	ldr	r5, [r4, #8]
 8003474:	6867      	ldr	r7, [r4, #4]
 8003476:	3f01      	subs	r7, #1
 8003478:	d504      	bpl.n	8003484 <_fwalk_sglue+0x1c>
 800347a:	6824      	ldr	r4, [r4, #0]
 800347c:	2c00      	cmp	r4, #0
 800347e:	d1f8      	bne.n	8003472 <_fwalk_sglue+0xa>
 8003480:	0030      	movs	r0, r6
 8003482:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003484:	89ab      	ldrh	r3, [r5, #12]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d908      	bls.n	800349c <_fwalk_sglue+0x34>
 800348a:	220e      	movs	r2, #14
 800348c:	5eab      	ldrsh	r3, [r5, r2]
 800348e:	3301      	adds	r3, #1
 8003490:	d004      	beq.n	800349c <_fwalk_sglue+0x34>
 8003492:	0029      	movs	r1, r5
 8003494:	9800      	ldr	r0, [sp, #0]
 8003496:	9b01      	ldr	r3, [sp, #4]
 8003498:	4798      	blx	r3
 800349a:	4306      	orrs	r6, r0
 800349c:	3568      	adds	r5, #104	@ 0x68
 800349e:	e7ea      	b.n	8003476 <_fwalk_sglue+0xe>

080034a0 <iprintf>:
 80034a0:	b40f      	push	{r0, r1, r2, r3}
 80034a2:	b507      	push	{r0, r1, r2, lr}
 80034a4:	4905      	ldr	r1, [pc, #20]	@ (80034bc <iprintf+0x1c>)
 80034a6:	ab04      	add	r3, sp, #16
 80034a8:	6808      	ldr	r0, [r1, #0]
 80034aa:	cb04      	ldmia	r3!, {r2}
 80034ac:	6881      	ldr	r1, [r0, #8]
 80034ae:	9301      	str	r3, [sp, #4]
 80034b0:	f000 fa5a 	bl	8003968 <_vfiprintf_r>
 80034b4:	b003      	add	sp, #12
 80034b6:	bc08      	pop	{r3}
 80034b8:	b004      	add	sp, #16
 80034ba:	4718      	bx	r3
 80034bc:	20000020 	.word	0x20000020

080034c0 <_puts_r>:
 80034c0:	6a03      	ldr	r3, [r0, #32]
 80034c2:	b570      	push	{r4, r5, r6, lr}
 80034c4:	0005      	movs	r5, r0
 80034c6:	000e      	movs	r6, r1
 80034c8:	6884      	ldr	r4, [r0, #8]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <_puts_r+0x12>
 80034ce:	f7ff ffb3 	bl	8003438 <__sinit>
 80034d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80034d4:	07db      	lsls	r3, r3, #31
 80034d6:	d405      	bmi.n	80034e4 <_puts_r+0x24>
 80034d8:	89a3      	ldrh	r3, [r4, #12]
 80034da:	059b      	lsls	r3, r3, #22
 80034dc:	d402      	bmi.n	80034e4 <_puts_r+0x24>
 80034de:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80034e0:	f000 f9cd 	bl	800387e <__retarget_lock_acquire_recursive>
 80034e4:	89a3      	ldrh	r3, [r4, #12]
 80034e6:	071b      	lsls	r3, r3, #28
 80034e8:	d502      	bpl.n	80034f0 <_puts_r+0x30>
 80034ea:	6923      	ldr	r3, [r4, #16]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d11f      	bne.n	8003530 <_puts_r+0x70>
 80034f0:	0021      	movs	r1, r4
 80034f2:	0028      	movs	r0, r5
 80034f4:	f000 f8d2 	bl	800369c <__swsetup_r>
 80034f8:	2800      	cmp	r0, #0
 80034fa:	d019      	beq.n	8003530 <_puts_r+0x70>
 80034fc:	2501      	movs	r5, #1
 80034fe:	426d      	negs	r5, r5
 8003500:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003502:	07db      	lsls	r3, r3, #31
 8003504:	d405      	bmi.n	8003512 <_puts_r+0x52>
 8003506:	89a3      	ldrh	r3, [r4, #12]
 8003508:	059b      	lsls	r3, r3, #22
 800350a:	d402      	bmi.n	8003512 <_puts_r+0x52>
 800350c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800350e:	f000 f9b7 	bl	8003880 <__retarget_lock_release_recursive>
 8003512:	0028      	movs	r0, r5
 8003514:	bd70      	pop	{r4, r5, r6, pc}
 8003516:	3601      	adds	r6, #1
 8003518:	60a3      	str	r3, [r4, #8]
 800351a:	2b00      	cmp	r3, #0
 800351c:	da04      	bge.n	8003528 <_puts_r+0x68>
 800351e:	69a2      	ldr	r2, [r4, #24]
 8003520:	429a      	cmp	r2, r3
 8003522:	dc16      	bgt.n	8003552 <_puts_r+0x92>
 8003524:	290a      	cmp	r1, #10
 8003526:	d014      	beq.n	8003552 <_puts_r+0x92>
 8003528:	6823      	ldr	r3, [r4, #0]
 800352a:	1c5a      	adds	r2, r3, #1
 800352c:	6022      	str	r2, [r4, #0]
 800352e:	7019      	strb	r1, [r3, #0]
 8003530:	68a3      	ldr	r3, [r4, #8]
 8003532:	7831      	ldrb	r1, [r6, #0]
 8003534:	3b01      	subs	r3, #1
 8003536:	2900      	cmp	r1, #0
 8003538:	d1ed      	bne.n	8003516 <_puts_r+0x56>
 800353a:	60a3      	str	r3, [r4, #8]
 800353c:	2b00      	cmp	r3, #0
 800353e:	da0f      	bge.n	8003560 <_puts_r+0xa0>
 8003540:	0022      	movs	r2, r4
 8003542:	0028      	movs	r0, r5
 8003544:	310a      	adds	r1, #10
 8003546:	f000 f867 	bl	8003618 <__swbuf_r>
 800354a:	3001      	adds	r0, #1
 800354c:	d0d6      	beq.n	80034fc <_puts_r+0x3c>
 800354e:	250a      	movs	r5, #10
 8003550:	e7d6      	b.n	8003500 <_puts_r+0x40>
 8003552:	0022      	movs	r2, r4
 8003554:	0028      	movs	r0, r5
 8003556:	f000 f85f 	bl	8003618 <__swbuf_r>
 800355a:	3001      	adds	r0, #1
 800355c:	d1e8      	bne.n	8003530 <_puts_r+0x70>
 800355e:	e7cd      	b.n	80034fc <_puts_r+0x3c>
 8003560:	6823      	ldr	r3, [r4, #0]
 8003562:	1c5a      	adds	r2, r3, #1
 8003564:	6022      	str	r2, [r4, #0]
 8003566:	220a      	movs	r2, #10
 8003568:	701a      	strb	r2, [r3, #0]
 800356a:	e7f0      	b.n	800354e <_puts_r+0x8e>

0800356c <puts>:
 800356c:	b510      	push	{r4, lr}
 800356e:	4b03      	ldr	r3, [pc, #12]	@ (800357c <puts+0x10>)
 8003570:	0001      	movs	r1, r0
 8003572:	6818      	ldr	r0, [r3, #0]
 8003574:	f7ff ffa4 	bl	80034c0 <_puts_r>
 8003578:	bd10      	pop	{r4, pc}
 800357a:	46c0      	nop			@ (mov r8, r8)
 800357c:	20000020 	.word	0x20000020

08003580 <__sread>:
 8003580:	b570      	push	{r4, r5, r6, lr}
 8003582:	000c      	movs	r4, r1
 8003584:	250e      	movs	r5, #14
 8003586:	5f49      	ldrsh	r1, [r1, r5]
 8003588:	f000 f914 	bl	80037b4 <_read_r>
 800358c:	2800      	cmp	r0, #0
 800358e:	db03      	blt.n	8003598 <__sread+0x18>
 8003590:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003592:	181b      	adds	r3, r3, r0
 8003594:	6563      	str	r3, [r4, #84]	@ 0x54
 8003596:	bd70      	pop	{r4, r5, r6, pc}
 8003598:	89a3      	ldrh	r3, [r4, #12]
 800359a:	4a02      	ldr	r2, [pc, #8]	@ (80035a4 <__sread+0x24>)
 800359c:	4013      	ands	r3, r2
 800359e:	81a3      	strh	r3, [r4, #12]
 80035a0:	e7f9      	b.n	8003596 <__sread+0x16>
 80035a2:	46c0      	nop			@ (mov r8, r8)
 80035a4:	ffffefff 	.word	0xffffefff

080035a8 <__swrite>:
 80035a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035aa:	001f      	movs	r7, r3
 80035ac:	898b      	ldrh	r3, [r1, #12]
 80035ae:	0005      	movs	r5, r0
 80035b0:	000c      	movs	r4, r1
 80035b2:	0016      	movs	r6, r2
 80035b4:	05db      	lsls	r3, r3, #23
 80035b6:	d505      	bpl.n	80035c4 <__swrite+0x1c>
 80035b8:	230e      	movs	r3, #14
 80035ba:	5ec9      	ldrsh	r1, [r1, r3]
 80035bc:	2200      	movs	r2, #0
 80035be:	2302      	movs	r3, #2
 80035c0:	f000 f8e4 	bl	800378c <_lseek_r>
 80035c4:	89a3      	ldrh	r3, [r4, #12]
 80035c6:	4a05      	ldr	r2, [pc, #20]	@ (80035dc <__swrite+0x34>)
 80035c8:	0028      	movs	r0, r5
 80035ca:	4013      	ands	r3, r2
 80035cc:	81a3      	strh	r3, [r4, #12]
 80035ce:	0032      	movs	r2, r6
 80035d0:	230e      	movs	r3, #14
 80035d2:	5ee1      	ldrsh	r1, [r4, r3]
 80035d4:	003b      	movs	r3, r7
 80035d6:	f000 f913 	bl	8003800 <_write_r>
 80035da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035dc:	ffffefff 	.word	0xffffefff

080035e0 <__sseek>:
 80035e0:	b570      	push	{r4, r5, r6, lr}
 80035e2:	000c      	movs	r4, r1
 80035e4:	250e      	movs	r5, #14
 80035e6:	5f49      	ldrsh	r1, [r1, r5]
 80035e8:	f000 f8d0 	bl	800378c <_lseek_r>
 80035ec:	89a3      	ldrh	r3, [r4, #12]
 80035ee:	1c42      	adds	r2, r0, #1
 80035f0:	d103      	bne.n	80035fa <__sseek+0x1a>
 80035f2:	4a05      	ldr	r2, [pc, #20]	@ (8003608 <__sseek+0x28>)
 80035f4:	4013      	ands	r3, r2
 80035f6:	81a3      	strh	r3, [r4, #12]
 80035f8:	bd70      	pop	{r4, r5, r6, pc}
 80035fa:	2280      	movs	r2, #128	@ 0x80
 80035fc:	0152      	lsls	r2, r2, #5
 80035fe:	4313      	orrs	r3, r2
 8003600:	81a3      	strh	r3, [r4, #12]
 8003602:	6560      	str	r0, [r4, #84]	@ 0x54
 8003604:	e7f8      	b.n	80035f8 <__sseek+0x18>
 8003606:	46c0      	nop			@ (mov r8, r8)
 8003608:	ffffefff 	.word	0xffffefff

0800360c <__sclose>:
 800360c:	b510      	push	{r4, lr}
 800360e:	230e      	movs	r3, #14
 8003610:	5ec9      	ldrsh	r1, [r1, r3]
 8003612:	f000 f8a9 	bl	8003768 <_close_r>
 8003616:	bd10      	pop	{r4, pc}

08003618 <__swbuf_r>:
 8003618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800361a:	0006      	movs	r6, r0
 800361c:	000d      	movs	r5, r1
 800361e:	0014      	movs	r4, r2
 8003620:	2800      	cmp	r0, #0
 8003622:	d004      	beq.n	800362e <__swbuf_r+0x16>
 8003624:	6a03      	ldr	r3, [r0, #32]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <__swbuf_r+0x16>
 800362a:	f7ff ff05 	bl	8003438 <__sinit>
 800362e:	69a3      	ldr	r3, [r4, #24]
 8003630:	60a3      	str	r3, [r4, #8]
 8003632:	89a3      	ldrh	r3, [r4, #12]
 8003634:	071b      	lsls	r3, r3, #28
 8003636:	d502      	bpl.n	800363e <__swbuf_r+0x26>
 8003638:	6923      	ldr	r3, [r4, #16]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d109      	bne.n	8003652 <__swbuf_r+0x3a>
 800363e:	0021      	movs	r1, r4
 8003640:	0030      	movs	r0, r6
 8003642:	f000 f82b 	bl	800369c <__swsetup_r>
 8003646:	2800      	cmp	r0, #0
 8003648:	d003      	beq.n	8003652 <__swbuf_r+0x3a>
 800364a:	2501      	movs	r5, #1
 800364c:	426d      	negs	r5, r5
 800364e:	0028      	movs	r0, r5
 8003650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003652:	6923      	ldr	r3, [r4, #16]
 8003654:	6820      	ldr	r0, [r4, #0]
 8003656:	b2ef      	uxtb	r7, r5
 8003658:	1ac0      	subs	r0, r0, r3
 800365a:	6963      	ldr	r3, [r4, #20]
 800365c:	b2ed      	uxtb	r5, r5
 800365e:	4283      	cmp	r3, r0
 8003660:	dc05      	bgt.n	800366e <__swbuf_r+0x56>
 8003662:	0021      	movs	r1, r4
 8003664:	0030      	movs	r0, r6
 8003666:	f000 fc9f 	bl	8003fa8 <_fflush_r>
 800366a:	2800      	cmp	r0, #0
 800366c:	d1ed      	bne.n	800364a <__swbuf_r+0x32>
 800366e:	68a3      	ldr	r3, [r4, #8]
 8003670:	3001      	adds	r0, #1
 8003672:	3b01      	subs	r3, #1
 8003674:	60a3      	str	r3, [r4, #8]
 8003676:	6823      	ldr	r3, [r4, #0]
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	6022      	str	r2, [r4, #0]
 800367c:	701f      	strb	r7, [r3, #0]
 800367e:	6963      	ldr	r3, [r4, #20]
 8003680:	4283      	cmp	r3, r0
 8003682:	d004      	beq.n	800368e <__swbuf_r+0x76>
 8003684:	89a3      	ldrh	r3, [r4, #12]
 8003686:	07db      	lsls	r3, r3, #31
 8003688:	d5e1      	bpl.n	800364e <__swbuf_r+0x36>
 800368a:	2d0a      	cmp	r5, #10
 800368c:	d1df      	bne.n	800364e <__swbuf_r+0x36>
 800368e:	0021      	movs	r1, r4
 8003690:	0030      	movs	r0, r6
 8003692:	f000 fc89 	bl	8003fa8 <_fflush_r>
 8003696:	2800      	cmp	r0, #0
 8003698:	d0d9      	beq.n	800364e <__swbuf_r+0x36>
 800369a:	e7d6      	b.n	800364a <__swbuf_r+0x32>

0800369c <__swsetup_r>:
 800369c:	4b2d      	ldr	r3, [pc, #180]	@ (8003754 <__swsetup_r+0xb8>)
 800369e:	b570      	push	{r4, r5, r6, lr}
 80036a0:	0005      	movs	r5, r0
 80036a2:	6818      	ldr	r0, [r3, #0]
 80036a4:	000c      	movs	r4, r1
 80036a6:	2800      	cmp	r0, #0
 80036a8:	d004      	beq.n	80036b4 <__swsetup_r+0x18>
 80036aa:	6a03      	ldr	r3, [r0, #32]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <__swsetup_r+0x18>
 80036b0:	f7ff fec2 	bl	8003438 <__sinit>
 80036b4:	230c      	movs	r3, #12
 80036b6:	5ee2      	ldrsh	r2, [r4, r3]
 80036b8:	0713      	lsls	r3, r2, #28
 80036ba:	d423      	bmi.n	8003704 <__swsetup_r+0x68>
 80036bc:	06d3      	lsls	r3, r2, #27
 80036be:	d407      	bmi.n	80036d0 <__swsetup_r+0x34>
 80036c0:	2309      	movs	r3, #9
 80036c2:	602b      	str	r3, [r5, #0]
 80036c4:	2340      	movs	r3, #64	@ 0x40
 80036c6:	2001      	movs	r0, #1
 80036c8:	4313      	orrs	r3, r2
 80036ca:	81a3      	strh	r3, [r4, #12]
 80036cc:	4240      	negs	r0, r0
 80036ce:	e03a      	b.n	8003746 <__swsetup_r+0xaa>
 80036d0:	0752      	lsls	r2, r2, #29
 80036d2:	d513      	bpl.n	80036fc <__swsetup_r+0x60>
 80036d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80036d6:	2900      	cmp	r1, #0
 80036d8:	d008      	beq.n	80036ec <__swsetup_r+0x50>
 80036da:	0023      	movs	r3, r4
 80036dc:	3344      	adds	r3, #68	@ 0x44
 80036de:	4299      	cmp	r1, r3
 80036e0:	d002      	beq.n	80036e8 <__swsetup_r+0x4c>
 80036e2:	0028      	movs	r0, r5
 80036e4:	f000 f8ce 	bl	8003884 <_free_r>
 80036e8:	2300      	movs	r3, #0
 80036ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80036ec:	2224      	movs	r2, #36	@ 0x24
 80036ee:	89a3      	ldrh	r3, [r4, #12]
 80036f0:	4393      	bics	r3, r2
 80036f2:	81a3      	strh	r3, [r4, #12]
 80036f4:	2300      	movs	r3, #0
 80036f6:	6063      	str	r3, [r4, #4]
 80036f8:	6923      	ldr	r3, [r4, #16]
 80036fa:	6023      	str	r3, [r4, #0]
 80036fc:	2308      	movs	r3, #8
 80036fe:	89a2      	ldrh	r2, [r4, #12]
 8003700:	4313      	orrs	r3, r2
 8003702:	81a3      	strh	r3, [r4, #12]
 8003704:	6923      	ldr	r3, [r4, #16]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10b      	bne.n	8003722 <__swsetup_r+0x86>
 800370a:	21a0      	movs	r1, #160	@ 0xa0
 800370c:	2280      	movs	r2, #128	@ 0x80
 800370e:	89a3      	ldrh	r3, [r4, #12]
 8003710:	0089      	lsls	r1, r1, #2
 8003712:	0092      	lsls	r2, r2, #2
 8003714:	400b      	ands	r3, r1
 8003716:	4293      	cmp	r3, r2
 8003718:	d003      	beq.n	8003722 <__swsetup_r+0x86>
 800371a:	0021      	movs	r1, r4
 800371c:	0028      	movs	r0, r5
 800371e:	f000 fc99 	bl	8004054 <__smakebuf_r>
 8003722:	230c      	movs	r3, #12
 8003724:	5ee2      	ldrsh	r2, [r4, r3]
 8003726:	2101      	movs	r1, #1
 8003728:	0013      	movs	r3, r2
 800372a:	400b      	ands	r3, r1
 800372c:	420a      	tst	r2, r1
 800372e:	d00b      	beq.n	8003748 <__swsetup_r+0xac>
 8003730:	2300      	movs	r3, #0
 8003732:	60a3      	str	r3, [r4, #8]
 8003734:	6963      	ldr	r3, [r4, #20]
 8003736:	425b      	negs	r3, r3
 8003738:	61a3      	str	r3, [r4, #24]
 800373a:	2000      	movs	r0, #0
 800373c:	6923      	ldr	r3, [r4, #16]
 800373e:	4283      	cmp	r3, r0
 8003740:	d101      	bne.n	8003746 <__swsetup_r+0xaa>
 8003742:	0613      	lsls	r3, r2, #24
 8003744:	d4be      	bmi.n	80036c4 <__swsetup_r+0x28>
 8003746:	bd70      	pop	{r4, r5, r6, pc}
 8003748:	0791      	lsls	r1, r2, #30
 800374a:	d400      	bmi.n	800374e <__swsetup_r+0xb2>
 800374c:	6963      	ldr	r3, [r4, #20]
 800374e:	60a3      	str	r3, [r4, #8]
 8003750:	e7f3      	b.n	800373a <__swsetup_r+0x9e>
 8003752:	46c0      	nop			@ (mov r8, r8)
 8003754:	20000020 	.word	0x20000020

08003758 <memset>:
 8003758:	0003      	movs	r3, r0
 800375a:	1882      	adds	r2, r0, r2
 800375c:	4293      	cmp	r3, r2
 800375e:	d100      	bne.n	8003762 <memset+0xa>
 8003760:	4770      	bx	lr
 8003762:	7019      	strb	r1, [r3, #0]
 8003764:	3301      	adds	r3, #1
 8003766:	e7f9      	b.n	800375c <memset+0x4>

08003768 <_close_r>:
 8003768:	2300      	movs	r3, #0
 800376a:	b570      	push	{r4, r5, r6, lr}
 800376c:	4d06      	ldr	r5, [pc, #24]	@ (8003788 <_close_r+0x20>)
 800376e:	0004      	movs	r4, r0
 8003770:	0008      	movs	r0, r1
 8003772:	602b      	str	r3, [r5, #0]
 8003774:	f7fd f854 	bl	8000820 <_close>
 8003778:	1c43      	adds	r3, r0, #1
 800377a:	d103      	bne.n	8003784 <_close_r+0x1c>
 800377c:	682b      	ldr	r3, [r5, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d000      	beq.n	8003784 <_close_r+0x1c>
 8003782:	6023      	str	r3, [r4, #0]
 8003784:	bd70      	pop	{r4, r5, r6, pc}
 8003786:	46c0      	nop			@ (mov r8, r8)
 8003788:	200002d0 	.word	0x200002d0

0800378c <_lseek_r>:
 800378c:	b570      	push	{r4, r5, r6, lr}
 800378e:	0004      	movs	r4, r0
 8003790:	0008      	movs	r0, r1
 8003792:	0011      	movs	r1, r2
 8003794:	001a      	movs	r2, r3
 8003796:	2300      	movs	r3, #0
 8003798:	4d05      	ldr	r5, [pc, #20]	@ (80037b0 <_lseek_r+0x24>)
 800379a:	602b      	str	r3, [r5, #0]
 800379c:	f7fd f861 	bl	8000862 <_lseek>
 80037a0:	1c43      	adds	r3, r0, #1
 80037a2:	d103      	bne.n	80037ac <_lseek_r+0x20>
 80037a4:	682b      	ldr	r3, [r5, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d000      	beq.n	80037ac <_lseek_r+0x20>
 80037aa:	6023      	str	r3, [r4, #0]
 80037ac:	bd70      	pop	{r4, r5, r6, pc}
 80037ae:	46c0      	nop			@ (mov r8, r8)
 80037b0:	200002d0 	.word	0x200002d0

080037b4 <_read_r>:
 80037b4:	b570      	push	{r4, r5, r6, lr}
 80037b6:	0004      	movs	r4, r0
 80037b8:	0008      	movs	r0, r1
 80037ba:	0011      	movs	r1, r2
 80037bc:	001a      	movs	r2, r3
 80037be:	2300      	movs	r3, #0
 80037c0:	4d05      	ldr	r5, [pc, #20]	@ (80037d8 <_read_r+0x24>)
 80037c2:	602b      	str	r3, [r5, #0]
 80037c4:	f7fc fff3 	bl	80007ae <_read>
 80037c8:	1c43      	adds	r3, r0, #1
 80037ca:	d103      	bne.n	80037d4 <_read_r+0x20>
 80037cc:	682b      	ldr	r3, [r5, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d000      	beq.n	80037d4 <_read_r+0x20>
 80037d2:	6023      	str	r3, [r4, #0]
 80037d4:	bd70      	pop	{r4, r5, r6, pc}
 80037d6:	46c0      	nop			@ (mov r8, r8)
 80037d8:	200002d0 	.word	0x200002d0

080037dc <_sbrk_r>:
 80037dc:	2300      	movs	r3, #0
 80037de:	b570      	push	{r4, r5, r6, lr}
 80037e0:	4d06      	ldr	r5, [pc, #24]	@ (80037fc <_sbrk_r+0x20>)
 80037e2:	0004      	movs	r4, r0
 80037e4:	0008      	movs	r0, r1
 80037e6:	602b      	str	r3, [r5, #0]
 80037e8:	f7fd f846 	bl	8000878 <_sbrk>
 80037ec:	1c43      	adds	r3, r0, #1
 80037ee:	d103      	bne.n	80037f8 <_sbrk_r+0x1c>
 80037f0:	682b      	ldr	r3, [r5, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d000      	beq.n	80037f8 <_sbrk_r+0x1c>
 80037f6:	6023      	str	r3, [r4, #0]
 80037f8:	bd70      	pop	{r4, r5, r6, pc}
 80037fa:	46c0      	nop			@ (mov r8, r8)
 80037fc:	200002d0 	.word	0x200002d0

08003800 <_write_r>:
 8003800:	b570      	push	{r4, r5, r6, lr}
 8003802:	0004      	movs	r4, r0
 8003804:	0008      	movs	r0, r1
 8003806:	0011      	movs	r1, r2
 8003808:	001a      	movs	r2, r3
 800380a:	2300      	movs	r3, #0
 800380c:	4d05      	ldr	r5, [pc, #20]	@ (8003824 <_write_r+0x24>)
 800380e:	602b      	str	r3, [r5, #0]
 8003810:	f7fc ffea 	bl	80007e8 <_write>
 8003814:	1c43      	adds	r3, r0, #1
 8003816:	d103      	bne.n	8003820 <_write_r+0x20>
 8003818:	682b      	ldr	r3, [r5, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d000      	beq.n	8003820 <_write_r+0x20>
 800381e:	6023      	str	r3, [r4, #0]
 8003820:	bd70      	pop	{r4, r5, r6, pc}
 8003822:	46c0      	nop			@ (mov r8, r8)
 8003824:	200002d0 	.word	0x200002d0

08003828 <__errno>:
 8003828:	4b01      	ldr	r3, [pc, #4]	@ (8003830 <__errno+0x8>)
 800382a:	6818      	ldr	r0, [r3, #0]
 800382c:	4770      	bx	lr
 800382e:	46c0      	nop			@ (mov r8, r8)
 8003830:	20000020 	.word	0x20000020

08003834 <__libc_init_array>:
 8003834:	b570      	push	{r4, r5, r6, lr}
 8003836:	2600      	movs	r6, #0
 8003838:	4c0c      	ldr	r4, [pc, #48]	@ (800386c <__libc_init_array+0x38>)
 800383a:	4d0d      	ldr	r5, [pc, #52]	@ (8003870 <__libc_init_array+0x3c>)
 800383c:	1b64      	subs	r4, r4, r5
 800383e:	10a4      	asrs	r4, r4, #2
 8003840:	42a6      	cmp	r6, r4
 8003842:	d109      	bne.n	8003858 <__libc_init_array+0x24>
 8003844:	2600      	movs	r6, #0
 8003846:	f000 fc77 	bl	8004138 <_init>
 800384a:	4c0a      	ldr	r4, [pc, #40]	@ (8003874 <__libc_init_array+0x40>)
 800384c:	4d0a      	ldr	r5, [pc, #40]	@ (8003878 <__libc_init_array+0x44>)
 800384e:	1b64      	subs	r4, r4, r5
 8003850:	10a4      	asrs	r4, r4, #2
 8003852:	42a6      	cmp	r6, r4
 8003854:	d105      	bne.n	8003862 <__libc_init_array+0x2e>
 8003856:	bd70      	pop	{r4, r5, r6, pc}
 8003858:	00b3      	lsls	r3, r6, #2
 800385a:	58eb      	ldr	r3, [r5, r3]
 800385c:	4798      	blx	r3
 800385e:	3601      	adds	r6, #1
 8003860:	e7ee      	b.n	8003840 <__libc_init_array+0xc>
 8003862:	00b3      	lsls	r3, r6, #2
 8003864:	58eb      	ldr	r3, [r5, r3]
 8003866:	4798      	blx	r3
 8003868:	3601      	adds	r6, #1
 800386a:	e7f2      	b.n	8003852 <__libc_init_array+0x1e>
 800386c:	080049b8 	.word	0x080049b8
 8003870:	080049b8 	.word	0x080049b8
 8003874:	080049bc 	.word	0x080049bc
 8003878:	080049b8 	.word	0x080049b8

0800387c <__retarget_lock_init_recursive>:
 800387c:	4770      	bx	lr

0800387e <__retarget_lock_acquire_recursive>:
 800387e:	4770      	bx	lr

08003880 <__retarget_lock_release_recursive>:
 8003880:	4770      	bx	lr
	...

08003884 <_free_r>:
 8003884:	b570      	push	{r4, r5, r6, lr}
 8003886:	0005      	movs	r5, r0
 8003888:	1e0c      	subs	r4, r1, #0
 800388a:	d010      	beq.n	80038ae <_free_r+0x2a>
 800388c:	3c04      	subs	r4, #4
 800388e:	6823      	ldr	r3, [r4, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	da00      	bge.n	8003896 <_free_r+0x12>
 8003894:	18e4      	adds	r4, r4, r3
 8003896:	0028      	movs	r0, r5
 8003898:	f7ff fd2e 	bl	80032f8 <__malloc_lock>
 800389c:	4a1d      	ldr	r2, [pc, #116]	@ (8003914 <_free_r+0x90>)
 800389e:	6813      	ldr	r3, [r2, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d105      	bne.n	80038b0 <_free_r+0x2c>
 80038a4:	6063      	str	r3, [r4, #4]
 80038a6:	6014      	str	r4, [r2, #0]
 80038a8:	0028      	movs	r0, r5
 80038aa:	f7ff fd2d 	bl	8003308 <__malloc_unlock>
 80038ae:	bd70      	pop	{r4, r5, r6, pc}
 80038b0:	42a3      	cmp	r3, r4
 80038b2:	d908      	bls.n	80038c6 <_free_r+0x42>
 80038b4:	6820      	ldr	r0, [r4, #0]
 80038b6:	1821      	adds	r1, r4, r0
 80038b8:	428b      	cmp	r3, r1
 80038ba:	d1f3      	bne.n	80038a4 <_free_r+0x20>
 80038bc:	6819      	ldr	r1, [r3, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	1809      	adds	r1, r1, r0
 80038c2:	6021      	str	r1, [r4, #0]
 80038c4:	e7ee      	b.n	80038a4 <_free_r+0x20>
 80038c6:	001a      	movs	r2, r3
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <_free_r+0x4e>
 80038ce:	42a3      	cmp	r3, r4
 80038d0:	d9f9      	bls.n	80038c6 <_free_r+0x42>
 80038d2:	6811      	ldr	r1, [r2, #0]
 80038d4:	1850      	adds	r0, r2, r1
 80038d6:	42a0      	cmp	r0, r4
 80038d8:	d10b      	bne.n	80038f2 <_free_r+0x6e>
 80038da:	6820      	ldr	r0, [r4, #0]
 80038dc:	1809      	adds	r1, r1, r0
 80038de:	1850      	adds	r0, r2, r1
 80038e0:	6011      	str	r1, [r2, #0]
 80038e2:	4283      	cmp	r3, r0
 80038e4:	d1e0      	bne.n	80038a8 <_free_r+0x24>
 80038e6:	6818      	ldr	r0, [r3, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	1841      	adds	r1, r0, r1
 80038ec:	6011      	str	r1, [r2, #0]
 80038ee:	6053      	str	r3, [r2, #4]
 80038f0:	e7da      	b.n	80038a8 <_free_r+0x24>
 80038f2:	42a0      	cmp	r0, r4
 80038f4:	d902      	bls.n	80038fc <_free_r+0x78>
 80038f6:	230c      	movs	r3, #12
 80038f8:	602b      	str	r3, [r5, #0]
 80038fa:	e7d5      	b.n	80038a8 <_free_r+0x24>
 80038fc:	6820      	ldr	r0, [r4, #0]
 80038fe:	1821      	adds	r1, r4, r0
 8003900:	428b      	cmp	r3, r1
 8003902:	d103      	bne.n	800390c <_free_r+0x88>
 8003904:	6819      	ldr	r1, [r3, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	1809      	adds	r1, r1, r0
 800390a:	6021      	str	r1, [r4, #0]
 800390c:	6063      	str	r3, [r4, #4]
 800390e:	6054      	str	r4, [r2, #4]
 8003910:	e7ca      	b.n	80038a8 <_free_r+0x24>
 8003912:	46c0      	nop			@ (mov r8, r8)
 8003914:	20000190 	.word	0x20000190

08003918 <__sfputc_r>:
 8003918:	6893      	ldr	r3, [r2, #8]
 800391a:	b510      	push	{r4, lr}
 800391c:	3b01      	subs	r3, #1
 800391e:	6093      	str	r3, [r2, #8]
 8003920:	2b00      	cmp	r3, #0
 8003922:	da04      	bge.n	800392e <__sfputc_r+0x16>
 8003924:	6994      	ldr	r4, [r2, #24]
 8003926:	42a3      	cmp	r3, r4
 8003928:	db07      	blt.n	800393a <__sfputc_r+0x22>
 800392a:	290a      	cmp	r1, #10
 800392c:	d005      	beq.n	800393a <__sfputc_r+0x22>
 800392e:	6813      	ldr	r3, [r2, #0]
 8003930:	1c58      	adds	r0, r3, #1
 8003932:	6010      	str	r0, [r2, #0]
 8003934:	7019      	strb	r1, [r3, #0]
 8003936:	0008      	movs	r0, r1
 8003938:	bd10      	pop	{r4, pc}
 800393a:	f7ff fe6d 	bl	8003618 <__swbuf_r>
 800393e:	0001      	movs	r1, r0
 8003940:	e7f9      	b.n	8003936 <__sfputc_r+0x1e>

08003942 <__sfputs_r>:
 8003942:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003944:	0006      	movs	r6, r0
 8003946:	000f      	movs	r7, r1
 8003948:	0014      	movs	r4, r2
 800394a:	18d5      	adds	r5, r2, r3
 800394c:	42ac      	cmp	r4, r5
 800394e:	d101      	bne.n	8003954 <__sfputs_r+0x12>
 8003950:	2000      	movs	r0, #0
 8003952:	e007      	b.n	8003964 <__sfputs_r+0x22>
 8003954:	7821      	ldrb	r1, [r4, #0]
 8003956:	003a      	movs	r2, r7
 8003958:	0030      	movs	r0, r6
 800395a:	f7ff ffdd 	bl	8003918 <__sfputc_r>
 800395e:	3401      	adds	r4, #1
 8003960:	1c43      	adds	r3, r0, #1
 8003962:	d1f3      	bne.n	800394c <__sfputs_r+0xa>
 8003964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003968 <_vfiprintf_r>:
 8003968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800396a:	b0a1      	sub	sp, #132	@ 0x84
 800396c:	000f      	movs	r7, r1
 800396e:	0015      	movs	r5, r2
 8003970:	001e      	movs	r6, r3
 8003972:	9003      	str	r0, [sp, #12]
 8003974:	2800      	cmp	r0, #0
 8003976:	d004      	beq.n	8003982 <_vfiprintf_r+0x1a>
 8003978:	6a03      	ldr	r3, [r0, #32]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <_vfiprintf_r+0x1a>
 800397e:	f7ff fd5b 	bl	8003438 <__sinit>
 8003982:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003984:	07db      	lsls	r3, r3, #31
 8003986:	d405      	bmi.n	8003994 <_vfiprintf_r+0x2c>
 8003988:	89bb      	ldrh	r3, [r7, #12]
 800398a:	059b      	lsls	r3, r3, #22
 800398c:	d402      	bmi.n	8003994 <_vfiprintf_r+0x2c>
 800398e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003990:	f7ff ff75 	bl	800387e <__retarget_lock_acquire_recursive>
 8003994:	89bb      	ldrh	r3, [r7, #12]
 8003996:	071b      	lsls	r3, r3, #28
 8003998:	d502      	bpl.n	80039a0 <_vfiprintf_r+0x38>
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d113      	bne.n	80039c8 <_vfiprintf_r+0x60>
 80039a0:	0039      	movs	r1, r7
 80039a2:	9803      	ldr	r0, [sp, #12]
 80039a4:	f7ff fe7a 	bl	800369c <__swsetup_r>
 80039a8:	2800      	cmp	r0, #0
 80039aa:	d00d      	beq.n	80039c8 <_vfiprintf_r+0x60>
 80039ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039ae:	07db      	lsls	r3, r3, #31
 80039b0:	d503      	bpl.n	80039ba <_vfiprintf_r+0x52>
 80039b2:	2001      	movs	r0, #1
 80039b4:	4240      	negs	r0, r0
 80039b6:	b021      	add	sp, #132	@ 0x84
 80039b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039ba:	89bb      	ldrh	r3, [r7, #12]
 80039bc:	059b      	lsls	r3, r3, #22
 80039be:	d4f8      	bmi.n	80039b2 <_vfiprintf_r+0x4a>
 80039c0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80039c2:	f7ff ff5d 	bl	8003880 <__retarget_lock_release_recursive>
 80039c6:	e7f4      	b.n	80039b2 <_vfiprintf_r+0x4a>
 80039c8:	2300      	movs	r3, #0
 80039ca:	ac08      	add	r4, sp, #32
 80039cc:	6163      	str	r3, [r4, #20]
 80039ce:	3320      	adds	r3, #32
 80039d0:	7663      	strb	r3, [r4, #25]
 80039d2:	3310      	adds	r3, #16
 80039d4:	76a3      	strb	r3, [r4, #26]
 80039d6:	9607      	str	r6, [sp, #28]
 80039d8:	002e      	movs	r6, r5
 80039da:	7833      	ldrb	r3, [r6, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <_vfiprintf_r+0x7c>
 80039e0:	2b25      	cmp	r3, #37	@ 0x25
 80039e2:	d148      	bne.n	8003a76 <_vfiprintf_r+0x10e>
 80039e4:	1b73      	subs	r3, r6, r5
 80039e6:	9305      	str	r3, [sp, #20]
 80039e8:	42ae      	cmp	r6, r5
 80039ea:	d00b      	beq.n	8003a04 <_vfiprintf_r+0x9c>
 80039ec:	002a      	movs	r2, r5
 80039ee:	0039      	movs	r1, r7
 80039f0:	9803      	ldr	r0, [sp, #12]
 80039f2:	f7ff ffa6 	bl	8003942 <__sfputs_r>
 80039f6:	3001      	adds	r0, #1
 80039f8:	d100      	bne.n	80039fc <_vfiprintf_r+0x94>
 80039fa:	e0ae      	b.n	8003b5a <_vfiprintf_r+0x1f2>
 80039fc:	6963      	ldr	r3, [r4, #20]
 80039fe:	9a05      	ldr	r2, [sp, #20]
 8003a00:	189b      	adds	r3, r3, r2
 8003a02:	6163      	str	r3, [r4, #20]
 8003a04:	7833      	ldrb	r3, [r6, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d100      	bne.n	8003a0c <_vfiprintf_r+0xa4>
 8003a0a:	e0a6      	b.n	8003b5a <_vfiprintf_r+0x1f2>
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	2300      	movs	r3, #0
 8003a10:	4252      	negs	r2, r2
 8003a12:	6062      	str	r2, [r4, #4]
 8003a14:	a904      	add	r1, sp, #16
 8003a16:	3254      	adds	r2, #84	@ 0x54
 8003a18:	1852      	adds	r2, r2, r1
 8003a1a:	1c75      	adds	r5, r6, #1
 8003a1c:	6023      	str	r3, [r4, #0]
 8003a1e:	60e3      	str	r3, [r4, #12]
 8003a20:	60a3      	str	r3, [r4, #8]
 8003a22:	7013      	strb	r3, [r2, #0]
 8003a24:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003a26:	4b59      	ldr	r3, [pc, #356]	@ (8003b8c <_vfiprintf_r+0x224>)
 8003a28:	2205      	movs	r2, #5
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	7829      	ldrb	r1, [r5, #0]
 8003a2e:	9305      	str	r3, [sp, #20]
 8003a30:	f000 fb76 	bl	8004120 <memchr>
 8003a34:	1c6e      	adds	r6, r5, #1
 8003a36:	2800      	cmp	r0, #0
 8003a38:	d11f      	bne.n	8003a7a <_vfiprintf_r+0x112>
 8003a3a:	6822      	ldr	r2, [r4, #0]
 8003a3c:	06d3      	lsls	r3, r2, #27
 8003a3e:	d504      	bpl.n	8003a4a <_vfiprintf_r+0xe2>
 8003a40:	2353      	movs	r3, #83	@ 0x53
 8003a42:	a904      	add	r1, sp, #16
 8003a44:	185b      	adds	r3, r3, r1
 8003a46:	2120      	movs	r1, #32
 8003a48:	7019      	strb	r1, [r3, #0]
 8003a4a:	0713      	lsls	r3, r2, #28
 8003a4c:	d504      	bpl.n	8003a58 <_vfiprintf_r+0xf0>
 8003a4e:	2353      	movs	r3, #83	@ 0x53
 8003a50:	a904      	add	r1, sp, #16
 8003a52:	185b      	adds	r3, r3, r1
 8003a54:	212b      	movs	r1, #43	@ 0x2b
 8003a56:	7019      	strb	r1, [r3, #0]
 8003a58:	782b      	ldrb	r3, [r5, #0]
 8003a5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a5c:	d016      	beq.n	8003a8c <_vfiprintf_r+0x124>
 8003a5e:	002e      	movs	r6, r5
 8003a60:	2100      	movs	r1, #0
 8003a62:	200a      	movs	r0, #10
 8003a64:	68e3      	ldr	r3, [r4, #12]
 8003a66:	7832      	ldrb	r2, [r6, #0]
 8003a68:	1c75      	adds	r5, r6, #1
 8003a6a:	3a30      	subs	r2, #48	@ 0x30
 8003a6c:	2a09      	cmp	r2, #9
 8003a6e:	d950      	bls.n	8003b12 <_vfiprintf_r+0x1aa>
 8003a70:	2900      	cmp	r1, #0
 8003a72:	d111      	bne.n	8003a98 <_vfiprintf_r+0x130>
 8003a74:	e017      	b.n	8003aa6 <_vfiprintf_r+0x13e>
 8003a76:	3601      	adds	r6, #1
 8003a78:	e7af      	b.n	80039da <_vfiprintf_r+0x72>
 8003a7a:	9b05      	ldr	r3, [sp, #20]
 8003a7c:	6822      	ldr	r2, [r4, #0]
 8003a7e:	1ac0      	subs	r0, r0, r3
 8003a80:	2301      	movs	r3, #1
 8003a82:	4083      	lsls	r3, r0
 8003a84:	4313      	orrs	r3, r2
 8003a86:	0035      	movs	r5, r6
 8003a88:	6023      	str	r3, [r4, #0]
 8003a8a:	e7cc      	b.n	8003a26 <_vfiprintf_r+0xbe>
 8003a8c:	9b07      	ldr	r3, [sp, #28]
 8003a8e:	1d19      	adds	r1, r3, #4
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	9107      	str	r1, [sp, #28]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	db01      	blt.n	8003a9c <_vfiprintf_r+0x134>
 8003a98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003a9a:	e004      	b.n	8003aa6 <_vfiprintf_r+0x13e>
 8003a9c:	425b      	negs	r3, r3
 8003a9e:	60e3      	str	r3, [r4, #12]
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	6023      	str	r3, [r4, #0]
 8003aa6:	7833      	ldrb	r3, [r6, #0]
 8003aa8:	2b2e      	cmp	r3, #46	@ 0x2e
 8003aaa:	d10c      	bne.n	8003ac6 <_vfiprintf_r+0x15e>
 8003aac:	7873      	ldrb	r3, [r6, #1]
 8003aae:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ab0:	d134      	bne.n	8003b1c <_vfiprintf_r+0x1b4>
 8003ab2:	9b07      	ldr	r3, [sp, #28]
 8003ab4:	3602      	adds	r6, #2
 8003ab6:	1d1a      	adds	r2, r3, #4
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	9207      	str	r2, [sp, #28]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	da01      	bge.n	8003ac4 <_vfiprintf_r+0x15c>
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	425b      	negs	r3, r3
 8003ac4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ac6:	4d32      	ldr	r5, [pc, #200]	@ (8003b90 <_vfiprintf_r+0x228>)
 8003ac8:	2203      	movs	r2, #3
 8003aca:	0028      	movs	r0, r5
 8003acc:	7831      	ldrb	r1, [r6, #0]
 8003ace:	f000 fb27 	bl	8004120 <memchr>
 8003ad2:	2800      	cmp	r0, #0
 8003ad4:	d006      	beq.n	8003ae4 <_vfiprintf_r+0x17c>
 8003ad6:	2340      	movs	r3, #64	@ 0x40
 8003ad8:	1b40      	subs	r0, r0, r5
 8003ada:	4083      	lsls	r3, r0
 8003adc:	6822      	ldr	r2, [r4, #0]
 8003ade:	3601      	adds	r6, #1
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	6023      	str	r3, [r4, #0]
 8003ae4:	7831      	ldrb	r1, [r6, #0]
 8003ae6:	2206      	movs	r2, #6
 8003ae8:	482a      	ldr	r0, [pc, #168]	@ (8003b94 <_vfiprintf_r+0x22c>)
 8003aea:	1c75      	adds	r5, r6, #1
 8003aec:	7621      	strb	r1, [r4, #24]
 8003aee:	f000 fb17 	bl	8004120 <memchr>
 8003af2:	2800      	cmp	r0, #0
 8003af4:	d040      	beq.n	8003b78 <_vfiprintf_r+0x210>
 8003af6:	4b28      	ldr	r3, [pc, #160]	@ (8003b98 <_vfiprintf_r+0x230>)
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d122      	bne.n	8003b42 <_vfiprintf_r+0x1da>
 8003afc:	2207      	movs	r2, #7
 8003afe:	9b07      	ldr	r3, [sp, #28]
 8003b00:	3307      	adds	r3, #7
 8003b02:	4393      	bics	r3, r2
 8003b04:	3308      	adds	r3, #8
 8003b06:	9307      	str	r3, [sp, #28]
 8003b08:	6963      	ldr	r3, [r4, #20]
 8003b0a:	9a04      	ldr	r2, [sp, #16]
 8003b0c:	189b      	adds	r3, r3, r2
 8003b0e:	6163      	str	r3, [r4, #20]
 8003b10:	e762      	b.n	80039d8 <_vfiprintf_r+0x70>
 8003b12:	4343      	muls	r3, r0
 8003b14:	002e      	movs	r6, r5
 8003b16:	2101      	movs	r1, #1
 8003b18:	189b      	adds	r3, r3, r2
 8003b1a:	e7a4      	b.n	8003a66 <_vfiprintf_r+0xfe>
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	200a      	movs	r0, #10
 8003b20:	0019      	movs	r1, r3
 8003b22:	3601      	adds	r6, #1
 8003b24:	6063      	str	r3, [r4, #4]
 8003b26:	7832      	ldrb	r2, [r6, #0]
 8003b28:	1c75      	adds	r5, r6, #1
 8003b2a:	3a30      	subs	r2, #48	@ 0x30
 8003b2c:	2a09      	cmp	r2, #9
 8003b2e:	d903      	bls.n	8003b38 <_vfiprintf_r+0x1d0>
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0c8      	beq.n	8003ac6 <_vfiprintf_r+0x15e>
 8003b34:	9109      	str	r1, [sp, #36]	@ 0x24
 8003b36:	e7c6      	b.n	8003ac6 <_vfiprintf_r+0x15e>
 8003b38:	4341      	muls	r1, r0
 8003b3a:	002e      	movs	r6, r5
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	1889      	adds	r1, r1, r2
 8003b40:	e7f1      	b.n	8003b26 <_vfiprintf_r+0x1be>
 8003b42:	aa07      	add	r2, sp, #28
 8003b44:	9200      	str	r2, [sp, #0]
 8003b46:	0021      	movs	r1, r4
 8003b48:	003a      	movs	r2, r7
 8003b4a:	4b14      	ldr	r3, [pc, #80]	@ (8003b9c <_vfiprintf_r+0x234>)
 8003b4c:	9803      	ldr	r0, [sp, #12]
 8003b4e:	e000      	b.n	8003b52 <_vfiprintf_r+0x1ea>
 8003b50:	bf00      	nop
 8003b52:	9004      	str	r0, [sp, #16]
 8003b54:	9b04      	ldr	r3, [sp, #16]
 8003b56:	3301      	adds	r3, #1
 8003b58:	d1d6      	bne.n	8003b08 <_vfiprintf_r+0x1a0>
 8003b5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b5c:	07db      	lsls	r3, r3, #31
 8003b5e:	d405      	bmi.n	8003b6c <_vfiprintf_r+0x204>
 8003b60:	89bb      	ldrh	r3, [r7, #12]
 8003b62:	059b      	lsls	r3, r3, #22
 8003b64:	d402      	bmi.n	8003b6c <_vfiprintf_r+0x204>
 8003b66:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003b68:	f7ff fe8a 	bl	8003880 <__retarget_lock_release_recursive>
 8003b6c:	89bb      	ldrh	r3, [r7, #12]
 8003b6e:	065b      	lsls	r3, r3, #25
 8003b70:	d500      	bpl.n	8003b74 <_vfiprintf_r+0x20c>
 8003b72:	e71e      	b.n	80039b2 <_vfiprintf_r+0x4a>
 8003b74:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003b76:	e71e      	b.n	80039b6 <_vfiprintf_r+0x4e>
 8003b78:	aa07      	add	r2, sp, #28
 8003b7a:	9200      	str	r2, [sp, #0]
 8003b7c:	0021      	movs	r1, r4
 8003b7e:	003a      	movs	r2, r7
 8003b80:	4b06      	ldr	r3, [pc, #24]	@ (8003b9c <_vfiprintf_r+0x234>)
 8003b82:	9803      	ldr	r0, [sp, #12]
 8003b84:	f000 f87c 	bl	8003c80 <_printf_i>
 8003b88:	e7e3      	b.n	8003b52 <_vfiprintf_r+0x1ea>
 8003b8a:	46c0      	nop			@ (mov r8, r8)
 8003b8c:	08004984 	.word	0x08004984
 8003b90:	0800498a 	.word	0x0800498a
 8003b94:	0800498e 	.word	0x0800498e
 8003b98:	00000000 	.word	0x00000000
 8003b9c:	08003943 	.word	0x08003943

08003ba0 <_printf_common>:
 8003ba0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ba2:	0016      	movs	r6, r2
 8003ba4:	9301      	str	r3, [sp, #4]
 8003ba6:	688a      	ldr	r2, [r1, #8]
 8003ba8:	690b      	ldr	r3, [r1, #16]
 8003baa:	000c      	movs	r4, r1
 8003bac:	9000      	str	r0, [sp, #0]
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	da00      	bge.n	8003bb4 <_printf_common+0x14>
 8003bb2:	0013      	movs	r3, r2
 8003bb4:	0022      	movs	r2, r4
 8003bb6:	6033      	str	r3, [r6, #0]
 8003bb8:	3243      	adds	r2, #67	@ 0x43
 8003bba:	7812      	ldrb	r2, [r2, #0]
 8003bbc:	2a00      	cmp	r2, #0
 8003bbe:	d001      	beq.n	8003bc4 <_printf_common+0x24>
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	6033      	str	r3, [r6, #0]
 8003bc4:	6823      	ldr	r3, [r4, #0]
 8003bc6:	069b      	lsls	r3, r3, #26
 8003bc8:	d502      	bpl.n	8003bd0 <_printf_common+0x30>
 8003bca:	6833      	ldr	r3, [r6, #0]
 8003bcc:	3302      	adds	r3, #2
 8003bce:	6033      	str	r3, [r6, #0]
 8003bd0:	6822      	ldr	r2, [r4, #0]
 8003bd2:	2306      	movs	r3, #6
 8003bd4:	0015      	movs	r5, r2
 8003bd6:	401d      	ands	r5, r3
 8003bd8:	421a      	tst	r2, r3
 8003bda:	d027      	beq.n	8003c2c <_printf_common+0x8c>
 8003bdc:	0023      	movs	r3, r4
 8003bde:	3343      	adds	r3, #67	@ 0x43
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	1e5a      	subs	r2, r3, #1
 8003be4:	4193      	sbcs	r3, r2
 8003be6:	6822      	ldr	r2, [r4, #0]
 8003be8:	0692      	lsls	r2, r2, #26
 8003bea:	d430      	bmi.n	8003c4e <_printf_common+0xae>
 8003bec:	0022      	movs	r2, r4
 8003bee:	9901      	ldr	r1, [sp, #4]
 8003bf0:	9800      	ldr	r0, [sp, #0]
 8003bf2:	9d08      	ldr	r5, [sp, #32]
 8003bf4:	3243      	adds	r2, #67	@ 0x43
 8003bf6:	47a8      	blx	r5
 8003bf8:	3001      	adds	r0, #1
 8003bfa:	d025      	beq.n	8003c48 <_printf_common+0xa8>
 8003bfc:	2206      	movs	r2, #6
 8003bfe:	6823      	ldr	r3, [r4, #0]
 8003c00:	2500      	movs	r5, #0
 8003c02:	4013      	ands	r3, r2
 8003c04:	2b04      	cmp	r3, #4
 8003c06:	d105      	bne.n	8003c14 <_printf_common+0x74>
 8003c08:	6833      	ldr	r3, [r6, #0]
 8003c0a:	68e5      	ldr	r5, [r4, #12]
 8003c0c:	1aed      	subs	r5, r5, r3
 8003c0e:	43eb      	mvns	r3, r5
 8003c10:	17db      	asrs	r3, r3, #31
 8003c12:	401d      	ands	r5, r3
 8003c14:	68a3      	ldr	r3, [r4, #8]
 8003c16:	6922      	ldr	r2, [r4, #16]
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	dd01      	ble.n	8003c20 <_printf_common+0x80>
 8003c1c:	1a9b      	subs	r3, r3, r2
 8003c1e:	18ed      	adds	r5, r5, r3
 8003c20:	2600      	movs	r6, #0
 8003c22:	42b5      	cmp	r5, r6
 8003c24:	d120      	bne.n	8003c68 <_printf_common+0xc8>
 8003c26:	2000      	movs	r0, #0
 8003c28:	e010      	b.n	8003c4c <_printf_common+0xac>
 8003c2a:	3501      	adds	r5, #1
 8003c2c:	68e3      	ldr	r3, [r4, #12]
 8003c2e:	6832      	ldr	r2, [r6, #0]
 8003c30:	1a9b      	subs	r3, r3, r2
 8003c32:	42ab      	cmp	r3, r5
 8003c34:	ddd2      	ble.n	8003bdc <_printf_common+0x3c>
 8003c36:	0022      	movs	r2, r4
 8003c38:	2301      	movs	r3, #1
 8003c3a:	9901      	ldr	r1, [sp, #4]
 8003c3c:	9800      	ldr	r0, [sp, #0]
 8003c3e:	9f08      	ldr	r7, [sp, #32]
 8003c40:	3219      	adds	r2, #25
 8003c42:	47b8      	blx	r7
 8003c44:	3001      	adds	r0, #1
 8003c46:	d1f0      	bne.n	8003c2a <_printf_common+0x8a>
 8003c48:	2001      	movs	r0, #1
 8003c4a:	4240      	negs	r0, r0
 8003c4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003c4e:	2030      	movs	r0, #48	@ 0x30
 8003c50:	18e1      	adds	r1, r4, r3
 8003c52:	3143      	adds	r1, #67	@ 0x43
 8003c54:	7008      	strb	r0, [r1, #0]
 8003c56:	0021      	movs	r1, r4
 8003c58:	1c5a      	adds	r2, r3, #1
 8003c5a:	3145      	adds	r1, #69	@ 0x45
 8003c5c:	7809      	ldrb	r1, [r1, #0]
 8003c5e:	18a2      	adds	r2, r4, r2
 8003c60:	3243      	adds	r2, #67	@ 0x43
 8003c62:	3302      	adds	r3, #2
 8003c64:	7011      	strb	r1, [r2, #0]
 8003c66:	e7c1      	b.n	8003bec <_printf_common+0x4c>
 8003c68:	0022      	movs	r2, r4
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	9901      	ldr	r1, [sp, #4]
 8003c6e:	9800      	ldr	r0, [sp, #0]
 8003c70:	9f08      	ldr	r7, [sp, #32]
 8003c72:	321a      	adds	r2, #26
 8003c74:	47b8      	blx	r7
 8003c76:	3001      	adds	r0, #1
 8003c78:	d0e6      	beq.n	8003c48 <_printf_common+0xa8>
 8003c7a:	3601      	adds	r6, #1
 8003c7c:	e7d1      	b.n	8003c22 <_printf_common+0x82>
	...

08003c80 <_printf_i>:
 8003c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c82:	b08b      	sub	sp, #44	@ 0x2c
 8003c84:	9206      	str	r2, [sp, #24]
 8003c86:	000a      	movs	r2, r1
 8003c88:	3243      	adds	r2, #67	@ 0x43
 8003c8a:	9307      	str	r3, [sp, #28]
 8003c8c:	9005      	str	r0, [sp, #20]
 8003c8e:	9203      	str	r2, [sp, #12]
 8003c90:	7e0a      	ldrb	r2, [r1, #24]
 8003c92:	000c      	movs	r4, r1
 8003c94:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003c96:	2a78      	cmp	r2, #120	@ 0x78
 8003c98:	d809      	bhi.n	8003cae <_printf_i+0x2e>
 8003c9a:	2a62      	cmp	r2, #98	@ 0x62
 8003c9c:	d80b      	bhi.n	8003cb6 <_printf_i+0x36>
 8003c9e:	2a00      	cmp	r2, #0
 8003ca0:	d100      	bne.n	8003ca4 <_printf_i+0x24>
 8003ca2:	e0bc      	b.n	8003e1e <_printf_i+0x19e>
 8003ca4:	497b      	ldr	r1, [pc, #492]	@ (8003e94 <_printf_i+0x214>)
 8003ca6:	9104      	str	r1, [sp, #16]
 8003ca8:	2a58      	cmp	r2, #88	@ 0x58
 8003caa:	d100      	bne.n	8003cae <_printf_i+0x2e>
 8003cac:	e090      	b.n	8003dd0 <_printf_i+0x150>
 8003cae:	0025      	movs	r5, r4
 8003cb0:	3542      	adds	r5, #66	@ 0x42
 8003cb2:	702a      	strb	r2, [r5, #0]
 8003cb4:	e022      	b.n	8003cfc <_printf_i+0x7c>
 8003cb6:	0010      	movs	r0, r2
 8003cb8:	3863      	subs	r0, #99	@ 0x63
 8003cba:	2815      	cmp	r0, #21
 8003cbc:	d8f7      	bhi.n	8003cae <_printf_i+0x2e>
 8003cbe:	f7fc fa23 	bl	8000108 <__gnu_thumb1_case_shi>
 8003cc2:	0016      	.short	0x0016
 8003cc4:	fff6001f 	.word	0xfff6001f
 8003cc8:	fff6fff6 	.word	0xfff6fff6
 8003ccc:	001ffff6 	.word	0x001ffff6
 8003cd0:	fff6fff6 	.word	0xfff6fff6
 8003cd4:	fff6fff6 	.word	0xfff6fff6
 8003cd8:	003600a1 	.word	0x003600a1
 8003cdc:	fff60080 	.word	0xfff60080
 8003ce0:	00b2fff6 	.word	0x00b2fff6
 8003ce4:	0036fff6 	.word	0x0036fff6
 8003ce8:	fff6fff6 	.word	0xfff6fff6
 8003cec:	0084      	.short	0x0084
 8003cee:	0025      	movs	r5, r4
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	3542      	adds	r5, #66	@ 0x42
 8003cf4:	1d11      	adds	r1, r2, #4
 8003cf6:	6019      	str	r1, [r3, #0]
 8003cf8:	6813      	ldr	r3, [r2, #0]
 8003cfa:	702b      	strb	r3, [r5, #0]
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e0a0      	b.n	8003e42 <_printf_i+0x1c2>
 8003d00:	6818      	ldr	r0, [r3, #0]
 8003d02:	6809      	ldr	r1, [r1, #0]
 8003d04:	1d02      	adds	r2, r0, #4
 8003d06:	060d      	lsls	r5, r1, #24
 8003d08:	d50b      	bpl.n	8003d22 <_printf_i+0xa2>
 8003d0a:	6806      	ldr	r6, [r0, #0]
 8003d0c:	601a      	str	r2, [r3, #0]
 8003d0e:	2e00      	cmp	r6, #0
 8003d10:	da03      	bge.n	8003d1a <_printf_i+0x9a>
 8003d12:	232d      	movs	r3, #45	@ 0x2d
 8003d14:	9a03      	ldr	r2, [sp, #12]
 8003d16:	4276      	negs	r6, r6
 8003d18:	7013      	strb	r3, [r2, #0]
 8003d1a:	4b5e      	ldr	r3, [pc, #376]	@ (8003e94 <_printf_i+0x214>)
 8003d1c:	270a      	movs	r7, #10
 8003d1e:	9304      	str	r3, [sp, #16]
 8003d20:	e018      	b.n	8003d54 <_printf_i+0xd4>
 8003d22:	6806      	ldr	r6, [r0, #0]
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	0649      	lsls	r1, r1, #25
 8003d28:	d5f1      	bpl.n	8003d0e <_printf_i+0x8e>
 8003d2a:	b236      	sxth	r6, r6
 8003d2c:	e7ef      	b.n	8003d0e <_printf_i+0x8e>
 8003d2e:	6808      	ldr	r0, [r1, #0]
 8003d30:	6819      	ldr	r1, [r3, #0]
 8003d32:	c940      	ldmia	r1!, {r6}
 8003d34:	0605      	lsls	r5, r0, #24
 8003d36:	d402      	bmi.n	8003d3e <_printf_i+0xbe>
 8003d38:	0640      	lsls	r0, r0, #25
 8003d3a:	d500      	bpl.n	8003d3e <_printf_i+0xbe>
 8003d3c:	b2b6      	uxth	r6, r6
 8003d3e:	6019      	str	r1, [r3, #0]
 8003d40:	4b54      	ldr	r3, [pc, #336]	@ (8003e94 <_printf_i+0x214>)
 8003d42:	270a      	movs	r7, #10
 8003d44:	9304      	str	r3, [sp, #16]
 8003d46:	2a6f      	cmp	r2, #111	@ 0x6f
 8003d48:	d100      	bne.n	8003d4c <_printf_i+0xcc>
 8003d4a:	3f02      	subs	r7, #2
 8003d4c:	0023      	movs	r3, r4
 8003d4e:	2200      	movs	r2, #0
 8003d50:	3343      	adds	r3, #67	@ 0x43
 8003d52:	701a      	strb	r2, [r3, #0]
 8003d54:	6863      	ldr	r3, [r4, #4]
 8003d56:	60a3      	str	r3, [r4, #8]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	db03      	blt.n	8003d64 <_printf_i+0xe4>
 8003d5c:	2104      	movs	r1, #4
 8003d5e:	6822      	ldr	r2, [r4, #0]
 8003d60:	438a      	bics	r2, r1
 8003d62:	6022      	str	r2, [r4, #0]
 8003d64:	2e00      	cmp	r6, #0
 8003d66:	d102      	bne.n	8003d6e <_printf_i+0xee>
 8003d68:	9d03      	ldr	r5, [sp, #12]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00c      	beq.n	8003d88 <_printf_i+0x108>
 8003d6e:	9d03      	ldr	r5, [sp, #12]
 8003d70:	0030      	movs	r0, r6
 8003d72:	0039      	movs	r1, r7
 8003d74:	f7fc fa58 	bl	8000228 <__aeabi_uidivmod>
 8003d78:	9b04      	ldr	r3, [sp, #16]
 8003d7a:	3d01      	subs	r5, #1
 8003d7c:	5c5b      	ldrb	r3, [r3, r1]
 8003d7e:	702b      	strb	r3, [r5, #0]
 8003d80:	0033      	movs	r3, r6
 8003d82:	0006      	movs	r6, r0
 8003d84:	429f      	cmp	r7, r3
 8003d86:	d9f3      	bls.n	8003d70 <_printf_i+0xf0>
 8003d88:	2f08      	cmp	r7, #8
 8003d8a:	d109      	bne.n	8003da0 <_printf_i+0x120>
 8003d8c:	6823      	ldr	r3, [r4, #0]
 8003d8e:	07db      	lsls	r3, r3, #31
 8003d90:	d506      	bpl.n	8003da0 <_printf_i+0x120>
 8003d92:	6862      	ldr	r2, [r4, #4]
 8003d94:	6923      	ldr	r3, [r4, #16]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	dc02      	bgt.n	8003da0 <_printf_i+0x120>
 8003d9a:	2330      	movs	r3, #48	@ 0x30
 8003d9c:	3d01      	subs	r5, #1
 8003d9e:	702b      	strb	r3, [r5, #0]
 8003da0:	9b03      	ldr	r3, [sp, #12]
 8003da2:	1b5b      	subs	r3, r3, r5
 8003da4:	6123      	str	r3, [r4, #16]
 8003da6:	9b07      	ldr	r3, [sp, #28]
 8003da8:	0021      	movs	r1, r4
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	9805      	ldr	r0, [sp, #20]
 8003dae:	9b06      	ldr	r3, [sp, #24]
 8003db0:	aa09      	add	r2, sp, #36	@ 0x24
 8003db2:	f7ff fef5 	bl	8003ba0 <_printf_common>
 8003db6:	3001      	adds	r0, #1
 8003db8:	d148      	bne.n	8003e4c <_printf_i+0x1cc>
 8003dba:	2001      	movs	r0, #1
 8003dbc:	4240      	negs	r0, r0
 8003dbe:	b00b      	add	sp, #44	@ 0x2c
 8003dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	6809      	ldr	r1, [r1, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	6022      	str	r2, [r4, #0]
 8003dca:	2278      	movs	r2, #120	@ 0x78
 8003dcc:	4932      	ldr	r1, [pc, #200]	@ (8003e98 <_printf_i+0x218>)
 8003dce:	9104      	str	r1, [sp, #16]
 8003dd0:	0021      	movs	r1, r4
 8003dd2:	3145      	adds	r1, #69	@ 0x45
 8003dd4:	700a      	strb	r2, [r1, #0]
 8003dd6:	6819      	ldr	r1, [r3, #0]
 8003dd8:	6822      	ldr	r2, [r4, #0]
 8003dda:	c940      	ldmia	r1!, {r6}
 8003ddc:	0610      	lsls	r0, r2, #24
 8003dde:	d402      	bmi.n	8003de6 <_printf_i+0x166>
 8003de0:	0650      	lsls	r0, r2, #25
 8003de2:	d500      	bpl.n	8003de6 <_printf_i+0x166>
 8003de4:	b2b6      	uxth	r6, r6
 8003de6:	6019      	str	r1, [r3, #0]
 8003de8:	07d3      	lsls	r3, r2, #31
 8003dea:	d502      	bpl.n	8003df2 <_printf_i+0x172>
 8003dec:	2320      	movs	r3, #32
 8003dee:	4313      	orrs	r3, r2
 8003df0:	6023      	str	r3, [r4, #0]
 8003df2:	2e00      	cmp	r6, #0
 8003df4:	d001      	beq.n	8003dfa <_printf_i+0x17a>
 8003df6:	2710      	movs	r7, #16
 8003df8:	e7a8      	b.n	8003d4c <_printf_i+0xcc>
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	6823      	ldr	r3, [r4, #0]
 8003dfe:	4393      	bics	r3, r2
 8003e00:	6023      	str	r3, [r4, #0]
 8003e02:	e7f8      	b.n	8003df6 <_printf_i+0x176>
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	680d      	ldr	r5, [r1, #0]
 8003e08:	1d10      	adds	r0, r2, #4
 8003e0a:	6949      	ldr	r1, [r1, #20]
 8003e0c:	6018      	str	r0, [r3, #0]
 8003e0e:	6813      	ldr	r3, [r2, #0]
 8003e10:	062e      	lsls	r6, r5, #24
 8003e12:	d501      	bpl.n	8003e18 <_printf_i+0x198>
 8003e14:	6019      	str	r1, [r3, #0]
 8003e16:	e002      	b.n	8003e1e <_printf_i+0x19e>
 8003e18:	066d      	lsls	r5, r5, #25
 8003e1a:	d5fb      	bpl.n	8003e14 <_printf_i+0x194>
 8003e1c:	8019      	strh	r1, [r3, #0]
 8003e1e:	2300      	movs	r3, #0
 8003e20:	9d03      	ldr	r5, [sp, #12]
 8003e22:	6123      	str	r3, [r4, #16]
 8003e24:	e7bf      	b.n	8003da6 <_printf_i+0x126>
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	1d11      	adds	r1, r2, #4
 8003e2a:	6019      	str	r1, [r3, #0]
 8003e2c:	6815      	ldr	r5, [r2, #0]
 8003e2e:	2100      	movs	r1, #0
 8003e30:	0028      	movs	r0, r5
 8003e32:	6862      	ldr	r2, [r4, #4]
 8003e34:	f000 f974 	bl	8004120 <memchr>
 8003e38:	2800      	cmp	r0, #0
 8003e3a:	d001      	beq.n	8003e40 <_printf_i+0x1c0>
 8003e3c:	1b40      	subs	r0, r0, r5
 8003e3e:	6060      	str	r0, [r4, #4]
 8003e40:	6863      	ldr	r3, [r4, #4]
 8003e42:	6123      	str	r3, [r4, #16]
 8003e44:	2300      	movs	r3, #0
 8003e46:	9a03      	ldr	r2, [sp, #12]
 8003e48:	7013      	strb	r3, [r2, #0]
 8003e4a:	e7ac      	b.n	8003da6 <_printf_i+0x126>
 8003e4c:	002a      	movs	r2, r5
 8003e4e:	6923      	ldr	r3, [r4, #16]
 8003e50:	9906      	ldr	r1, [sp, #24]
 8003e52:	9805      	ldr	r0, [sp, #20]
 8003e54:	9d07      	ldr	r5, [sp, #28]
 8003e56:	47a8      	blx	r5
 8003e58:	3001      	adds	r0, #1
 8003e5a:	d0ae      	beq.n	8003dba <_printf_i+0x13a>
 8003e5c:	6823      	ldr	r3, [r4, #0]
 8003e5e:	079b      	lsls	r3, r3, #30
 8003e60:	d415      	bmi.n	8003e8e <_printf_i+0x20e>
 8003e62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e64:	68e0      	ldr	r0, [r4, #12]
 8003e66:	4298      	cmp	r0, r3
 8003e68:	daa9      	bge.n	8003dbe <_printf_i+0x13e>
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	e7a7      	b.n	8003dbe <_printf_i+0x13e>
 8003e6e:	0022      	movs	r2, r4
 8003e70:	2301      	movs	r3, #1
 8003e72:	9906      	ldr	r1, [sp, #24]
 8003e74:	9805      	ldr	r0, [sp, #20]
 8003e76:	9e07      	ldr	r6, [sp, #28]
 8003e78:	3219      	adds	r2, #25
 8003e7a:	47b0      	blx	r6
 8003e7c:	3001      	adds	r0, #1
 8003e7e:	d09c      	beq.n	8003dba <_printf_i+0x13a>
 8003e80:	3501      	adds	r5, #1
 8003e82:	68e3      	ldr	r3, [r4, #12]
 8003e84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003e86:	1a9b      	subs	r3, r3, r2
 8003e88:	42ab      	cmp	r3, r5
 8003e8a:	dcf0      	bgt.n	8003e6e <_printf_i+0x1ee>
 8003e8c:	e7e9      	b.n	8003e62 <_printf_i+0x1e2>
 8003e8e:	2500      	movs	r5, #0
 8003e90:	e7f7      	b.n	8003e82 <_printf_i+0x202>
 8003e92:	46c0      	nop			@ (mov r8, r8)
 8003e94:	08004995 	.word	0x08004995
 8003e98:	080049a6 	.word	0x080049a6

08003e9c <__sflush_r>:
 8003e9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e9e:	220c      	movs	r2, #12
 8003ea0:	5e8b      	ldrsh	r3, [r1, r2]
 8003ea2:	0005      	movs	r5, r0
 8003ea4:	000c      	movs	r4, r1
 8003ea6:	071a      	lsls	r2, r3, #28
 8003ea8:	d456      	bmi.n	8003f58 <__sflush_r+0xbc>
 8003eaa:	684a      	ldr	r2, [r1, #4]
 8003eac:	2a00      	cmp	r2, #0
 8003eae:	dc02      	bgt.n	8003eb6 <__sflush_r+0x1a>
 8003eb0:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8003eb2:	2a00      	cmp	r2, #0
 8003eb4:	dd4e      	ble.n	8003f54 <__sflush_r+0xb8>
 8003eb6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003eb8:	2f00      	cmp	r7, #0
 8003eba:	d04b      	beq.n	8003f54 <__sflush_r+0xb8>
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	2080      	movs	r0, #128	@ 0x80
 8003ec0:	682e      	ldr	r6, [r5, #0]
 8003ec2:	602a      	str	r2, [r5, #0]
 8003ec4:	001a      	movs	r2, r3
 8003ec6:	0140      	lsls	r0, r0, #5
 8003ec8:	6a21      	ldr	r1, [r4, #32]
 8003eca:	4002      	ands	r2, r0
 8003ecc:	4203      	tst	r3, r0
 8003ece:	d033      	beq.n	8003f38 <__sflush_r+0x9c>
 8003ed0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003ed2:	89a3      	ldrh	r3, [r4, #12]
 8003ed4:	075b      	lsls	r3, r3, #29
 8003ed6:	d506      	bpl.n	8003ee6 <__sflush_r+0x4a>
 8003ed8:	6863      	ldr	r3, [r4, #4]
 8003eda:	1ad2      	subs	r2, r2, r3
 8003edc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <__sflush_r+0x4a>
 8003ee2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003ee4:	1ad2      	subs	r2, r2, r3
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	0028      	movs	r0, r5
 8003eea:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003eec:	6a21      	ldr	r1, [r4, #32]
 8003eee:	47b8      	blx	r7
 8003ef0:	89a2      	ldrh	r2, [r4, #12]
 8003ef2:	1c43      	adds	r3, r0, #1
 8003ef4:	d106      	bne.n	8003f04 <__sflush_r+0x68>
 8003ef6:	6829      	ldr	r1, [r5, #0]
 8003ef8:	291d      	cmp	r1, #29
 8003efa:	d846      	bhi.n	8003f8a <__sflush_r+0xee>
 8003efc:	4b29      	ldr	r3, [pc, #164]	@ (8003fa4 <__sflush_r+0x108>)
 8003efe:	410b      	asrs	r3, r1
 8003f00:	07db      	lsls	r3, r3, #31
 8003f02:	d442      	bmi.n	8003f8a <__sflush_r+0xee>
 8003f04:	2300      	movs	r3, #0
 8003f06:	6063      	str	r3, [r4, #4]
 8003f08:	6923      	ldr	r3, [r4, #16]
 8003f0a:	6023      	str	r3, [r4, #0]
 8003f0c:	04d2      	lsls	r2, r2, #19
 8003f0e:	d505      	bpl.n	8003f1c <__sflush_r+0x80>
 8003f10:	1c43      	adds	r3, r0, #1
 8003f12:	d102      	bne.n	8003f1a <__sflush_r+0x7e>
 8003f14:	682b      	ldr	r3, [r5, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d100      	bne.n	8003f1c <__sflush_r+0x80>
 8003f1a:	6560      	str	r0, [r4, #84]	@ 0x54
 8003f1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003f1e:	602e      	str	r6, [r5, #0]
 8003f20:	2900      	cmp	r1, #0
 8003f22:	d017      	beq.n	8003f54 <__sflush_r+0xb8>
 8003f24:	0023      	movs	r3, r4
 8003f26:	3344      	adds	r3, #68	@ 0x44
 8003f28:	4299      	cmp	r1, r3
 8003f2a:	d002      	beq.n	8003f32 <__sflush_r+0x96>
 8003f2c:	0028      	movs	r0, r5
 8003f2e:	f7ff fca9 	bl	8003884 <_free_r>
 8003f32:	2300      	movs	r3, #0
 8003f34:	6363      	str	r3, [r4, #52]	@ 0x34
 8003f36:	e00d      	b.n	8003f54 <__sflush_r+0xb8>
 8003f38:	2301      	movs	r3, #1
 8003f3a:	0028      	movs	r0, r5
 8003f3c:	47b8      	blx	r7
 8003f3e:	0002      	movs	r2, r0
 8003f40:	1c43      	adds	r3, r0, #1
 8003f42:	d1c6      	bne.n	8003ed2 <__sflush_r+0x36>
 8003f44:	682b      	ldr	r3, [r5, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0c3      	beq.n	8003ed2 <__sflush_r+0x36>
 8003f4a:	2b1d      	cmp	r3, #29
 8003f4c:	d001      	beq.n	8003f52 <__sflush_r+0xb6>
 8003f4e:	2b16      	cmp	r3, #22
 8003f50:	d11a      	bne.n	8003f88 <__sflush_r+0xec>
 8003f52:	602e      	str	r6, [r5, #0]
 8003f54:	2000      	movs	r0, #0
 8003f56:	e01e      	b.n	8003f96 <__sflush_r+0xfa>
 8003f58:	690e      	ldr	r6, [r1, #16]
 8003f5a:	2e00      	cmp	r6, #0
 8003f5c:	d0fa      	beq.n	8003f54 <__sflush_r+0xb8>
 8003f5e:	680f      	ldr	r7, [r1, #0]
 8003f60:	600e      	str	r6, [r1, #0]
 8003f62:	1bba      	subs	r2, r7, r6
 8003f64:	9201      	str	r2, [sp, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	079b      	lsls	r3, r3, #30
 8003f6a:	d100      	bne.n	8003f6e <__sflush_r+0xd2>
 8003f6c:	694a      	ldr	r2, [r1, #20]
 8003f6e:	60a2      	str	r2, [r4, #8]
 8003f70:	9b01      	ldr	r3, [sp, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	ddee      	ble.n	8003f54 <__sflush_r+0xb8>
 8003f76:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003f78:	0032      	movs	r2, r6
 8003f7a:	001f      	movs	r7, r3
 8003f7c:	0028      	movs	r0, r5
 8003f7e:	9b01      	ldr	r3, [sp, #4]
 8003f80:	6a21      	ldr	r1, [r4, #32]
 8003f82:	47b8      	blx	r7
 8003f84:	2800      	cmp	r0, #0
 8003f86:	dc07      	bgt.n	8003f98 <__sflush_r+0xfc>
 8003f88:	89a2      	ldrh	r2, [r4, #12]
 8003f8a:	2340      	movs	r3, #64	@ 0x40
 8003f8c:	2001      	movs	r0, #1
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	b21b      	sxth	r3, r3
 8003f92:	81a3      	strh	r3, [r4, #12]
 8003f94:	4240      	negs	r0, r0
 8003f96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f98:	9b01      	ldr	r3, [sp, #4]
 8003f9a:	1836      	adds	r6, r6, r0
 8003f9c:	1a1b      	subs	r3, r3, r0
 8003f9e:	9301      	str	r3, [sp, #4]
 8003fa0:	e7e6      	b.n	8003f70 <__sflush_r+0xd4>
 8003fa2:	46c0      	nop			@ (mov r8, r8)
 8003fa4:	dfbffffe 	.word	0xdfbffffe

08003fa8 <_fflush_r>:
 8003fa8:	690b      	ldr	r3, [r1, #16]
 8003faa:	b570      	push	{r4, r5, r6, lr}
 8003fac:	0005      	movs	r5, r0
 8003fae:	000c      	movs	r4, r1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d102      	bne.n	8003fba <_fflush_r+0x12>
 8003fb4:	2500      	movs	r5, #0
 8003fb6:	0028      	movs	r0, r5
 8003fb8:	bd70      	pop	{r4, r5, r6, pc}
 8003fba:	2800      	cmp	r0, #0
 8003fbc:	d004      	beq.n	8003fc8 <_fflush_r+0x20>
 8003fbe:	6a03      	ldr	r3, [r0, #32]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <_fflush_r+0x20>
 8003fc4:	f7ff fa38 	bl	8003438 <__sinit>
 8003fc8:	220c      	movs	r2, #12
 8003fca:	5ea3      	ldrsh	r3, [r4, r2]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d0f1      	beq.n	8003fb4 <_fflush_r+0xc>
 8003fd0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003fd2:	07d2      	lsls	r2, r2, #31
 8003fd4:	d404      	bmi.n	8003fe0 <_fflush_r+0x38>
 8003fd6:	059b      	lsls	r3, r3, #22
 8003fd8:	d402      	bmi.n	8003fe0 <_fflush_r+0x38>
 8003fda:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003fdc:	f7ff fc4f 	bl	800387e <__retarget_lock_acquire_recursive>
 8003fe0:	0028      	movs	r0, r5
 8003fe2:	0021      	movs	r1, r4
 8003fe4:	f7ff ff5a 	bl	8003e9c <__sflush_r>
 8003fe8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003fea:	0005      	movs	r5, r0
 8003fec:	07db      	lsls	r3, r3, #31
 8003fee:	d4e2      	bmi.n	8003fb6 <_fflush_r+0xe>
 8003ff0:	89a3      	ldrh	r3, [r4, #12]
 8003ff2:	059b      	lsls	r3, r3, #22
 8003ff4:	d4df      	bmi.n	8003fb6 <_fflush_r+0xe>
 8003ff6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ff8:	f7ff fc42 	bl	8003880 <__retarget_lock_release_recursive>
 8003ffc:	e7db      	b.n	8003fb6 <_fflush_r+0xe>
	...

08004000 <__swhatbuf_r>:
 8004000:	b570      	push	{r4, r5, r6, lr}
 8004002:	000e      	movs	r6, r1
 8004004:	001d      	movs	r5, r3
 8004006:	230e      	movs	r3, #14
 8004008:	5ec9      	ldrsh	r1, [r1, r3]
 800400a:	0014      	movs	r4, r2
 800400c:	b096      	sub	sp, #88	@ 0x58
 800400e:	2900      	cmp	r1, #0
 8004010:	da0c      	bge.n	800402c <__swhatbuf_r+0x2c>
 8004012:	89b2      	ldrh	r2, [r6, #12]
 8004014:	2380      	movs	r3, #128	@ 0x80
 8004016:	0011      	movs	r1, r2
 8004018:	4019      	ands	r1, r3
 800401a:	421a      	tst	r2, r3
 800401c:	d114      	bne.n	8004048 <__swhatbuf_r+0x48>
 800401e:	2380      	movs	r3, #128	@ 0x80
 8004020:	00db      	lsls	r3, r3, #3
 8004022:	2000      	movs	r0, #0
 8004024:	6029      	str	r1, [r5, #0]
 8004026:	6023      	str	r3, [r4, #0]
 8004028:	b016      	add	sp, #88	@ 0x58
 800402a:	bd70      	pop	{r4, r5, r6, pc}
 800402c:	466a      	mov	r2, sp
 800402e:	f000 f853 	bl	80040d8 <_fstat_r>
 8004032:	2800      	cmp	r0, #0
 8004034:	dbed      	blt.n	8004012 <__swhatbuf_r+0x12>
 8004036:	23f0      	movs	r3, #240	@ 0xf0
 8004038:	9901      	ldr	r1, [sp, #4]
 800403a:	021b      	lsls	r3, r3, #8
 800403c:	4019      	ands	r1, r3
 800403e:	4b04      	ldr	r3, [pc, #16]	@ (8004050 <__swhatbuf_r+0x50>)
 8004040:	18c9      	adds	r1, r1, r3
 8004042:	424b      	negs	r3, r1
 8004044:	4159      	adcs	r1, r3
 8004046:	e7ea      	b.n	800401e <__swhatbuf_r+0x1e>
 8004048:	2100      	movs	r1, #0
 800404a:	2340      	movs	r3, #64	@ 0x40
 800404c:	e7e9      	b.n	8004022 <__swhatbuf_r+0x22>
 800404e:	46c0      	nop			@ (mov r8, r8)
 8004050:	ffffe000 	.word	0xffffe000

08004054 <__smakebuf_r>:
 8004054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004056:	2602      	movs	r6, #2
 8004058:	898b      	ldrh	r3, [r1, #12]
 800405a:	0005      	movs	r5, r0
 800405c:	000c      	movs	r4, r1
 800405e:	b085      	sub	sp, #20
 8004060:	4233      	tst	r3, r6
 8004062:	d007      	beq.n	8004074 <__smakebuf_r+0x20>
 8004064:	0023      	movs	r3, r4
 8004066:	3347      	adds	r3, #71	@ 0x47
 8004068:	6023      	str	r3, [r4, #0]
 800406a:	6123      	str	r3, [r4, #16]
 800406c:	2301      	movs	r3, #1
 800406e:	6163      	str	r3, [r4, #20]
 8004070:	b005      	add	sp, #20
 8004072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004074:	ab03      	add	r3, sp, #12
 8004076:	aa02      	add	r2, sp, #8
 8004078:	f7ff ffc2 	bl	8004000 <__swhatbuf_r>
 800407c:	9f02      	ldr	r7, [sp, #8]
 800407e:	9001      	str	r0, [sp, #4]
 8004080:	0039      	movs	r1, r7
 8004082:	0028      	movs	r0, r5
 8004084:	f7ff f8b8 	bl	80031f8 <_malloc_r>
 8004088:	2800      	cmp	r0, #0
 800408a:	d108      	bne.n	800409e <__smakebuf_r+0x4a>
 800408c:	220c      	movs	r2, #12
 800408e:	5ea3      	ldrsh	r3, [r4, r2]
 8004090:	059a      	lsls	r2, r3, #22
 8004092:	d4ed      	bmi.n	8004070 <__smakebuf_r+0x1c>
 8004094:	2203      	movs	r2, #3
 8004096:	4393      	bics	r3, r2
 8004098:	431e      	orrs	r6, r3
 800409a:	81a6      	strh	r6, [r4, #12]
 800409c:	e7e2      	b.n	8004064 <__smakebuf_r+0x10>
 800409e:	2380      	movs	r3, #128	@ 0x80
 80040a0:	89a2      	ldrh	r2, [r4, #12]
 80040a2:	6020      	str	r0, [r4, #0]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	81a3      	strh	r3, [r4, #12]
 80040a8:	9b03      	ldr	r3, [sp, #12]
 80040aa:	6120      	str	r0, [r4, #16]
 80040ac:	6167      	str	r7, [r4, #20]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00c      	beq.n	80040cc <__smakebuf_r+0x78>
 80040b2:	0028      	movs	r0, r5
 80040b4:	230e      	movs	r3, #14
 80040b6:	5ee1      	ldrsh	r1, [r4, r3]
 80040b8:	f000 f820 	bl	80040fc <_isatty_r>
 80040bc:	2800      	cmp	r0, #0
 80040be:	d005      	beq.n	80040cc <__smakebuf_r+0x78>
 80040c0:	2303      	movs	r3, #3
 80040c2:	89a2      	ldrh	r2, [r4, #12]
 80040c4:	439a      	bics	r2, r3
 80040c6:	3b02      	subs	r3, #2
 80040c8:	4313      	orrs	r3, r2
 80040ca:	81a3      	strh	r3, [r4, #12]
 80040cc:	89a3      	ldrh	r3, [r4, #12]
 80040ce:	9a01      	ldr	r2, [sp, #4]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	81a3      	strh	r3, [r4, #12]
 80040d4:	e7cc      	b.n	8004070 <__smakebuf_r+0x1c>
	...

080040d8 <_fstat_r>:
 80040d8:	2300      	movs	r3, #0
 80040da:	b570      	push	{r4, r5, r6, lr}
 80040dc:	4d06      	ldr	r5, [pc, #24]	@ (80040f8 <_fstat_r+0x20>)
 80040de:	0004      	movs	r4, r0
 80040e0:	0008      	movs	r0, r1
 80040e2:	0011      	movs	r1, r2
 80040e4:	602b      	str	r3, [r5, #0]
 80040e6:	f7fc fba5 	bl	8000834 <_fstat>
 80040ea:	1c43      	adds	r3, r0, #1
 80040ec:	d103      	bne.n	80040f6 <_fstat_r+0x1e>
 80040ee:	682b      	ldr	r3, [r5, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d000      	beq.n	80040f6 <_fstat_r+0x1e>
 80040f4:	6023      	str	r3, [r4, #0]
 80040f6:	bd70      	pop	{r4, r5, r6, pc}
 80040f8:	200002d0 	.word	0x200002d0

080040fc <_isatty_r>:
 80040fc:	2300      	movs	r3, #0
 80040fe:	b570      	push	{r4, r5, r6, lr}
 8004100:	4d06      	ldr	r5, [pc, #24]	@ (800411c <_isatty_r+0x20>)
 8004102:	0004      	movs	r4, r0
 8004104:	0008      	movs	r0, r1
 8004106:	602b      	str	r3, [r5, #0]
 8004108:	f7fc fba2 	bl	8000850 <_isatty>
 800410c:	1c43      	adds	r3, r0, #1
 800410e:	d103      	bne.n	8004118 <_isatty_r+0x1c>
 8004110:	682b      	ldr	r3, [r5, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d000      	beq.n	8004118 <_isatty_r+0x1c>
 8004116:	6023      	str	r3, [r4, #0]
 8004118:	bd70      	pop	{r4, r5, r6, pc}
 800411a:	46c0      	nop			@ (mov r8, r8)
 800411c:	200002d0 	.word	0x200002d0

08004120 <memchr>:
 8004120:	b2c9      	uxtb	r1, r1
 8004122:	1882      	adds	r2, r0, r2
 8004124:	4290      	cmp	r0, r2
 8004126:	d101      	bne.n	800412c <memchr+0xc>
 8004128:	2000      	movs	r0, #0
 800412a:	4770      	bx	lr
 800412c:	7803      	ldrb	r3, [r0, #0]
 800412e:	428b      	cmp	r3, r1
 8004130:	d0fb      	beq.n	800412a <memchr+0xa>
 8004132:	3001      	adds	r0, #1
 8004134:	e7f6      	b.n	8004124 <memchr+0x4>
	...

08004138 <_init>:
 8004138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800413a:	46c0      	nop			@ (mov r8, r8)
 800413c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800413e:	bc08      	pop	{r3}
 8004140:	469e      	mov	lr, r3
 8004142:	4770      	bx	lr

08004144 <_fini>:
 8004144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004146:	46c0      	nop			@ (mov r8, r8)
 8004148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800414a:	bc08      	pop	{r3}
 800414c:	469e      	mov	lr, r3
 800414e:	4770      	bx	lr
