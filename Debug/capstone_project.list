
capstone_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000296c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000058c  08002a2c  08002a2c  00003a2c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fb8  08002fb8  00004070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002fb8  08002fb8  00004070  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002fb8  08002fb8  00004070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fb8  08002fb8  00003fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002fbc  08002fbc  00003fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08002fc0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  20000070  08003030  00004070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  08003030  00004370  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f657  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c0d  00000000  00000000  000136ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00005fbb  00000000  00000000  000162fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000978  00000000  00000000  0001c2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a10  00000000  00000000  0001cc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a57e  00000000  00000000  0001d640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000122d4  00000000  00000000  00037bbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e787  00000000  00000000  00049e92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d8619  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001e70  00000000  00000000  000d865c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  000da4cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002a14 	.word	0x08002a14

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08002a14 	.word	0x08002a14

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000244:	b510      	push	{r4, lr}
 8000246:	b098      	sub	sp, #96	@ 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000248:	2230      	movs	r2, #48	@ 0x30
 800024a:	2100      	movs	r1, #0
 800024c:	a80c      	add	r0, sp, #48	@ 0x30
 800024e:	f002 f9b1 	bl	80025b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000252:	2210      	movs	r2, #16
 8000254:	2100      	movs	r1, #0
 8000256:	a801      	add	r0, sp, #4
 8000258:	f002 f9ac 	bl	80025b4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800025c:	2218      	movs	r2, #24
 800025e:	2100      	movs	r1, #0
 8000260:	a805      	add	r0, sp, #20
 8000262:	f002 f9a7 	bl	80025b4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000266:	2401      	movs	r4, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000268:	2320      	movs	r3, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026a:	a80b      	add	r0, sp, #44	@ 0x2c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800026c:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800026e:	9413      	str	r4, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000270:	f001 f894 	bl	800139c <HAL_RCC_OscConfig>
 8000274:	2800      	cmp	r0, #0
 8000276:	d001      	beq.n	800027c <SystemClock_Config+0x38>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000278:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800027a:	e7fe      	b.n	800027a <SystemClock_Config+0x36>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027c:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027e:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000280:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000282:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000284:	3b04      	subs	r3, #4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000286:	0021      	movs	r1, r4
 8000288:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800028a:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800028c:	f001 fb0c 	bl	80018a8 <HAL_RCC_ClockConfig>
 8000290:	2800      	cmp	r0, #0
 8000292:	d001      	beq.n	8000298 <SystemClock_Config+0x54>
 8000294:	b672      	cpsid	i
  while (1)
 8000296:	e7fe      	b.n	8000296 <SystemClock_Config+0x52>
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000298:	9007      	str	r0, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800029a:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800029c:	9405      	str	r4, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800029e:	f001 fb9d 	bl	80019dc <HAL_RCCEx_PeriphCLKConfig>
 80002a2:	2800      	cmp	r0, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x66>
 80002a6:	b672      	cpsid	i
  while (1)
 80002a8:	e7fe      	b.n	80002a8 <SystemClock_Config+0x64>
}
 80002aa:	b018      	add	sp, #96	@ 0x60
 80002ac:	bd10      	pop	{r4, pc}
	...

080002b0 <main>:
{
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	b08f      	sub	sp, #60	@ 0x3c
  HAL_Init();
 80002b4:	f000 fe54 	bl	8000f60 <HAL_Init>
  SystemClock_Config();
 80002b8:	f7ff ffc4 	bl	8000244 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002bc:	2214      	movs	r2, #20
 80002be:	2100      	movs	r1, #0
 80002c0:	a809      	add	r0, sp, #36	@ 0x24
 80002c2:	f002 f977 	bl	80025b4 <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002c6:	2180      	movs	r1, #128	@ 0x80
 80002c8:	4bb9      	ldr	r3, [pc, #740]	@ (80005b0 <main+0x300>)
 80002ca:	03c9      	lsls	r1, r1, #15
 80002cc:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|OLED_CS_Pin, GPIO_PIN_RESET);
 80002ce:	2090      	movs	r0, #144	@ 0x90
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002d0:	430a      	orrs	r2, r1
 80002d2:	615a      	str	r2, [r3, #20]
 80002d4:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|OLED_CS_Pin, GPIO_PIN_RESET);
 80002d6:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002d8:	400a      	ands	r2, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002da:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002dc:	9206      	str	r2, [sp, #24]
 80002de:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e0:	695a      	ldr	r2, [r3, #20]
 80002e2:	0289      	lsls	r1, r1, #10
 80002e4:	430a      	orrs	r2, r1
 80002e6:	615a      	str	r2, [r3, #20]
 80002e8:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ea:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ec:	400a      	ands	r2, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ee:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f0:	9207      	str	r2, [sp, #28]
 80002f2:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002f4:	695a      	ldr	r2, [r3, #20]
 80002f6:	02c9      	lsls	r1, r1, #11
 80002f8:	430a      	orrs	r2, r1
 80002fa:	615a      	str	r2, [r3, #20]
 80002fc:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|OLED_CS_Pin, GPIO_PIN_RESET);
 80002fe:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000300:	400b      	ands	r3, r1
 8000302:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|OLED_CS_Pin, GPIO_PIN_RESET);
 8000304:	2128      	movs	r1, #40	@ 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000306:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|OLED_CS_Pin, GPIO_PIN_RESET);
 8000308:	f000 ffd6 	bl	80012b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, OLED_DC_Pin|OLED_RST_Pin|IIC_SCL_SOFT_Pin|IIC_SDA_SOFT_Pin, GPIO_PIN_RESET);
 800030c:	2200      	movs	r2, #0
 800030e:	2193      	movs	r1, #147	@ 0x93
 8000310:	48a8      	ldr	r0, [pc, #672]	@ (80005b4 <main+0x304>)
 8000312:	f000 ffd1 	bl	80012b8 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000316:	2090      	movs	r0, #144	@ 0x90
  GPIO_InitStruct.Pin = GPIO_PIN_3|OLED_CS_Pin;
 8000318:	2328      	movs	r3, #40	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800031a:	2501      	movs	r5, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800031c:	a909      	add	r1, sp, #36	@ 0x24
 800031e:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = GPIO_PIN_3|OLED_CS_Pin;
 8000320:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000322:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000324:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000326:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000328:	f000 ff0e 	bl	8001148 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OLED_DC_Pin|OLED_RST_Pin|IIC_SCL_SOFT_Pin|IIC_SDA_SOFT_Pin;
 800032c:	2393      	movs	r3, #147	@ 0x93
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800032e:	48a1      	ldr	r0, [pc, #644]	@ (80005b4 <main+0x304>)
 8000330:	a909      	add	r1, sp, #36	@ 0x24
  GPIO_InitStruct.Pin = OLED_DC_Pin|OLED_RST_Pin|IIC_SCL_SOFT_Pin|IIC_SDA_SOFT_Pin;
 8000332:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000334:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000336:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000338:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800033a:	f000 ff05 	bl	8001148 <HAL_GPIO_Init>
  hi2s1.Instance = SPI1;
 800033e:	489e      	ldr	r0, [pc, #632]	@ (80005b8 <main+0x308>)
 8000340:	4b9e      	ldr	r3, [pc, #632]	@ (80005bc <main+0x30c>)
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000342:	6084      	str	r4, [r0, #8]
  hi2s1.Instance = SPI1;
 8000344:	6003      	str	r3, [r0, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 8000346:	23c0      	movs	r3, #192	@ 0xc0
 8000348:	009b      	lsls	r3, r3, #2
 800034a:	6043      	str	r3, [r0, #4]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_24B;
 800034c:	2303      	movs	r3, #3
 800034e:	60c3      	str	r3, [r0, #12]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000350:	23fa      	movs	r3, #250	@ 0xfa
 8000352:	019b      	lsls	r3, r3, #6
 8000354:	6143      	str	r3, [r0, #20]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000356:	6104      	str	r4, [r0, #16]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000358:	6184      	str	r4, [r0, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 800035a:	f000 ffb3 	bl	80012c4 <HAL_I2S_Init>
 800035e:	0003      	movs	r3, r0
 8000360:	42a0      	cmp	r0, r4
 8000362:	d001      	beq.n	8000368 <main+0xb8>
 8000364:	b672      	cpsid	i
  while (1)
 8000366:	e7fe      	b.n	8000366 <main+0xb6>
  huart1.Instance = USART1;
 8000368:	4895      	ldr	r0, [pc, #596]	@ (80005c0 <main+0x310>)
 800036a:	4a96      	ldr	r2, [pc, #600]	@ (80005c4 <main+0x314>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800036c:	6083      	str	r3, [r0, #8]
  huart1.Instance = USART1;
 800036e:	6002      	str	r2, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000370:	22e1      	movs	r2, #225	@ 0xe1
 8000372:	0252      	lsls	r2, r2, #9
 8000374:	6042      	str	r2, [r0, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000376:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000378:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800037a:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800037c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800037e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000380:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000382:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000384:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000386:	f001 fe17 	bl	8001fb8 <HAL_UART_Init>
 800038a:	2800      	cmp	r0, #0
 800038c:	d001      	beq.n	8000392 <main+0xe2>
 800038e:	b672      	cpsid	i
  while (1)
 8000390:	e7fe      	b.n	8000390 <main+0xe0>
  if(System_Init() != 0) return -1;
 8000392:	f000 fa75 	bl	8000880 <System_Init>
 8000396:	1e04      	subs	r4, r0, #0
 8000398:	d110      	bne.n	80003bc <main+0x10c>
      OLED_0in96_Init();
 800039a:	f000 fd2b 	bl	8000df4 <OLED_0in96_Init>
      Driver_Delay_ms(500);
 800039e:	20fa      	movs	r0, #250	@ 0xfa
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	f000 fa85 	bl	80008b0 <Driver_Delay_ms>
      BlackImage = (UBYTE *)malloc(Imagesize);
 80003a6:	2080      	movs	r0, #128	@ 0x80
 80003a8:	00c0      	lsls	r0, r0, #3
 80003aa:	f001 fe37 	bl	800201c <malloc>
 80003ae:	4d86      	ldr	r5, [pc, #536]	@ (80005c8 <main+0x318>)
 80003b0:	6028      	str	r0, [r5, #0]
      if(!BlackImage) {
 80003b2:	2800      	cmp	r0, #0
 80003b4:	d106      	bne.n	80003c4 <main+0x114>
          printf("Failed to apply for black memory...\r\n");
 80003b6:	4885      	ldr	r0, [pc, #532]	@ (80005cc <main+0x31c>)
 80003b8:	f002 f806 	bl	80023c8 <puts>
}
 80003bc:	2001      	movs	r0, #1
 80003be:	4240      	negs	r0, r0
 80003c0:	b00f      	add	sp, #60	@ 0x3c
 80003c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Paint_NewImage(BlackImage, OLED_0in96_WIDTH, OLED_0in96_HEIGHT, 90, BLACK);
 80003c4:	235a      	movs	r3, #90	@ 0x5a
 80003c6:	2280      	movs	r2, #128	@ 0x80
 80003c8:	2140      	movs	r1, #64	@ 0x40
 80003ca:	9400      	str	r4, [sp, #0]
 80003cc:	f000 fb2e 	bl	8000a2c <Paint_NewImage>
      Paint_SelectImage(BlackImage);
 80003d0:	6828      	ldr	r0, [r5, #0]
 80003d2:	f000 fb4d 	bl	8000a70 <Paint_SelectImage>
      Driver_Delay_ms(500);
 80003d6:	20fa      	movs	r0, #250	@ 0xfa
      uint16_t x_pos = 10;
 80003d8:	260a      	movs	r6, #10
      Driver_Delay_ms(500);
 80003da:	0040      	lsls	r0, r0, #1
 80003dc:	f000 fa68 	bl	80008b0 <Driver_Delay_ms>
      Paint_Clear(BLACK);
 80003e0:	0020      	movs	r0, r4
 80003e2:	f000 fbed 	bl	8000bc0 <Paint_Clear>
      OLED_0in96_display(BlackImage);
 80003e6:	6828      	ldr	r0, [r5, #0]
 80003e8:	f000 fd70 	bl	8000ecc <OLED_0in96_display>
      memset(buffer0, 0, sizeof(buffer0));
 80003ec:	2265      	movs	r2, #101	@ 0x65
 80003ee:	0021      	movs	r1, r4
 80003f0:	4877      	ldr	r0, [pc, #476]	@ (80005d0 <main+0x320>)
 80003f2:	f002 f8df 	bl	80025b4 <memset>
      fillIndex = 0;
 80003f6:	4b77      	ldr	r3, [pc, #476]	@ (80005d4 <main+0x324>)
      uint16_t y_pos = 0;
 80003f8:	9402      	str	r4, [sp, #8]
      fillIndex = 0;
 80003fa:	801c      	strh	r4, [r3, #0]
      fillIndex = 0;
 80003fc:	2700      	movs	r7, #0
 80003fe:	4d75      	ldr	r5, [pc, #468]	@ (80005d4 <main+0x324>)
 8000400:	802f      	strh	r7, [r5, #0]
      if (HAL_GetTick() - last_input_time >= screen_clear_timeout) {
 8000402:	f000 fdc9 	bl	8000f98 <HAL_GetTick>
 8000406:	4c74      	ldr	r4, [pc, #464]	@ (80005d8 <main+0x328>)
 8000408:	6823      	ldr	r3, [r4, #0]
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4b73      	ldr	r3, [pc, #460]	@ (80005dc <main+0x32c>)
 800040e:	4298      	cmp	r0, r3
 8000410:	d90b      	bls.n	800042a <main+0x17a>
          Paint_Clear(BLACK);
 8000412:	0038      	movs	r0, r7
 8000414:	f000 fbd4 	bl	8000bc0 <Paint_Clear>
          OLED_0in96_display(BlackImage);
 8000418:	4b6b      	ldr	r3, [pc, #428]	@ (80005c8 <main+0x318>)
          x_pos = 10;
 800041a:	260a      	movs	r6, #10
          OLED_0in96_display(BlackImage);
 800041c:	6818      	ldr	r0, [r3, #0]
 800041e:	f000 fd55 	bl	8000ecc <OLED_0in96_display>
          last_input_time = HAL_GetTick();
 8000422:	f000 fdb9 	bl	8000f98 <HAL_GetTick>
          y_pos = 0;
 8000426:	9702      	str	r7, [sp, #8]
          last_input_time = HAL_GetTick();
 8000428:	6020      	str	r0, [r4, #0]
          uart_status = HAL_UART_Receive(&huart1, &byte, 1, 100); // 100ms timeout
 800042a:	2364      	movs	r3, #100	@ 0x64
 800042c:	2201      	movs	r2, #1
 800042e:	4864      	ldr	r0, [pc, #400]	@ (80005c0 <main+0x310>)
 8000430:	a909      	add	r1, sp, #36	@ 0x24
 8000432:	f001 fce1 	bl	8001df8 <HAL_UART_Receive>
          if(uart_status == HAL_OK) {
 8000436:	2800      	cmp	r0, #0
 8000438:	d137      	bne.n	80004aa <main+0x1fa>
              buffer0[fillIndex++] = byte;
 800043a:	882a      	ldrh	r2, [r5, #0]
 800043c:	a904      	add	r1, sp, #16
 800043e:	1c53      	adds	r3, r2, #1
 8000440:	b29b      	uxth	r3, r3
 8000442:	7d09      	ldrb	r1, [r1, #20]
 8000444:	802b      	strh	r3, [r5, #0]
 8000446:	4b62      	ldr	r3, [pc, #392]	@ (80005d0 <main+0x320>)
 8000448:	5499      	strb	r1, [r3, r2]
              last_input_time = HAL_GetTick(); // Reset timeout on received byte
 800044a:	f000 fda5 	bl	8000f98 <HAL_GetTick>
              if (byte == '\n' || fillIndex >= BUFFER_SIZE - 1) {
 800044e:	ab04      	add	r3, sp, #16
 8000450:	7d1b      	ldrb	r3, [r3, #20]
              last_input_time = HAL_GetTick(); // Reset timeout on received byte
 8000452:	6020      	str	r0, [r4, #0]
              if (byte == '\n' || fillIndex >= BUFFER_SIZE - 1) {
 8000454:	2b0a      	cmp	r3, #10
 8000456:	d002      	beq.n	800045e <main+0x1ae>
 8000458:	882b      	ldrh	r3, [r5, #0]
 800045a:	2b62      	cmp	r3, #98	@ 0x62
 800045c:	d9e5      	bls.n	800042a <main+0x17a>
      if (fillIndex > 0) {
 800045e:	882b      	ldrh	r3, [r5, #0]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d0cb      	beq.n	80003fc <main+0x14c>
          if (buffer0[fillIndex - 1] == '\n') {
 8000464:	882b      	ldrh	r3, [r5, #0]
 8000466:	4c5a      	ldr	r4, [pc, #360]	@ (80005d0 <main+0x320>)
 8000468:	18e3      	adds	r3, r4, r3
 800046a:	3b01      	subs	r3, #1
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	2b0a      	cmp	r3, #10
 8000470:	d104      	bne.n	800047c <main+0x1cc>
              buffer0[fillIndex - 1] = '\0';
 8000472:	2200      	movs	r2, #0
 8000474:	882b      	ldrh	r3, [r5, #0]
 8000476:	18e3      	adds	r3, r4, r3
 8000478:	3b01      	subs	r3, #1
 800047a:	701a      	strb	r2, [r3, #0]
          buffer0[fillIndex] = '\0';
 800047c:	882b      	ldrh	r3, [r5, #0]
 800047e:	2500      	movs	r5, #0
 8000480:	b29b      	uxth	r3, r3
          char *end = buffer_str + strlen(buffer_str) - 1;
 8000482:	0020      	movs	r0, r4
          buffer0[fillIndex] = '\0';
 8000484:	54e5      	strb	r5, [r4, r3]
          char *end = buffer_str + strlen(buffer_str) - 1;
 8000486:	f7ff fe3f 	bl	8000108 <strlen>
 800048a:	3801      	subs	r0, #1
 800048c:	1820      	adds	r0, r4, r0
          while (end >= buffer_str && *end == ' ') *end-- = '\0';
 800048e:	42a0      	cmp	r0, r4
 8000490:	d222      	bcs.n	80004d8 <main+0x228>
          if (strlen(buffer_str) > 0) {
 8000492:	7823      	ldrb	r3, [r4, #0]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d002      	beq.n	800049e <main+0x1ee>
              while (*current_word != '\0') {
 8000498:	7823      	ldrb	r3, [r4, #0]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d123      	bne.n	80004e6 <main+0x236>
          memset(buffer0, 0, sizeof(buffer0));
 800049e:	2265      	movs	r2, #101	@ 0x65
 80004a0:	2100      	movs	r1, #0
 80004a2:	484b      	ldr	r0, [pc, #300]	@ (80005d0 <main+0x320>)
 80004a4:	f002 f886 	bl	80025b4 <memset>
  while (1) {
 80004a8:	e7a8      	b.n	80003fc <main+0x14c>
          else if (uart_status == HAL_TIMEOUT) {
 80004aa:	2803      	cmp	r0, #3
 80004ac:	d1d7      	bne.n	800045e <main+0x1ae>
              if (HAL_GetTick() - last_input_time >= screen_clear_timeout) {
 80004ae:	f000 fd73 	bl	8000f98 <HAL_GetTick>
 80004b2:	6823      	ldr	r3, [r4, #0]
 80004b4:	1ac0      	subs	r0, r0, r3
 80004b6:	4b49      	ldr	r3, [pc, #292]	@ (80005dc <main+0x32c>)
 80004b8:	4298      	cmp	r0, r3
 80004ba:	d9d0      	bls.n	800045e <main+0x1ae>
                  Paint_Clear(BLACK);
 80004bc:	2000      	movs	r0, #0
 80004be:	f000 fb7f 	bl	8000bc0 <Paint_Clear>
                  OLED_0in96_display(BlackImage);
 80004c2:	4b41      	ldr	r3, [pc, #260]	@ (80005c8 <main+0x318>)
                  x_pos = 10;
 80004c4:	260a      	movs	r6, #10
                  OLED_0in96_display(BlackImage);
 80004c6:	6818      	ldr	r0, [r3, #0]
 80004c8:	f000 fd00 	bl	8000ecc <OLED_0in96_display>
                  last_input_time = HAL_GetTick();
 80004cc:	f000 fd64 	bl	8000f98 <HAL_GetTick>
                  y_pos = 0;
 80004d0:	2300      	movs	r3, #0
                  last_input_time = HAL_GetTick();
 80004d2:	6020      	str	r0, [r4, #0]
                  y_pos = 0;
 80004d4:	9302      	str	r3, [sp, #8]
 80004d6:	e7c2      	b.n	800045e <main+0x1ae>
          while (end >= buffer_str && *end == ' ') *end-- = '\0';
 80004d8:	7803      	ldrb	r3, [r0, #0]
 80004da:	2b20      	cmp	r3, #32
 80004dc:	d1d9      	bne.n	8000492 <main+0x1e2>
 80004de:	3801      	subs	r0, #1
 80004e0:	7045      	strb	r5, [r0, #1]
 80004e2:	e7d4      	b.n	800048e <main+0x1de>
          			  current_word++;
 80004e4:	3401      	adds	r4, #1
          		  while (*current_word == ' ') {
 80004e6:	7823      	ldrb	r3, [r4, #0]
 80004e8:	2b20      	cmp	r3, #32
 80004ea:	d0fb      	beq.n	80004e4 <main+0x234>
          		  if (*current_word == '\0') {
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d0d6      	beq.n	800049e <main+0x1ee>
          		  char *word_end = strchr(current_word, ' ');
 80004f0:	2120      	movs	r1, #32
 80004f2:	0020      	movs	r0, r4
 80004f4:	f002 f866 	bl	80025c4 <strchr>
 80004f8:	1e05      	subs	r5, r0, #0
          		  if (word_end == NULL) {
 80004fa:	d103      	bne.n	8000504 <main+0x254>
          			  word_end = current_word + strlen(current_word);
 80004fc:	0020      	movs	r0, r4
 80004fe:	f7ff fe03 	bl	8000108 <strlen>
 8000502:	1825      	adds	r5, r4, r0
          		  *word_end = '\0';
 8000504:	2700      	movs	r7, #0
          		  char temp = *word_end;
 8000506:	782b      	ldrb	r3, [r5, #0]
          		  uint16_t word_width = strlen(current_word) * Font12.Width;
 8000508:	0020      	movs	r0, r4
          		  *word_end = '\0';
 800050a:	702f      	strb	r7, [r5, #0]
          		  char temp = *word_end;
 800050c:	9305      	str	r3, [sp, #20]
          		  uint16_t word_width = strlen(current_word) * Font12.Width;
 800050e:	f7ff fdfb 	bl	8000108 <strlen>
 8000512:	4b33      	ldr	r3, [pc, #204]	@ (80005e0 <main+0x330>)
 8000514:	9303      	str	r3, [sp, #12]
 8000516:	889b      	ldrh	r3, [r3, #4]
 8000518:	4358      	muls	r0, r3
 800051a:	b282      	uxth	r2, r0
 800051c:	9204      	str	r2, [sp, #16]
          		  uint16_t space_width = space_needed * Font12.Width;
 800051e:	2e0a      	cmp	r6, #10
 8000520:	d000      	beq.n	8000524 <main+0x274>
 8000522:	1c1f      	adds	r7, r3, #0
          		  uint16_t total_width = space_width + word_width;
 8000524:	9b04      	ldr	r3, [sp, #16]
 8000526:	19df      	adds	r7, r3, r7
          		  if (x_pos + total_width > OLED_0in96_HEIGHT) {
 8000528:	b2bb      	uxth	r3, r7
 800052a:	199b      	adds	r3, r3, r6
 800052c:	4f2d      	ldr	r7, [pc, #180]	@ (80005e4 <main+0x334>)
 800052e:	2b80      	cmp	r3, #128	@ 0x80
 8000530:	dd2d      	ble.n	800058e <main+0x2de>
          			  y_pos += Font12.Height;
 8000532:	9b03      	ldr	r3, [sp, #12]
 8000534:	9a02      	ldr	r2, [sp, #8]
 8000536:	88db      	ldrh	r3, [r3, #6]
 8000538:	260a      	movs	r6, #10
 800053a:	189a      	adds	r2, r3, r2
 800053c:	b292      	uxth	r2, r2
          			  if (y_pos + Font12.Height > OLED_0in96_WIDTH) {
 800053e:	18d3      	adds	r3, r2, r3
          			  y_pos += Font12.Height;
 8000540:	9202      	str	r2, [sp, #8]
          			  if (y_pos + Font12.Height > OLED_0in96_WIDTH) {
 8000542:	2b40      	cmp	r3, #64	@ 0x40
 8000544:	dd04      	ble.n	8000550 <main+0x2a0>
          				  Paint_Clear(BLACK);
 8000546:	2000      	movs	r0, #0
 8000548:	f000 fb3a 	bl	8000bc0 <Paint_Clear>
          				  y_pos = 0;
 800054c:	2300      	movs	r3, #0
 800054e:	9302      	str	r3, [sp, #8]
          		  Paint_DrawString_EN(x_pos, y_pos, current_word, &Font12, WHITE, BLACK);
 8000550:	2200      	movs	r2, #0
 8000552:	0030      	movs	r0, r6
 8000554:	4b22      	ldr	r3, [pc, #136]	@ (80005e0 <main+0x330>)
 8000556:	9201      	str	r2, [sp, #4]
 8000558:	9902      	ldr	r1, [sp, #8]
 800055a:	0022      	movs	r2, r4
 800055c:	9700      	str	r7, [sp, #0]
 800055e:	f000 fbd9 	bl	8000d14 <Paint_DrawString_EN>
          		  x_pos += word_width;
 8000562:	9b04      	ldr	r3, [sp, #16]
 8000564:	18f6      	adds	r6, r6, r3
          		  *word_end = temp;
 8000566:	9b05      	ldr	r3, [sp, #20]
          		  x_pos += word_width;
 8000568:	b2b6      	uxth	r6, r6
          		  *word_end = temp;
 800056a:	702b      	strb	r3, [r5, #0]
          		  while (*current_word == ' ') {
 800056c:	782b      	ldrb	r3, [r5, #0]
 800056e:	2b20      	cmp	r3, #32
 8000570:	d103      	bne.n	800057a <main+0x2ca>
          			  if (*current_word == '\0') break;
 8000572:	786b      	ldrb	r3, [r5, #1]
          			  current_word++;
 8000574:	3501      	adds	r5, #1
          			  if (*current_word == '\0') break;
 8000576:	2b00      	cmp	r3, #0
 8000578:	d1f8      	bne.n	800056c <main+0x2bc>
                  OLED_0in96_display(BlackImage);
 800057a:	4b13      	ldr	r3, [pc, #76]	@ (80005c8 <main+0x318>)
                  last_input_time = HAL_GetTick(); // Reset timer after drawing
 800057c:	002c      	movs	r4, r5
                  OLED_0in96_display(BlackImage);
 800057e:	6818      	ldr	r0, [r3, #0]
 8000580:	f000 fca4 	bl	8000ecc <OLED_0in96_display>
                  last_input_time = HAL_GetTick(); // Reset timer after drawing
 8000584:	f000 fd08 	bl	8000f98 <HAL_GetTick>
 8000588:	4b13      	ldr	r3, [pc, #76]	@ (80005d8 <main+0x328>)
 800058a:	6018      	str	r0, [r3, #0]
 800058c:	e784      	b.n	8000498 <main+0x1e8>
          		  if (space_needed) {
 800058e:	2e0a      	cmp	r6, #10
 8000590:	d0de      	beq.n	8000550 <main+0x2a0>
          			  Paint_DrawString_EN(x_pos, y_pos, " ", &Font12, WHITE, BLACK);
 8000592:	2300      	movs	r3, #0
 8000594:	0030      	movs	r0, r6
 8000596:	9301      	str	r3, [sp, #4]
 8000598:	4a13      	ldr	r2, [pc, #76]	@ (80005e8 <main+0x338>)
 800059a:	9b03      	ldr	r3, [sp, #12]
 800059c:	9902      	ldr	r1, [sp, #8]
 800059e:	9700      	str	r7, [sp, #0]
 80005a0:	f000 fbb8 	bl	8000d14 <Paint_DrawString_EN>
          			  x_pos += Font12.Width;
 80005a4:	9b03      	ldr	r3, [sp, #12]
 80005a6:	889b      	ldrh	r3, [r3, #4]
 80005a8:	18f6      	adds	r6, r6, r3
 80005aa:	b2b6      	uxth	r6, r6
 80005ac:	e7d0      	b.n	8000550 <main+0x2a0>
 80005ae:	46c0      	nop			@ (mov r8, r8)
 80005b0:	40021000 	.word	0x40021000
 80005b4:	48000400 	.word	0x48000400
 80005b8:	200001c8 	.word	0x200001c8
 80005bc:	40013000 	.word	0x40013000
 80005c0:	200000fc 	.word	0x200000fc
 80005c4:	40013800 	.word	0x40013800
 80005c8:	20000090 	.word	0x20000090
 80005cc:	08002a2c 	.word	0x08002a2c
 80005d0:	20000096 	.word	0x20000096
 80005d4:	20000094 	.word	0x20000094
 80005d8:	2000008c 	.word	0x2000008c
 80005dc:	00003a97 	.word	0x00003a97
 80005e0:	20000004 	.word	0x20000004
 80005e4:	0000ffff 	.word	0x0000ffff
 80005e8:	08002a51 	.word	0x08002a51

080005ec <Error_Handler>:
 80005ec:	b672      	cpsid	i
  while (1)
 80005ee:	e7fe      	b.n	80005ee <Error_Handler+0x2>

080005f0 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005f0:	2101      	movs	r1, #1
 80005f2:	4b0a      	ldr	r3, [pc, #40]	@ (800061c <HAL_MspInit+0x2c>)
{
 80005f4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005f6:	699a      	ldr	r2, [r3, #24]
 80005f8:	430a      	orrs	r2, r1
 80005fa:	619a      	str	r2, [r3, #24]
 80005fc:	699a      	ldr	r2, [r3, #24]
 80005fe:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000600:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000602:	9200      	str	r2, [sp, #0]
 8000604:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000606:	69da      	ldr	r2, [r3, #28]
 8000608:	0549      	lsls	r1, r1, #21
 800060a:	430a      	orrs	r2, r1
 800060c:	61da      	str	r2, [r3, #28]
 800060e:	69db      	ldr	r3, [r3, #28]
 8000610:	400b      	ands	r3, r1
 8000612:	9301      	str	r3, [sp, #4]
 8000614:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000616:	b002      	add	sp, #8
 8000618:	4770      	bx	lr
 800061a:	46c0      	nop			@ (mov r8, r8)
 800061c:	40021000 	.word	0x40021000

08000620 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	0006      	movs	r6, r0
 8000624:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	2214      	movs	r2, #20
 8000628:	2100      	movs	r1, #0
 800062a:	a803      	add	r0, sp, #12
 800062c:	f001 ffc2 	bl	80025b4 <memset>
  if(hi2s->Instance==SPI1)
 8000630:	4b27      	ldr	r3, [pc, #156]	@ (80006d0 <HAL_I2S_MspInit+0xb0>)
 8000632:	6832      	ldr	r2, [r6, #0]
 8000634:	429a      	cmp	r2, r3
 8000636:	d148      	bne.n	80006ca <HAL_I2S_MspInit+0xaa>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000638:	2180      	movs	r1, #128	@ 0x80
 800063a:	4b26      	ldr	r3, [pc, #152]	@ (80006d4 <HAL_I2S_MspInit+0xb4>)
 800063c:	0149      	lsls	r1, r1, #5
 800063e:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000640:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000642:	430a      	orrs	r2, r1
 8000644:	619a      	str	r2, [r3, #24]
 8000646:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000648:	2402      	movs	r4, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
 800064a:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800064c:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_SPI1_CLK_ENABLE();
 800064e:	9200      	str	r2, [sp, #0]
 8000650:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	695a      	ldr	r2, [r3, #20]
 8000654:	0289      	lsls	r1, r1, #10
 8000656:	430a      	orrs	r2, r1
 8000658:	615a      	str	r2, [r3, #20]
 800065a:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800065e:	400a      	ands	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000660:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	9201      	str	r2, [sp, #4]
 8000664:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000666:	695a      	ldr	r2, [r3, #20]
 8000668:	02c9      	lsls	r1, r1, #11
 800066a:	430a      	orrs	r2, r1
 800066c:	615a      	str	r2, [r3, #20]
 800066e:	695b      	ldr	r3, [r3, #20]

    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2500      	movs	r5, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000672:	400b      	ands	r3, r1
 8000674:	9302      	str	r3, [sp, #8]
 8000676:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 8000678:	2390      	movs	r3, #144	@ 0x90
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 800067c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800067e:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000680:	f000 fd62 	bl	8001148 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000684:	2308      	movs	r3, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000686:	4814      	ldr	r0, [pc, #80]	@ (80006d8 <HAL_I2S_MspInit+0xb8>)
 8000688:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800068a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000690:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000692:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000694:	f000 fd58 	bl	8001148 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000698:	4c10      	ldr	r4, [pc, #64]	@ (80006dc <HAL_I2S_MspInit+0xbc>)
 800069a:	4b11      	ldr	r3, [pc, #68]	@ (80006e0 <HAL_I2S_MspInit+0xc0>)
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800069c:	0020      	movs	r0, r4
    hdma_spi1_rx.Instance = DMA1_Channel2;
 800069e:	6023      	str	r3, [r4, #0]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80006a0:	2380      	movs	r3, #128	@ 0x80
 80006a2:	60e3      	str	r3, [r4, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80006a4:	3381      	adds	r3, #129	@ 0x81
 80006a6:	33ff      	adds	r3, #255	@ 0xff
 80006a8:	6123      	str	r3, [r4, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80006aa:	2380      	movs	r3, #128	@ 0x80
 80006ac:	011b      	lsls	r3, r3, #4
 80006ae:	6163      	str	r3, [r4, #20]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80006b0:	2320      	movs	r3, #32
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006b2:	6065      	str	r5, [r4, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006b4:	60a5      	str	r5, [r4, #8]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80006b6:	61a3      	str	r3, [r4, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80006b8:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80006ba:	f000 fcc9 	bl	8001050 <HAL_DMA_Init>
 80006be:	42a8      	cmp	r0, r5
 80006c0:	d001      	beq.n	80006c6 <HAL_I2S_MspInit+0xa6>
    {
      Error_Handler();
 80006c2:	f7ff ff93 	bl	80005ec <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi1_rx);
 80006c6:	6334      	str	r4, [r6, #48]	@ 0x30
 80006c8:	6266      	str	r6, [r4, #36]	@ 0x24

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80006ca:	b008      	add	sp, #32
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	46c0      	nop			@ (mov r8, r8)
 80006d0:	40013000 	.word	0x40013000
 80006d4:	40021000 	.word	0x40021000
 80006d8:	48000400 	.word	0x48000400
 80006dc:	20000184 	.word	0x20000184
 80006e0:	4002001c 	.word	0x4002001c

080006e4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006e4:	b510      	push	{r4, lr}
 80006e6:	0004      	movs	r4, r0
 80006e8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	2214      	movs	r2, #20
 80006ec:	2100      	movs	r1, #0
 80006ee:	a803      	add	r0, sp, #12
 80006f0:	f001 ff60 	bl	80025b4 <memset>
  if(huart->Instance==USART1)
 80006f4:	4b13      	ldr	r3, [pc, #76]	@ (8000744 <HAL_UART_MspInit+0x60>)
 80006f6:	6822      	ldr	r2, [r4, #0]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d120      	bne.n	800073e <HAL_UART_MspInit+0x5a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006fc:	2180      	movs	r1, #128	@ 0x80
 80006fe:	4b12      	ldr	r3, [pc, #72]	@ (8000748 <HAL_UART_MspInit+0x64>)
 8000700:	01c9      	lsls	r1, r1, #7
 8000702:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000704:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_USART1_CLK_ENABLE();
 8000706:	430a      	orrs	r2, r1
 8000708:	619a      	str	r2, [r3, #24]
 800070a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART1_CLK_ENABLE();
 800070e:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000710:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8000712:	9201      	str	r2, [sp, #4]
 8000714:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	695a      	ldr	r2, [r3, #20]
 8000718:	0289      	lsls	r1, r1, #10
 800071a:	430a      	orrs	r2, r1
 800071c:	615a      	str	r2, [r3, #20]
 800071e:	695b      	ldr	r3, [r3, #20]
 8000720:	400b      	ands	r3, r1
 8000722:	9302      	str	r3, [sp, #8]
 8000724:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000726:	23c0      	movs	r3, #192	@ 0xc0
 8000728:	00db      	lsls	r3, r3, #3
 800072a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072c:	2302      	movs	r3, #2
 800072e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000730:	3301      	adds	r3, #1
 8000732:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000734:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000736:	3b02      	subs	r3, #2
 8000738:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073a:	f000 fd05 	bl	8001148 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800073e:	b008      	add	sp, #32
 8000740:	bd10      	pop	{r4, pc}
 8000742:	46c0      	nop			@ (mov r8, r8)
 8000744:	40013800 	.word	0x40013800
 8000748:	40021000 	.word	0x40021000

0800074c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800074c:	e7fe      	b.n	800074c <NMI_Handler>

0800074e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800074e:	e7fe      	b.n	800074e <HardFault_Handler>

08000750 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000750:	4770      	bx	lr

08000752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000752:	4770      	bx	lr

08000754 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000754:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000756:	f000 fc13 	bl	8000f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800075a:	bd10      	pop	{r4, pc}

0800075c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800075c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800075e:	4802      	ldr	r0, [pc, #8]	@ (8000768 <DMA1_Channel2_3_IRQHandler+0xc>)
 8000760:	f000 fca8 	bl	80010b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000764:	bd10      	pop	{r4, pc}
 8000766:	46c0      	nop			@ (mov r8, r8)
 8000768:	20000184 	.word	0x20000184

0800076c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800076c:	b570      	push	{r4, r5, r6, lr}
 800076e:	000e      	movs	r6, r1
 8000770:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000772:	2500      	movs	r5, #0
 8000774:	42a5      	cmp	r5, r4
 8000776:	db01      	blt.n	800077c <_read+0x10>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8000778:	0020      	movs	r0, r4
 800077a:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 800077c:	e000      	b.n	8000780 <_read+0x14>
 800077e:	bf00      	nop
 8000780:	5570      	strb	r0, [r6, r5]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000782:	3501      	adds	r5, #1
 8000784:	e7f6      	b.n	8000774 <_read+0x8>

08000786 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000786:	b570      	push	{r4, r5, r6, lr}
 8000788:	000e      	movs	r6, r1
 800078a:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800078c:	2500      	movs	r5, #0
 800078e:	42a5      	cmp	r5, r4
 8000790:	db01      	blt.n	8000796 <_write+0x10>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8000792:	0020      	movs	r0, r4
 8000794:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8000796:	5d70      	ldrb	r0, [r6, r5]
 8000798:	e000      	b.n	800079c <_write+0x16>
 800079a:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800079c:	3501      	adds	r5, #1
 800079e:	e7f6      	b.n	800078e <_write+0x8>

080007a0 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 80007a0:	2001      	movs	r0, #1
}
 80007a2:	4240      	negs	r0, r0
 80007a4:	4770      	bx	lr

080007a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80007a6:	2380      	movs	r3, #128	@ 0x80
 80007a8:	019b      	lsls	r3, r3, #6
  return 0;
}
 80007aa:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 80007ac:	604b      	str	r3, [r1, #4]
}
 80007ae:	4770      	bx	lr

080007b0 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80007b0:	2001      	movs	r0, #1
 80007b2:	4770      	bx	lr

080007b4 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80007b4:	2000      	movs	r0, #0
 80007b6:	4770      	bx	lr

080007b8 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007b8:	490b      	ldr	r1, [pc, #44]	@ (80007e8 <_sbrk+0x30>)
 80007ba:	4a0c      	ldr	r2, [pc, #48]	@ (80007ec <_sbrk+0x34>)
{
 80007bc:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007be:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007c0:	490b      	ldr	r1, [pc, #44]	@ (80007f0 <_sbrk+0x38>)
{
 80007c2:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80007c4:	6808      	ldr	r0, [r1, #0]
 80007c6:	2800      	cmp	r0, #0
 80007c8:	d101      	bne.n	80007ce <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 80007ca:	480a      	ldr	r0, [pc, #40]	@ (80007f4 <_sbrk+0x3c>)
 80007cc:	6008      	str	r0, [r1, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007ce:	6808      	ldr	r0, [r1, #0]
 80007d0:	18c3      	adds	r3, r0, r3
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d906      	bls.n	80007e4 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 80007d6:	f001 ff63 	bl	80026a0 <__errno>
 80007da:	230c      	movs	r3, #12
 80007dc:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80007de:	2001      	movs	r0, #1
 80007e0:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80007e2:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80007e4:	600b      	str	r3, [r1, #0]
  return (void *)prev_heap_end;
 80007e6:	e7fc      	b.n	80007e2 <_sbrk+0x2a>
 80007e8:	00000400 	.word	0x00000400
 80007ec:	20001800 	.word	0x20001800
 80007f0:	20000204 	.word	0x20000204
 80007f4:	20000370 	.word	0x20000370

080007f8 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80007f8:	4770      	bx	lr
	...

080007fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007fc:	4813      	ldr	r0, [pc, #76]	@ (800084c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007fe:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000800:	f7ff fffa 	bl	80007f8 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000804:	4812      	ldr	r0, [pc, #72]	@ (8000850 <LoopForever+0x6>)
    LDR R1, [R0]
 8000806:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000808:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800080a:	4a12      	ldr	r2, [pc, #72]	@ (8000854 <LoopForever+0xa>)
    CMP R1, R2
 800080c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800080e:	d105      	bne.n	800081c <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000810:	4811      	ldr	r0, [pc, #68]	@ (8000858 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000812:	4912      	ldr	r1, [pc, #72]	@ (800085c <LoopForever+0x12>)
    STR R1, [R0]
 8000814:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000816:	4812      	ldr	r0, [pc, #72]	@ (8000860 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000818:	4912      	ldr	r1, [pc, #72]	@ (8000864 <LoopForever+0x1a>)
    STR R1, [R0]
 800081a:	6001      	str	r1, [r0, #0]

0800081c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800081c:	4812      	ldr	r0, [pc, #72]	@ (8000868 <LoopForever+0x1e>)
  ldr r1, =_edata
 800081e:	4913      	ldr	r1, [pc, #76]	@ (800086c <LoopForever+0x22>)
  ldr r2, =_sidata
 8000820:	4a13      	ldr	r2, [pc, #76]	@ (8000870 <LoopForever+0x26>)
  movs r3, #0
 8000822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000824:	e002      	b.n	800082c <LoopCopyDataInit>

08000826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800082a:	3304      	adds	r3, #4

0800082c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800082c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800082e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000830:	d3f9      	bcc.n	8000826 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000832:	4a10      	ldr	r2, [pc, #64]	@ (8000874 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000834:	4c10      	ldr	r4, [pc, #64]	@ (8000878 <LoopForever+0x2e>)
  movs r3, #0
 8000836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000838:	e001      	b.n	800083e <LoopFillZerobss>

0800083a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800083a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800083c:	3204      	adds	r2, #4

0800083e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800083e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000840:	d3fb      	bcc.n	800083a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000842:	f001 ff33 	bl	80026ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000846:	f7ff fd33 	bl	80002b0 <main>

0800084a <LoopForever>:

LoopForever:
    b LoopForever
 800084a:	e7fe      	b.n	800084a <LoopForever>
  ldr   r0, =_estack
 800084c:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000850:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000854:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000858:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 800085c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000860:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000864:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000868:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800086c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000870:	08002fc0 	.word	0x08002fc0
  ldr r2, =_sbss
 8000874:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000878:	20000370 	.word	0x20000370

0800087c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800087c:	e7fe      	b.n	800087c <ADC1_IRQHandler>
	...

08000880 <System_Init>:
function:	System Init
note:
	Initialize the communication method
********************************************************************************/
uint8_t System_Init(void)
{
 8000880:	b510      	push	{r4, lr}
	printf("USE_IIC\r\n");
	OLED_CS_0;
	OLED_DC_1;
	//DC = 0,1 >> Address = 0x3c,0x3d 
#elif USE_IIC_SOFT
	printf("USEI_IIC_SOFT\r\n");
 8000882:	4809      	ldr	r0, [pc, #36]	@ (80008a8 <System_Init+0x28>)
 8000884:	f001 fda0 	bl	80023c8 <puts>
	OLED_CS_0;
 8000888:	2090      	movs	r0, #144	@ 0x90
 800088a:	2200      	movs	r2, #0
 800088c:	2120      	movs	r1, #32
 800088e:	05c0      	lsls	r0, r0, #23
 8000890:	f000 fd12 	bl	80012b8 <HAL_GPIO_WritePin>
	OLED_DC_1;
 8000894:	2201      	movs	r2, #1
 8000896:	4805      	ldr	r0, [pc, #20]	@ (80008ac <System_Init+0x2c>)
 8000898:	0011      	movs	r1, r2
 800089a:	f000 fd0d 	bl	80012b8 <HAL_GPIO_WritePin>
	iic_init();
 800089e:	f000 f80d 	bl	80008bc <iic_init>
	
#endif
  return 0;
}
 80008a2:	2000      	movs	r0, #0
 80008a4:	bd10      	pop	{r4, pc}
 80008a6:	46c0      	nop			@ (mov r8, r8)
 80008a8:	08002a53 	.word	0x08002a53
 80008ac:	48000400 	.word	0x48000400

080008b0 <Driver_Delay_ms>:
note:
	Driver_Delay_ms(xms) : Delay x ms
	Driver_Delay_us(xus) : Delay x us
********************************************************************************/
void Driver_Delay_ms(uint32_t xms)
{
 80008b0:	b510      	push	{r4, lr}
    HAL_Delay(xms);
 80008b2:	f000 fb77 	bl	8000fa4 <HAL_Delay>
}
 80008b6:	bd10      	pop	{r4, pc}

080008b8 <Driver_Delay_us>:

void Driver_Delay_us(uint32_t xus)
{
    int j;
    for(j=xus; j > 0; j--);
}
 80008b8:	4770      	bx	lr
	...

080008bc <iic_init>:
#include "Soft_IIC.h"
#include "stdio.h"
void iic_init(void)
{
 80008bc:	b510      	push	{r4, lr}
	__IIC_SCL_SET();
 80008be:	4c07      	ldr	r4, [pc, #28]	@ (80008dc <iic_init+0x20>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	0020      	movs	r0, r4
 80008c4:	2110      	movs	r1, #16
 80008c6:	f000 fcf7 	bl	80012b8 <HAL_GPIO_WritePin>
	__IIC_SDA_SET();
 80008ca:	2201      	movs	r2, #1
 80008cc:	2180      	movs	r1, #128	@ 0x80
 80008ce:	0020      	movs	r0, r4
 80008d0:	f000 fcf2 	bl	80012b8 <HAL_GPIO_WritePin>
	Driver_Delay_ms(1);
 80008d4:	2001      	movs	r0, #1
 80008d6:	f7ff ffeb 	bl	80008b0 <Driver_Delay_ms>
}
 80008da:	bd10      	pop	{r4, pc}
 80008dc:	48000400 	.word	0x48000400

080008e0 <iic_start>:

void iic_start(void)
{
 80008e0:	b570      	push	{r4, r5, r6, lr}
	__IIC_SDA_OUT();
 80008e2:	2501      	movs	r5, #1
 80008e4:	2680      	movs	r6, #128	@ 0x80
 80008e6:	4c14      	ldr	r4, [pc, #80]	@ (8000938 <iic_start+0x58>)
{
 80008e8:	b086      	sub	sp, #24
	__IIC_SDA_OUT();
 80008ea:	0020      	movs	r0, r4
 80008ec:	a901      	add	r1, sp, #4
 80008ee:	9601      	str	r6, [sp, #4]
 80008f0:	9502      	str	r5, [sp, #8]
 80008f2:	9503      	str	r5, [sp, #12]
 80008f4:	9504      	str	r5, [sp, #16]
 80008f6:	f000 fc27 	bl	8001148 <HAL_GPIO_Init>
	__IIC_SDA_SET();
 80008fa:	002a      	movs	r2, r5
 80008fc:	0031      	movs	r1, r6
 80008fe:	0020      	movs	r0, r4
 8000900:	f000 fcda 	bl	80012b8 <HAL_GPIO_WritePin>
	__IIC_SCL_SET();//
 8000904:	002a      	movs	r2, r5
 8000906:	2110      	movs	r1, #16
 8000908:	0020      	movs	r0, r4
 800090a:	f000 fcd5 	bl	80012b8 <HAL_GPIO_WritePin>
	Driver_Delay_us(10);
 800090e:	200a      	movs	r0, #10
 8000910:	f7ff ffd2 	bl	80008b8 <Driver_Delay_us>
	__IIC_SDA_CLR();
 8000914:	0031      	movs	r1, r6
 8000916:	2200      	movs	r2, #0
 8000918:	0020      	movs	r0, r4
 800091a:	f000 fccd 	bl	80012b8 <HAL_GPIO_WritePin>
	Driver_Delay_us(10);
 800091e:	200a      	movs	r0, #10
 8000920:	f7ff ffca 	bl	80008b8 <Driver_Delay_us>
	__IIC_SCL_CLR();
 8000924:	2200      	movs	r2, #0
 8000926:	2110      	movs	r1, #16
 8000928:	0020      	movs	r0, r4
 800092a:	f000 fcc5 	bl	80012b8 <HAL_GPIO_WritePin>
	Driver_Delay_us(10);
 800092e:	200a      	movs	r0, #10
 8000930:	f7ff ffc2 	bl	80008b8 <Driver_Delay_us>
}
 8000934:	b006      	add	sp, #24
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	48000400 	.word	0x48000400

0800093c <iic_stop>:

void iic_stop(void)
{
 800093c:	b510      	push	{r4, lr}
	__IIC_SCL_CLR();
 800093e:	4c0f      	ldr	r4, [pc, #60]	@ (800097c <iic_stop+0x40>)
 8000940:	2200      	movs	r2, #0
 8000942:	0020      	movs	r0, r4
 8000944:	2110      	movs	r1, #16
 8000946:	f000 fcb7 	bl	80012b8 <HAL_GPIO_WritePin>
	__IIC_SDA_CLR();
 800094a:	2200      	movs	r2, #0
 800094c:	2180      	movs	r1, #128	@ 0x80
 800094e:	0020      	movs	r0, r4
 8000950:	f000 fcb2 	bl	80012b8 <HAL_GPIO_WritePin>
	Driver_Delay_us(10);
 8000954:	200a      	movs	r0, #10
 8000956:	f7ff ffaf 	bl	80008b8 <Driver_Delay_us>
	__IIC_SCL_SET();
 800095a:	2201      	movs	r2, #1
 800095c:	2110      	movs	r1, #16
 800095e:	0020      	movs	r0, r4
 8000960:	f000 fcaa 	bl	80012b8 <HAL_GPIO_WritePin>
	Driver_Delay_us(10);
 8000964:	200a      	movs	r0, #10
 8000966:	f7ff ffa7 	bl	80008b8 <Driver_Delay_us>
	__IIC_SDA_SET();
 800096a:	2201      	movs	r2, #1
 800096c:	2180      	movs	r1, #128	@ 0x80
 800096e:	0020      	movs	r0, r4
 8000970:	f000 fca2 	bl	80012b8 <HAL_GPIO_WritePin>
	Driver_Delay_us(10);
 8000974:	200a      	movs	r0, #10
 8000976:	f7ff ff9f 	bl	80008b8 <Driver_Delay_us>
}
 800097a:	bd10      	pop	{r4, pc}
 800097c:	48000400 	.word	0x48000400

08000980 <iic_wait_for_ack>:

int iic_wait_for_ack(void)
{
 8000980:	b510      	push	{r4, lr}
	uint8_t chTimeOut = 0;
	
	__IIC_SCL_CLR();
 8000982:	4c0e      	ldr	r4, [pc, #56]	@ (80009bc <iic_wait_for_ack+0x3c>)
 8000984:	2200      	movs	r2, #0
 8000986:	2110      	movs	r1, #16
 8000988:	0020      	movs	r0, r4
 800098a:	f000 fc95 	bl	80012b8 <HAL_GPIO_WritePin>
	Driver_Delay_us(10);
 800098e:	200a      	movs	r0, #10
 8000990:	f7ff ff92 	bl	80008b8 <Driver_Delay_us>
	__IIC_SCL_SET();
 8000994:	2201      	movs	r2, #1
 8000996:	0020      	movs	r0, r4
 8000998:	2110      	movs	r1, #16
 800099a:	f000 fc8d 	bl	80012b8 <HAL_GPIO_WritePin>
	
	while ((!(__IIC_SDA_READ())) && (chTimeOut ++)) {
 800099e:	2180      	movs	r1, #128	@ 0x80
 80009a0:	0020      	movs	r0, r4
 80009a2:	f000 fc83 	bl	80012ac <HAL_GPIO_ReadPin>
			iic_stop();
			printf("timeout");
			return -1;
		}
	}
	__IIC_SCL_CLR();
 80009a6:	2200      	movs	r2, #0
 80009a8:	2110      	movs	r1, #16
 80009aa:	0020      	movs	r0, r4
 80009ac:	f000 fc84 	bl	80012b8 <HAL_GPIO_WritePin>
	Driver_Delay_us(10);
 80009b0:	200a      	movs	r0, #10
 80009b2:	f7ff ff81 	bl	80008b8 <Driver_Delay_us>
	
	return 0;
}
 80009b6:	2000      	movs	r0, #0
 80009b8:	bd10      	pop	{r4, pc}
 80009ba:	46c0      	nop			@ (mov r8, r8)
 80009bc:	48000400 	.word	0x48000400

080009c0 <iic_write_byte>:

void iic_write_byte(uint8_t chData)
{
	uint8_t i;
	
	__IIC_SDA_OUT();
 80009c0:	2380      	movs	r3, #128	@ 0x80
{
 80009c2:	b570      	push	{r4, r5, r6, lr}
 80009c4:	b086      	sub	sp, #24
	__IIC_SDA_OUT();
 80009c6:	9301      	str	r3, [sp, #4]
{
 80009c8:	0004      	movs	r4, r0
	__IIC_SDA_OUT();
 80009ca:	3b7f      	subs	r3, #127	@ 0x7f
 80009cc:	4816      	ldr	r0, [pc, #88]	@ (8000a28 <iic_write_byte+0x68>)
 80009ce:	a901      	add	r1, sp, #4
 80009d0:	9302      	str	r3, [sp, #8]
 80009d2:	9303      	str	r3, [sp, #12]
 80009d4:	9304      	str	r3, [sp, #16]
 80009d6:	2508      	movs	r5, #8
 80009d8:	f000 fbb6 	bl	8001148 <HAL_GPIO_Init>
	for(i = 0; i < 8; i ++) {
		__IIC_SCL_CLR();
		Driver_Delay_us(10);
 80009dc:	260a      	movs	r6, #10
		__IIC_SCL_CLR();
 80009de:	2200      	movs	r2, #0
 80009e0:	2110      	movs	r1, #16
 80009e2:	4811      	ldr	r0, [pc, #68]	@ (8000a28 <iic_write_byte+0x68>)
 80009e4:	f000 fc68 	bl	80012b8 <HAL_GPIO_WritePin>
		Driver_Delay_us(10);
 80009e8:	0030      	movs	r0, r6
 80009ea:	f7ff ff65 	bl	80008b8 <Driver_Delay_us>
		if(chData & 0x80) {
 80009ee:	b263      	sxtb	r3, r4
			__IIC_SDA_SET();
 80009f0:	2201      	movs	r2, #1
		if(chData & 0x80) {
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	db00      	blt.n	80009f8 <iic_write_byte+0x38>
		} else {
			__IIC_SDA_CLR();
 80009f6:	2200      	movs	r2, #0
 80009f8:	2180      	movs	r1, #128	@ 0x80
 80009fa:	480b      	ldr	r0, [pc, #44]	@ (8000a28 <iic_write_byte+0x68>)
 80009fc:	f000 fc5c 	bl	80012b8 <HAL_GPIO_WritePin>
		}
		chData <<= 1;
		Driver_Delay_us(10);
 8000a00:	0030      	movs	r0, r6
 8000a02:	f7ff ff59 	bl	80008b8 <Driver_Delay_us>
	for(i = 0; i < 8; i ++) {
 8000a06:	3d01      	subs	r5, #1
		__IIC_SCL_SET();
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2110      	movs	r1, #16
 8000a0c:	4806      	ldr	r0, [pc, #24]	@ (8000a28 <iic_write_byte+0x68>)
 8000a0e:	f000 fc53 	bl	80012b8 <HAL_GPIO_WritePin>
		chData <<= 1;
 8000a12:	0064      	lsls	r4, r4, #1
		Driver_Delay_us(10);
 8000a14:	0030      	movs	r0, r6
	for(i = 0; i < 8; i ++) {
 8000a16:	b2ed      	uxtb	r5, r5
		Driver_Delay_us(10);
 8000a18:	f7ff ff4e 	bl	80008b8 <Driver_Delay_us>
		chData <<= 1;
 8000a1c:	b2e4      	uxtb	r4, r4
	for(i = 0; i < 8; i ++) {
 8000a1e:	2d00      	cmp	r5, #0
 8000a20:	d1dd      	bne.n	80009de <iic_write_byte+0x1e>
	}
}
 8000a22:	b006      	add	sp, #24
 8000a24:	bd70      	pop	{r4, r5, r6, pc}
 8000a26:	46c0      	nop			@ (mov r8, r8)
 8000a28:	48000400 	.word	0x48000400

08000a2c <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8000a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a2e:	ac05      	add	r4, sp, #20
 8000a30:	8824      	ldrh	r4, [r4, #0]
    Paint.WidthMemory = Width;
    Paint.HeightMemory = Height;
    Paint.Color = Color;    
		Paint.Scale = 2;
		
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 8000a32:	08cd      	lsrs	r5, r1, #3
{
 8000a34:	46a4      	mov	ip, r4
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 8000a36:	074c      	lsls	r4, r1, #29
 8000a38:	d000      	beq.n	8000a3c <Paint_NewImage+0x10>
 8000a3a:	3501      	adds	r5, #1
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
    Paint.Mirror = MIRROR_NONE;
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8000a3c:	000f      	movs	r7, r1
 8000a3e:	0016      	movs	r6, r2
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d003      	beq.n	8000a4c <Paint_NewImage+0x20>
 8000a44:	2bb4      	cmp	r3, #180	@ 0xb4
 8000a46:	d001      	beq.n	8000a4c <Paint_NewImage+0x20>
 8000a48:	0017      	movs	r7, r2
 8000a4a:	000e      	movs	r6, r1
    Paint.Image = image;
 8000a4c:	4c07      	ldr	r4, [pc, #28]	@ (8000a6c <Paint_NewImage+0x40>)
    Paint.WidthMemory = Width;
 8000a4e:	8121      	strh	r1, [r4, #8]
    Paint.Color = Color;    
 8000a50:	4661      	mov	r1, ip
    Paint.Rotate = Rotate;
 8000a52:	81e3      	strh	r3, [r4, #14]
    Paint.Color = Color;    
 8000a54:	81a1      	strh	r1, [r4, #12]
    Paint.Mirror = MIRROR_NONE;
 8000a56:	2300      	movs	r3, #0
		Paint.Scale = 2;
 8000a58:	2102      	movs	r1, #2
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 8000a5a:	8265      	strh	r5, [r4, #18]
        Paint.Width = Width;
 8000a5c:	80a7      	strh	r7, [r4, #4]
        Paint.Height = Height;
 8000a5e:	80e6      	strh	r6, [r4, #6]
    Paint.Image = image;
 8000a60:	6020      	str	r0, [r4, #0]
    Paint.HeightMemory = Height;
 8000a62:	8162      	strh	r2, [r4, #10]
		Paint.Scale = 2;
 8000a64:	82e1      	strh	r1, [r4, #22]
    Paint.HeightByte = Height;    
 8000a66:	82a2      	strh	r2, [r4, #20]
    Paint.Mirror = MIRROR_NONE;
 8000a68:	8223      	strh	r3, [r4, #16]
    } else {
        Paint.Width = Height;
        Paint.Height = Width;
    }
}
 8000a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a6c:	20000208 	.word	0x20000208

08000a70 <Paint_SelectImage>:
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
    Paint.Image = image;
 8000a70:	4b01      	ldr	r3, [pc, #4]	@ (8000a78 <Paint_SelectImage+0x8>)
 8000a72:	6018      	str	r0, [r3, #0]
}
 8000a74:	4770      	bx	lr
 8000a76:	46c0      	nop			@ (mov r8, r8)
 8000a78:	20000208 	.word	0x20000208

08000a7c <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8000a7c:	b570      	push	{r4, r5, r6, lr}
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8000a7e:	4c4e      	ldr	r4, [pc, #312]	@ (8000bb8 <Paint_SetPixel+0x13c>)
{
 8000a80:	0003      	movs	r3, r0
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8000a82:	88a0      	ldrh	r0, [r4, #4]
 8000a84:	4298      	cmp	r0, r3
 8000a86:	d302      	bcc.n	8000a8e <Paint_SetPixel+0x12>
 8000a88:	88e0      	ldrh	r0, [r4, #6]
 8000a8a:	4288      	cmp	r0, r1
 8000a8c:	d203      	bcs.n	8000a96 <Paint_SetPixel+0x1a>
        Debug("Exceeding display boundaries\r\n");
 8000a8e:	484b      	ldr	r0, [pc, #300]	@ (8000bbc <Paint_SetPixel+0x140>)
 8000a90:	f001 fc9a 	bl	80023c8 <puts>
    }else if(Paint.Scale == 65) {
        UDOUBLE Addr = X*2 + Y*Paint.WidthByte;
        Paint.Image[Addr] = 0xff & (Color>>8);
        Paint.Image[Addr+1] = 0xff & Color;
    }
}
 8000a94:	bd70      	pop	{r4, r5, r6, pc}
    switch(Paint.Rotate) {
 8000a96:	89e0      	ldrh	r0, [r4, #14]
 8000a98:	28b4      	cmp	r0, #180	@ 0xb4
 8000a9a:	d01a      	beq.n	8000ad2 <Paint_SetPixel+0x56>
 8000a9c:	d80f      	bhi.n	8000abe <Paint_SetPixel+0x42>
 8000a9e:	2800      	cmp	r0, #0
 8000aa0:	d006      	beq.n	8000ab0 <Paint_SetPixel+0x34>
 8000aa2:	285a      	cmp	r0, #90	@ 0x5a
 8000aa4:	d1f6      	bne.n	8000a94 <Paint_SetPixel+0x18>
        X = Paint.WidthMemory - Ypoint - 1;
 8000aa6:	8920      	ldrh	r0, [r4, #8]
 8000aa8:	3801      	subs	r0, #1
 8000aaa:	1a40      	subs	r0, r0, r1
        Y = Xpoint;
 8000aac:	0019      	movs	r1, r3
        X = Paint.WidthMemory - Ypoint - 1;
 8000aae:	b283      	uxth	r3, r0
    switch(Paint.Mirror) {
 8000ab0:	8a20      	ldrh	r0, [r4, #16]
 8000ab2:	2803      	cmp	r0, #3
 8000ab4:	d8ee      	bhi.n	8000a94 <Paint_SetPixel+0x18>
 8000ab6:	f7ff fb2f 	bl	8000118 <__gnu_thumb1_case_uqi>
 8000aba:	1519      	.short	0x1519
 8000abc:	3539      	.short	0x3539
    switch(Paint.Rotate) {
 8000abe:	2587      	movs	r5, #135	@ 0x87
 8000ac0:	006d      	lsls	r5, r5, #1
 8000ac2:	42a8      	cmp	r0, r5
 8000ac4:	d1e6      	bne.n	8000a94 <Paint_SetPixel+0x18>
        Y = Paint.HeightMemory - Xpoint - 1;
 8000ac6:	8960      	ldrh	r0, [r4, #10]
 8000ac8:	3801      	subs	r0, #1
 8000aca:	1ac0      	subs	r0, r0, r3
        X = Ypoint;
 8000acc:	000b      	movs	r3, r1
        Y = Paint.HeightMemory - Xpoint - 1;
 8000ace:	b281      	uxth	r1, r0
        break;
 8000ad0:	e7ee      	b.n	8000ab0 <Paint_SetPixel+0x34>
        X = Paint.WidthMemory - Xpoint - 1;
 8000ad2:	8920      	ldrh	r0, [r4, #8]
 8000ad4:	3801      	subs	r0, #1
 8000ad6:	1ac3      	subs	r3, r0, r3
        Y = Paint.HeightMemory - Ypoint - 1;
 8000ad8:	8960      	ldrh	r0, [r4, #10]
        X = Paint.WidthMemory - Xpoint - 1;
 8000ada:	b29b      	uxth	r3, r3
        Y = Paint.HeightMemory - Ypoint - 1;
 8000adc:	3801      	subs	r0, #1
 8000ade:	1a41      	subs	r1, r0, r1
 8000ae0:	b289      	uxth	r1, r1
        break;
 8000ae2:	e7e5      	b.n	8000ab0 <Paint_SetPixel+0x34>
        X = Paint.WidthMemory - X - 1;
 8000ae4:	8920      	ldrh	r0, [r4, #8]
 8000ae6:	3801      	subs	r0, #1
 8000ae8:	1ac3      	subs	r3, r0, r3
 8000aea:	b29b      	uxth	r3, r3
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8000aec:	8920      	ldrh	r0, [r4, #8]
 8000aee:	4298      	cmp	r0, r3
 8000af0:	d3cd      	bcc.n	8000a8e <Paint_SetPixel+0x12>
 8000af2:	8960      	ldrh	r0, [r4, #10]
 8000af4:	4288      	cmp	r0, r1
 8000af6:	d3ca      	bcc.n	8000a8e <Paint_SetPixel+0x12>
    if(Paint.Scale == 2){
 8000af8:	8ae0      	ldrh	r0, [r4, #22]
 8000afa:	2802      	cmp	r0, #2
 8000afc:	d120      	bne.n	8000b40 <Paint_SetPixel+0xc4>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 8000afe:	8a60      	ldrh	r0, [r4, #18]
        UBYTE Rdata = Paint.Image[Addr];
 8000b00:	6824      	ldr	r4, [r4, #0]
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 8000b02:	4341      	muls	r1, r0
 8000b04:	08d8      	lsrs	r0, r3, #3
 8000b06:	b280      	uxth	r0, r0
 8000b08:	1809      	adds	r1, r1, r0
        UBYTE Rdata = Paint.Image[Addr];
 8000b0a:	1860      	adds	r0, r4, r1
 8000b0c:	5c61      	ldrb	r1, [r4, r1]
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 8000b0e:	2407      	movs	r4, #7
        if((Color & 0Xff) == BLACK)
 8000b10:	b2d2      	uxtb	r2, r2
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 8000b12:	401c      	ands	r4, r3
        if((Color & 0Xff) == BLACK)
 8000b14:	2a00      	cmp	r2, #0
 8000b16:	d10e      	bne.n	8000b36 <Paint_SetPixel+0xba>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 8000b18:	2381      	movs	r3, #129	@ 0x81
 8000b1a:	425b      	negs	r3, r3
 8000b1c:	4123      	asrs	r3, r4
 8000b1e:	400b      	ands	r3, r1
 8000b20:	7003      	strb	r3, [r0, #0]
 8000b22:	e7b7      	b.n	8000a94 <Paint_SetPixel+0x18>
        X = Paint.WidthMemory - X - 1;
 8000b24:	8920      	ldrh	r0, [r4, #8]
 8000b26:	3801      	subs	r0, #1
 8000b28:	1ac3      	subs	r3, r0, r3
 8000b2a:	b29b      	uxth	r3, r3
        Y = Paint.HeightMemory - Y - 1;
 8000b2c:	8960      	ldrh	r0, [r4, #10]
 8000b2e:	3801      	subs	r0, #1
 8000b30:	1a41      	subs	r1, r0, r1
 8000b32:	b289      	uxth	r1, r1
        break;
 8000b34:	e7da      	b.n	8000aec <Paint_SetPixel+0x70>
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 8000b36:	2380      	movs	r3, #128	@ 0x80
 8000b38:	4123      	asrs	r3, r4
 8000b3a:	4319      	orrs	r1, r3
 8000b3c:	7001      	strb	r1, [r0, #0]
 8000b3e:	e7a9      	b.n	8000a94 <Paint_SetPixel+0x18>
    }else if(Paint.Scale == 4){
 8000b40:	2804      	cmp	r0, #4
 8000b42:	d113      	bne.n	8000b6c <Paint_SetPixel+0xf0>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 8000b44:	8a60      	ldrh	r0, [r4, #18]
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 8000b46:	26c1      	movs	r6, #193	@ 0xc1
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 8000b48:	4348      	muls	r0, r1
 8000b4a:	0899      	lsrs	r1, r3, #2
 8000b4c:	b289      	uxth	r1, r1
 8000b4e:	1840      	adds	r0, r0, r1
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 8000b50:	2103      	movs	r1, #3
 8000b52:	400b      	ands	r3, r1
 8000b54:	005d      	lsls	r5, r3, #1
 8000b56:	4276      	negs	r6, r6
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 8000b58:	4011      	ands	r1, r2
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 8000b5a:	412e      	asrs	r6, r5
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 8000b5c:	0189      	lsls	r1, r1, #6
 8000b5e:	4129      	asrs	r1, r5
        UBYTE Rdata = Paint.Image[Addr];
 8000b60:	6824      	ldr	r4, [r4, #0]
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 8000b62:	5c23      	ldrb	r3, [r4, r0]
 8000b64:	4033      	ands	r3, r6
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 8000b66:	430b      	orrs	r3, r1
 8000b68:	5423      	strb	r3, [r4, r0]
 8000b6a:	e793      	b.n	8000a94 <Paint_SetPixel+0x18>
    }else if(Paint.Scale == 16) {
 8000b6c:	2810      	cmp	r0, #16
 8000b6e:	d114      	bne.n	8000b9a <Paint_SetPixel+0x11e>
        UDOUBLE Addr = X / 2 + Y * Paint.WidthByte;
 8000b70:	8a60      	ldrh	r0, [r4, #18]
        Rdata = Rdata & (~(0xf0 >> ((X % 2)*4)));
 8000b72:	25f1      	movs	r5, #241	@ 0xf1
        UDOUBLE Addr = X / 2 + Y * Paint.WidthByte;
 8000b74:	4341      	muls	r1, r0
 8000b76:	0858      	lsrs	r0, r3, #1
 8000b78:	b280      	uxth	r0, r0
 8000b7a:	1809      	adds	r1, r1, r0
        Rdata = Rdata & (~(0xf0 >> ((X % 2)*4)));
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	4018      	ands	r0, r3
 8000b80:	0080      	lsls	r0, r0, #2
 8000b82:	426d      	negs	r5, r5
 8000b84:	4105      	asrs	r5, r0
        UBYTE Rdata = Paint.Image[Addr];
 8000b86:	6824      	ldr	r4, [r4, #0]
        Rdata = Rdata & (~(0xf0 >> ((X % 2)*4)));
 8000b88:	5c63      	ldrb	r3, [r4, r1]
 8000b8a:	401d      	ands	r5, r3
        Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 8000b8c:	230f      	movs	r3, #15
 8000b8e:	4013      	ands	r3, r2
 8000b90:	011b      	lsls	r3, r3, #4
 8000b92:	4103      	asrs	r3, r0
 8000b94:	432b      	orrs	r3, r5
 8000b96:	5463      	strb	r3, [r4, r1]
 8000b98:	e77c      	b.n	8000a94 <Paint_SetPixel+0x18>
    }else if(Paint.Scale == 65) {
 8000b9a:	2841      	cmp	r0, #65	@ 0x41
 8000b9c:	d000      	beq.n	8000ba0 <Paint_SetPixel+0x124>
 8000b9e:	e779      	b.n	8000a94 <Paint_SetPixel+0x18>
        UDOUBLE Addr = X*2 + Y*Paint.WidthByte;
 8000ba0:	8a60      	ldrh	r0, [r4, #18]
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	4341      	muls	r1, r0
 8000ba6:	18c9      	adds	r1, r1, r3
        Paint.Image[Addr] = 0xff & (Color>>8);
 8000ba8:	6823      	ldr	r3, [r4, #0]
 8000baa:	0a10      	lsrs	r0, r2, #8
 8000bac:	5458      	strb	r0, [r3, r1]
        Paint.Image[Addr+1] = 0xff & Color;
 8000bae:	6823      	ldr	r3, [r4, #0]
 8000bb0:	185b      	adds	r3, r3, r1
 8000bb2:	705a      	strb	r2, [r3, #1]
 8000bb4:	e76e      	b.n	8000a94 <Paint_SetPixel+0x18>
 8000bb6:	46c0      	nop			@ (mov r8, r8)
 8000bb8:	20000208 	.word	0x20000208
 8000bbc:	08002a62 	.word	0x08002a62

08000bc0 <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 8000bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(Paint.Scale == 2 || Paint.Scale == 4) {
 8000bc2:	2402      	movs	r4, #2
 8000bc4:	4a26      	ldr	r2, [pc, #152]	@ (8000c60 <Paint_Clear+0xa0>)
 8000bc6:	8ad1      	ldrh	r1, [r2, #22]
 8000bc8:	1e8b      	subs	r3, r1, #2
 8000bca:	43a3      	bics	r3, r4
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d111      	bne.n	8000bf6 <Paint_Clear+0x36>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8000bd2:	8a91      	ldrh	r1, [r2, #20]
 8000bd4:	4299      	cmp	r1, r3
 8000bd6:	d80c      	bhi.n	8000bf2 <Paint_Clear+0x32>
                Paint.Image[Addr] = 0x0f & (Color>>8);
                Paint.Image[Addr+1] = 0x0f & Color;
            }
        }
    }
}
 8000bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
                UDOUBLE Addr = X + Y*Paint.WidthByte;
 8000bda:	435c      	muls	r4, r3
                Paint.Image[Addr] = Color;
 8000bdc:	6815      	ldr	r5, [r2, #0]
 8000bde:	186d      	adds	r5, r5, r1
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000be0:	3101      	adds	r1, #1
                Paint.Image[Addr] = Color;
 8000be2:	5528      	strb	r0, [r5, r4]
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000be4:	b289      	uxth	r1, r1
 8000be6:	8a54      	ldrh	r4, [r2, #18]
 8000be8:	428c      	cmp	r4, r1
 8000bea:	d8f6      	bhi.n	8000bda <Paint_Clear+0x1a>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8000bec:	3301      	adds	r3, #1
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	e7ef      	b.n	8000bd2 <Paint_Clear+0x12>
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	e7f7      	b.n	8000be6 <Paint_Clear+0x26>
    }else if(Paint.Scale == 16) {
 8000bf6:	2910      	cmp	r1, #16
 8000bf8:	d116      	bne.n	8000c28 <Paint_Clear+0x68>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8000bfa:	2300      	movs	r3, #0
                Paint.Image[Addr] = (Color<<4) | Color;
 8000bfc:	2711      	movs	r7, #17
 8000bfe:	e00e      	b.n	8000c1e <Paint_Clear+0x5e>
                Color = Color & 0x0f;
 8000c00:	250f      	movs	r5, #15
                Paint.Image[Addr] = (Color<<4) | Color;
 8000c02:	003e      	movs	r6, r7
                Color = Color & 0x0f;
 8000c04:	4028      	ands	r0, r5
                UDOUBLE Addr = X + Y*Paint.WidthByte;
 8000c06:	435c      	muls	r4, r3
                Paint.Image[Addr] = (Color<<4) | Color;
 8000c08:	4346      	muls	r6, r0
 8000c0a:	6815      	ldr	r5, [r2, #0]
 8000c0c:	186d      	adds	r5, r5, r1
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000c0e:	3101      	adds	r1, #1
                Paint.Image[Addr] = (Color<<4) | Color;
 8000c10:	552e      	strb	r6, [r5, r4]
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000c12:	b289      	uxth	r1, r1
 8000c14:	8a54      	ldrh	r4, [r2, #18]
 8000c16:	428c      	cmp	r4, r1
 8000c18:	d8f2      	bhi.n	8000c00 <Paint_Clear+0x40>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	8a91      	ldrh	r1, [r2, #20]
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d9d9      	bls.n	8000bd8 <Paint_Clear+0x18>
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000c24:	2100      	movs	r1, #0
 8000c26:	e7f5      	b.n	8000c14 <Paint_Clear+0x54>
    }else if(Paint.Scale == 65) {
 8000c28:	2941      	cmp	r1, #65	@ 0x41
 8000c2a:	d1d5      	bne.n	8000bd8 <Paint_Clear+0x18>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8000c2c:	2300      	movs	r3, #0
                Paint.Image[Addr] = 0x0f & (Color>>8);
 8000c2e:	0a05      	lsrs	r5, r0, #8
 8000c30:	3932      	subs	r1, #50	@ 0x32
 8000c32:	400d      	ands	r5, r1
                Paint.Image[Addr+1] = 0x0f & Color;
 8000c34:	4008      	ands	r0, r1
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8000c36:	8a91      	ldrh	r1, [r2, #20]
 8000c38:	4299      	cmp	r1, r3
 8000c3a:	d9cd      	bls.n	8000bd8 <Paint_Clear+0x18>
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	e009      	b.n	8000c54 <Paint_Clear+0x94>
                UDOUBLE Addr = X*2 + Y*Paint.WidthByte;
 8000c40:	435c      	muls	r4, r3
 8000c42:	004e      	lsls	r6, r1, #1
 8000c44:	1934      	adds	r4, r6, r4
                Paint.Image[Addr] = 0x0f & (Color>>8);
 8000c46:	6816      	ldr	r6, [r2, #0]
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000c48:	3101      	adds	r1, #1
                Paint.Image[Addr] = 0x0f & (Color>>8);
 8000c4a:	5535      	strb	r5, [r6, r4]
                Paint.Image[Addr+1] = 0x0f & Color;
 8000c4c:	6816      	ldr	r6, [r2, #0]
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000c4e:	b289      	uxth	r1, r1
                Paint.Image[Addr+1] = 0x0f & Color;
 8000c50:	1934      	adds	r4, r6, r4
 8000c52:	7060      	strb	r0, [r4, #1]
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000c54:	8a54      	ldrh	r4, [r2, #18]
 8000c56:	428c      	cmp	r4, r1
 8000c58:	d8f2      	bhi.n	8000c40 <Paint_Clear+0x80>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	e7ea      	b.n	8000c36 <Paint_Clear+0x76>
 8000c60:	20000208 	.word	0x20000208

08000c64 <Paint_DrawChar>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8000c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c66:	b087      	sub	sp, #28
 8000c68:	001c      	movs	r4, r3
 8000c6a:	ab0c      	add	r3, sp, #48	@ 0x30
 8000c6c:	881b      	ldrh	r3, [r3, #0]
 8000c6e:	9002      	str	r0, [sp, #8]
 8000c70:	9304      	str	r3, [sp, #16]
 8000c72:	ab0d      	add	r3, sp, #52	@ 0x34
 8000c74:	881b      	ldrh	r3, [r3, #0]
 8000c76:	9103      	str	r1, [sp, #12]
 8000c78:	9305      	str	r3, [sp, #20]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8000c7a:	4b24      	ldr	r3, [pc, #144]	@ (8000d0c <Paint_DrawChar+0xa8>)
 8000c7c:	8899      	ldrh	r1, [r3, #4]
 8000c7e:	4281      	cmp	r1, r0
 8000c80:	d303      	bcc.n	8000c8a <Paint_DrawChar+0x26>
 8000c82:	88db      	ldrh	r3, [r3, #6]
 8000c84:	9903      	ldr	r1, [sp, #12]
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d204      	bcs.n	8000c94 <Paint_DrawChar+0x30>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 8000c8a:	4821      	ldr	r0, [pc, #132]	@ (8000d10 <Paint_DrawChar+0xac>)
 8000c8c:	f001 fb9c 	bl	80023c8 <puts>
                ptr++;
        }// Write a line
        if (Font->Width % 8 != 0)
            ptr++;
    }// Write all
}
 8000c90:	b007      	add	sp, #28
 8000c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8000c94:	2307      	movs	r3, #7
 8000c96:	88a1      	ldrh	r1, [r4, #4]
 8000c98:	3a20      	subs	r2, #32
 8000c9a:	400b      	ands	r3, r1
 8000c9c:	1e58      	subs	r0, r3, #1
 8000c9e:	4183      	sbcs	r3, r0
 8000ca0:	08c9      	lsrs	r1, r1, #3
 8000ca2:	185b      	adds	r3, r3, r1
 8000ca4:	0011      	movs	r1, r2
 8000ca6:	88e2      	ldrh	r2, [r4, #6]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8000ca8:	6825      	ldr	r5, [r4, #0]
    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8000caa:	434a      	muls	r2, r1
 8000cac:	435a      	muls	r2, r3
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8000cae:	2300      	movs	r3, #0
    const unsigned char *ptr = &Font->table[Char_Offset];
 8000cb0:	18ad      	adds	r5, r5, r2
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8000cb2:	9301      	str	r3, [sp, #4]
 8000cb4:	88e3      	ldrh	r3, [r4, #6]
 8000cb6:	9a01      	ldr	r2, [sp, #4]
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d9e9      	bls.n	8000c90 <Paint_DrawChar+0x2c>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e016      	b.n	8000cee <Paint_DrawChar+0x8a>
					Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8000cc0:	9b02      	ldr	r3, [sp, #8]
 8000cc2:	9a01      	ldr	r2, [sp, #4]
 8000cc4:	1998      	adds	r0, r3, r6
 8000cc6:	9b03      	ldr	r3, [sp, #12]
 8000cc8:	2707      	movs	r7, #7
 8000cca:	1899      	adds	r1, r3, r2
				if (*ptr & (0x80 >> (Column % 8))){
 8000ccc:	2280      	movs	r2, #128	@ 0x80
 8000cce:	4037      	ands	r7, r6
 8000cd0:	413a      	asrs	r2, r7
 8000cd2:	782b      	ldrb	r3, [r5, #0]
					Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8000cd4:	b280      	uxth	r0, r0
 8000cd6:	b289      	uxth	r1, r1
				if (*ptr & (0x80 >> (Column % 8))){
 8000cd8:	421a      	tst	r2, r3
 8000cda:	d014      	beq.n	8000d06 <Paint_DrawChar+0xa2>
					Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8000cdc:	9a04      	ldr	r2, [sp, #16]
                ptr++;
 8000cde:	3f07      	subs	r7, #7
 8000ce0:	427b      	negs	r3, r7
 8000ce2:	415f      	adcs	r7, r3
					Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8000ce4:	f7ff feca 	bl	8000a7c <Paint_SetPixel>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8000ce8:	3601      	adds	r6, #1
                ptr++;
 8000cea:	19ed      	adds	r5, r5, r7
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8000cec:	b2b6      	uxth	r6, r6
 8000cee:	88a3      	ldrh	r3, [r4, #4]
 8000cf0:	429e      	cmp	r6, r3
 8000cf2:	d3e5      	bcc.n	8000cc0 <Paint_DrawChar+0x5c>
        if (Font->Width % 8 != 0)
 8000cf4:	2207      	movs	r2, #7
 8000cf6:	4013      	ands	r3, r2
            ptr++;
 8000cf8:	1e5a      	subs	r2, r3, #1
 8000cfa:	4193      	sbcs	r3, r2
 8000cfc:	18ed      	adds	r5, r5, r3
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8000cfe:	9b01      	ldr	r3, [sp, #4]
 8000d00:	3301      	adds	r3, #1
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	e7d5      	b.n	8000cb2 <Paint_DrawChar+0x4e>
					Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8000d06:	9a05      	ldr	r2, [sp, #20]
 8000d08:	e7e9      	b.n	8000cde <Paint_DrawChar+0x7a>
 8000d0a:	46c0      	nop			@ (mov r8, r8)
 8000d0c:	20000208 	.word	0x20000208
 8000d10:	08002a87 	.word	0x08002a87

08000d14 <Paint_DrawString_EN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8000d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d16:	b087      	sub	sp, #28
 8000d18:	001f      	movs	r7, r3
 8000d1a:	ab0c      	add	r3, sp, #48	@ 0x30
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	9102      	str	r1, [sp, #8]
 8000d20:	9304      	str	r3, [sp, #16]
 8000d22:	ab0d      	add	r3, sp, #52	@ 0x34
 8000d24:	881b      	ldrh	r3, [r3, #0]
 8000d26:	9203      	str	r2, [sp, #12]
 8000d28:	9305      	str	r3, [sp, #20]
    UWORD Xpoint = Xstart;
    UWORD Ypoint = Ystart;
    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8000d2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d94 <Paint_DrawString_EN+0x80>)
{
 8000d2c:	0006      	movs	r6, r0
    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8000d2e:	889a      	ldrh	r2, [r3, #4]
 8000d30:	4282      	cmp	r2, r0
 8000d32:	d304      	bcc.n	8000d3e <Paint_DrawString_EN+0x2a>
 8000d34:	88db      	ldrh	r3, [r3, #6]
    UWORD Ypoint = Ystart;
 8000d36:	000c      	movs	r4, r1
    UWORD Xpoint = Xstart;
 8000d38:	0005      	movs	r5, r0
    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8000d3a:	428b      	cmp	r3, r1
 8000d3c:	d224      	bcs.n	8000d88 <Paint_DrawString_EN+0x74>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 8000d3e:	4816      	ldr	r0, [pc, #88]	@ (8000d98 <Paint_DrawString_EN+0x84>)
 8000d40:	f001 fb42 	bl	80023c8 <puts>
        pString ++;

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
    }
}
 8000d44:	b007      	add	sp, #28
 8000d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 8000d48:	4812      	ldr	r0, [pc, #72]	@ (8000d94 <Paint_DrawString_EN+0x80>)
 8000d4a:	88b9      	ldrh	r1, [r7, #4]
 8000d4c:	8880      	ldrh	r0, [r0, #4]
 8000d4e:	1949      	adds	r1, r1, r5
            Ypoint += Font->Height;
 8000d50:	88fb      	ldrh	r3, [r7, #6]
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 8000d52:	4281      	cmp	r1, r0
 8000d54:	dd02      	ble.n	8000d5c <Paint_DrawString_EN+0x48>
            Xpoint = Xstart;
 8000d56:	0035      	movs	r5, r6
            Ypoint += Font->Height;
 8000d58:	191c      	adds	r4, r3, r4
 8000d5a:	b2a4      	uxth	r4, r4
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 8000d5c:	490d      	ldr	r1, [pc, #52]	@ (8000d94 <Paint_DrawString_EN+0x80>)
 8000d5e:	18e3      	adds	r3, r4, r3
 8000d60:	88c9      	ldrh	r1, [r1, #6]
 8000d62:	428b      	cmp	r3, r1
 8000d64:	dd01      	ble.n	8000d6a <Paint_DrawString_EN+0x56>
            Xpoint = Xstart;
 8000d66:	0035      	movs	r5, r6
            Ypoint = Ystart;
 8000d68:	9c02      	ldr	r4, [sp, #8]
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Foreground, Color_Background);
 8000d6a:	9b05      	ldr	r3, [sp, #20]
 8000d6c:	0028      	movs	r0, r5
 8000d6e:	9301      	str	r3, [sp, #4]
 8000d70:	9b04      	ldr	r3, [sp, #16]
 8000d72:	0021      	movs	r1, r4
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	003b      	movs	r3, r7
 8000d78:	f7ff ff74 	bl	8000c64 <Paint_DrawChar>
        pString ++;
 8000d7c:	9b03      	ldr	r3, [sp, #12]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	9303      	str	r3, [sp, #12]
        Xpoint += Font->Width;
 8000d82:	88bb      	ldrh	r3, [r7, #4]
 8000d84:	18ed      	adds	r5, r5, r3
 8000d86:	b2ad      	uxth	r5, r5
    while (* pString != '\0') {
 8000d88:	9b03      	ldr	r3, [sp, #12]
 8000d8a:	781a      	ldrb	r2, [r3, #0]
 8000d8c:	2a00      	cmp	r2, #0
 8000d8e:	d1db      	bne.n	8000d48 <Paint_DrawString_EN+0x34>
 8000d90:	e7d8      	b.n	8000d44 <Paint_DrawString_EN+0x30>
 8000d92:	46c0      	nop			@ (mov r8, r8)
 8000d94:	20000208 	.word	0x20000208
 8000d98:	08002ac5 	.word	0x08002ac5

08000d9c <OLED_0in96_WriteReg>:
/*******************************************************************************
function:
			Write register address and data
*******************************************************************************/
static void OLED_0in96_WriteReg(uint8_t Reg)
{
 8000d9c:	b510      	push	{r4, lr}
 8000d9e:	0004      	movs	r4, r0
#if USE_SPI_4W

#elif USE_IIC_SOFT
	iic_start();
 8000da0:	f7ff fd9e 	bl	80008e0 <iic_start>
	iic_write_byte(0x3D << 1);
 8000da4:	207a      	movs	r0, #122	@ 0x7a
 8000da6:	f7ff fe0b 	bl	80009c0 <iic_write_byte>
	iic_wait_for_ack();
 8000daa:	f7ff fde9 	bl	8000980 <iic_wait_for_ack>
	iic_write_byte(0x00);
 8000dae:	2000      	movs	r0, #0
 8000db0:	f7ff fe06 	bl	80009c0 <iic_write_byte>
	iic_wait_for_ack();
 8000db4:	f7ff fde4 	bl	8000980 <iic_wait_for_ack>
	iic_write_byte(Reg);
 8000db8:	0020      	movs	r0, r4
 8000dba:	f7ff fe01 	bl	80009c0 <iic_write_byte>
	iic_wait_for_ack();
 8000dbe:	f7ff fddf 	bl	8000980 <iic_wait_for_ack>
	iic_stop();
 8000dc2:	f7ff fdbb 	bl	800093c <iic_stop>
#endif
}
 8000dc6:	bd10      	pop	{r4, pc}

08000dc8 <OLED_0in96_WriteData>:
/*******************************************************************************
function:
			Common register initialization
*******************************************************************************/
static void OLED_0in96_WriteData(uint8_t Data)
{	
 8000dc8:	b510      	push	{r4, lr}
 8000dca:	0004      	movs	r4, r0
#if USE_SPI_4W

#elif USE_IIC_SOFT	
	iic_start();
 8000dcc:	f7ff fd88 	bl	80008e0 <iic_start>
	iic_write_byte(0x3D << 1);
 8000dd0:	207a      	movs	r0, #122	@ 0x7a
 8000dd2:	f7ff fdf5 	bl	80009c0 <iic_write_byte>
	iic_wait_for_ack();
 8000dd6:	f7ff fdd3 	bl	8000980 <iic_wait_for_ack>
	iic_write_byte(0x40);
 8000dda:	2040      	movs	r0, #64	@ 0x40
 8000ddc:	f7ff fdf0 	bl	80009c0 <iic_write_byte>
	iic_wait_for_ack();
 8000de0:	f7ff fdce 	bl	8000980 <iic_wait_for_ack>
	iic_write_byte(Data);
 8000de4:	0020      	movs	r0, r4
 8000de6:	f7ff fdeb 	bl	80009c0 <iic_write_byte>
	iic_wait_for_ack();
 8000dea:	f7ff fdc9 	bl	8000980 <iic_wait_for_ack>
	iic_stop();
 8000dee:	f7ff fda5 	bl	800093c <iic_stop>
#endif
}
 8000df2:	bd10      	pop	{r4, pc}

08000df4 <OLED_0in96_Init>:
/********************************************************************************
function:
			initialization
********************************************************************************/
void OLED_0in96_Init()
{
 8000df4:	b510      	push	{r4, lr}
    OLED_RST_1;
 8000df6:	4c34      	ldr	r4, [pc, #208]	@ (8000ec8 <OLED_0in96_Init+0xd4>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	2102      	movs	r1, #2
 8000dfc:	0020      	movs	r0, r4
 8000dfe:	f000 fa5b 	bl	80012b8 <HAL_GPIO_WritePin>
    Driver_Delay_ms(100);
 8000e02:	2064      	movs	r0, #100	@ 0x64
 8000e04:	f7ff fd54 	bl	80008b0 <Driver_Delay_ms>
    OLED_RST_0;
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2102      	movs	r1, #2
 8000e0c:	0020      	movs	r0, r4
 8000e0e:	f000 fa53 	bl	80012b8 <HAL_GPIO_WritePin>
    Driver_Delay_ms(100);
 8000e12:	2064      	movs	r0, #100	@ 0x64
 8000e14:	f7ff fd4c 	bl	80008b0 <Driver_Delay_ms>
    OLED_RST_1;
 8000e18:	2201      	movs	r2, #1
 8000e1a:	2102      	movs	r1, #2
 8000e1c:	0020      	movs	r0, r4
 8000e1e:	f000 fa4b 	bl	80012b8 <HAL_GPIO_WritePin>
    Driver_Delay_ms(100);
 8000e22:	2064      	movs	r0, #100	@ 0x64
 8000e24:	f7ff fd44 	bl	80008b0 <Driver_Delay_ms>
	OLED_0in96_WriteReg(SSD1306_DISPLAYOFF);
 8000e28:	20ae      	movs	r0, #174	@ 0xae
 8000e2a:	f7ff ffb7 	bl	8000d9c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(SSD1306_SETDISPLAYCLOCKDIV);
 8000e2e:	20d5      	movs	r0, #213	@ 0xd5
 8000e30:	f7ff ffb4 	bl	8000d9c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(0x80);                              // the suggested ratio 0x80
 8000e34:	2080      	movs	r0, #128	@ 0x80
 8000e36:	f7ff ffb1 	bl	8000d9c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(SSD1306_SETMULTIPLEX);
 8000e3a:	20a8      	movs	r0, #168	@ 0xa8
 8000e3c:	f7ff ffae 	bl	8000d9c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(0x3F);
 8000e40:	203f      	movs	r0, #63	@ 0x3f
 8000e42:	f7ff ffab 	bl	8000d9c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(SSD1306_SETDISPLAYOFFSET);
 8000e46:	20d3      	movs	r0, #211	@ 0xd3
 8000e48:	f7ff ffa8 	bl	8000d9c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(0x0);                               // no offset
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	f7ff ffa5 	bl	8000d9c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(SSD1306_SETSTARTLINE | 0x0);        // line #0
 8000e52:	2040      	movs	r0, #64	@ 0x40
 8000e54:	f7ff ffa2 	bl	8000d9c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(SSD1306_CHARGEPUMP);
 8000e58:	208d      	movs	r0, #141	@ 0x8d
 8000e5a:	f7ff ff9f 	bl	8000d9c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
 8000e5e:	2014      	movs	r0, #20
 8000e60:	f7ff ff9c 	bl	8000d9c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(SSD1306_MEMORYMODE);
 8000e64:	2020      	movs	r0, #32
 8000e66:	f7ff ff99 	bl	8000d9c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(0x00);                              // 0x0 act like ks0108
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f7ff ff96 	bl	8000d9c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(SSD1306_SEGREMAP | 0x1);
 8000e70:	20a1      	movs	r0, #161	@ 0xa1
 8000e72:	f7ff ff93 	bl	8000d9c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(SSD1306_COMSCANDEC);
 8000e76:	20c8      	movs	r0, #200	@ 0xc8
 8000e78:	f7ff ff90 	bl	8000d9c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(SSD1306_SETCOMPINS);
 8000e7c:	20da      	movs	r0, #218	@ 0xda
 8000e7e:	f7ff ff8d 	bl	8000d9c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(0x12);           // TODO - calculate based on _rawHieght ?
 8000e82:	2012      	movs	r0, #18
 8000e84:	f7ff ff8a 	bl	8000d9c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(SSD1306_SETCONTRAST);
 8000e88:	2081      	movs	r0, #129	@ 0x81
 8000e8a:	f7ff ff87 	bl	8000d9c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
 8000e8e:	20cf      	movs	r0, #207	@ 0xcf
 8000e90:	f7ff ff84 	bl	8000d9c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(SSD1306_SETPRECHARGE);
 8000e94:	20d9      	movs	r0, #217	@ 0xd9
 8000e96:	f7ff ff81 	bl	8000d9c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
 8000e9a:	20f1      	movs	r0, #241	@ 0xf1
 8000e9c:	f7ff ff7e 	bl	8000d9c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(SSD1306_SETVCOMDETECT);
 8000ea0:	20db      	movs	r0, #219	@ 0xdb
 8000ea2:	f7ff ff7b 	bl	8000d9c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(0x40);
 8000ea6:	2040      	movs	r0, #64	@ 0x40
 8000ea8:	f7ff ff78 	bl	8000d9c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(SSD1306_DISPLAYALLON_RESUME);
 8000eac:	20a4      	movs	r0, #164	@ 0xa4
 8000eae:	f7ff ff75 	bl	8000d9c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(SSD1306_NORMALDISPLAY);
 8000eb2:	20a6      	movs	r0, #166	@ 0xa6
 8000eb4:	f7ff ff72 	bl	8000d9c <OLED_0in96_WriteReg>
    //Hardware reset
    OLED_0in96_Reset();

    //Set the initialization register
    OLED_0in96_InitReg();
    Driver_Delay_ms(200);
 8000eb8:	20c8      	movs	r0, #200	@ 0xc8
 8000eba:	f7ff fcf9 	bl	80008b0 <Driver_Delay_ms>

    //Turn on the OLED display
    OLED_0in96_WriteReg(0xaf);
 8000ebe:	20af      	movs	r0, #175	@ 0xaf
 8000ec0:	f7ff ff6c 	bl	8000d9c <OLED_0in96_WriteReg>
}
 8000ec4:	bd10      	pop	{r4, pc}
 8000ec6:	46c0      	nop			@ (mov r8, r8)
 8000ec8:	48000400 	.word	0x48000400

08000ecc <OLED_0in96_display>:
/********************************************************************************
function:
			Update all memory to OLED
********************************************************************************/
void OLED_0in96_display(const UBYTE *Image)
{
 8000ecc:	b570      	push	{r4, r5, r6, lr}
 8000ece:	0006      	movs	r6, r0
    UWORD j, i, temp;
	OLED_0in96_WriteReg(SSD1306_COLUMNADDR);
 8000ed0:	2021      	movs	r0, #33	@ 0x21
 8000ed2:	f7ff ff63 	bl	8000d9c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(0);         //cloumn start address
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f7ff ff60 	bl	8000d9c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(OLED_0in96_HEIGHT -1); //cloumn end address
 8000edc:	207f      	movs	r0, #127	@ 0x7f
 8000ede:	f7ff ff5d 	bl	8000d9c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(SSD1306_PAGEADDR);
 8000ee2:	2022      	movs	r0, #34	@ 0x22
 8000ee4:	f7ff ff5a 	bl	8000d9c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(0);         //page atart address
 8000ee8:	2000      	movs	r0, #0
 8000eea:	f7ff ff57 	bl	8000d9c <OLED_0in96_WriteReg>
	OLED_0in96_WriteReg(OLED_0in96_WIDTH/8 -1); //page end address
 8000eee:	2007      	movs	r0, #7
 8000ef0:	f7ff ff54 	bl	8000d9c <OLED_0in96_WriteReg>
    
    for (j = 0; j < 8; j++) {
 8000ef4:	1df4      	adds	r4, r6, #7
{
 8000ef6:	0025      	movs	r5, r4
        for(i = 0; i < 128; i++) {
            temp = Image[7-j + i*8];
            OLED_0in96_WriteData(temp);
 8000ef8:	7828      	ldrb	r0, [r5, #0]
 8000efa:	f7ff ff65 	bl	8000dc8 <OLED_0in96_WriteData>
        for(i = 0; i < 128; i++) {
 8000efe:	2380      	movs	r3, #128	@ 0x80
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	3508      	adds	r5, #8
 8000f04:	18e3      	adds	r3, r4, r3
 8000f06:	429d      	cmp	r5, r3
 8000f08:	d1f6      	bne.n	8000ef8 <OLED_0in96_display+0x2c>
    for (j = 0; j < 8; j++) {
 8000f0a:	1e63      	subs	r3, r4, #1
 8000f0c:	42a6      	cmp	r6, r4
 8000f0e:	d001      	beq.n	8000f14 <OLED_0in96_display+0x48>
 8000f10:	001c      	movs	r4, r3
 8000f12:	e7f0      	b.n	8000ef6 <OLED_0in96_display+0x2a>
        }
    }
}
 8000f14:	bd70      	pop	{r4, r5, r6, pc}
	...

08000f18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f18:	b570      	push	{r4, r5, r6, lr}
 8000f1a:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f1c:	20fa      	movs	r0, #250	@ 0xfa
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f54 <HAL_InitTick+0x3c>)
 8000f20:	0080      	lsls	r0, r0, #2
 8000f22:	7819      	ldrb	r1, [r3, #0]
 8000f24:	f7ff f902 	bl	800012c <__udivsi3>
 8000f28:	4c0b      	ldr	r4, [pc, #44]	@ (8000f58 <HAL_InitTick+0x40>)
 8000f2a:	0001      	movs	r1, r0
 8000f2c:	6820      	ldr	r0, [r4, #0]
 8000f2e:	f7ff f8fd 	bl	800012c <__udivsi3>
 8000f32:	f000 f873 	bl	800101c <HAL_SYSTICK_Config>
 8000f36:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8000f38:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f3a:	2c00      	cmp	r4, #0
 8000f3c:	d109      	bne.n	8000f52 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3e:	2d03      	cmp	r5, #3
 8000f40:	d807      	bhi.n	8000f52 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f42:	3802      	subs	r0, #2
 8000f44:	0022      	movs	r2, r4
 8000f46:	0029      	movs	r1, r5
 8000f48:	f000 f83e 	bl	8000fc8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f4c:	0020      	movs	r0, r4
 8000f4e:	4b03      	ldr	r3, [pc, #12]	@ (8000f5c <HAL_InitTick+0x44>)
 8000f50:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8000f52:	bd70      	pop	{r4, r5, r6, pc}
 8000f54:	2000000c 	.word	0x2000000c
 8000f58:	20000000 	.word	0x20000000
 8000f5c:	20000010 	.word	0x20000010

08000f60 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f60:	2310      	movs	r3, #16
 8000f62:	4a06      	ldr	r2, [pc, #24]	@ (8000f7c <HAL_Init+0x1c>)
{
 8000f64:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f66:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f68:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f6a:	430b      	orrs	r3, r1
 8000f6c:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f6e:	f7ff ffd3 	bl	8000f18 <HAL_InitTick>
  HAL_MspInit();
 8000f72:	f7ff fb3d 	bl	80005f0 <HAL_MspInit>
}
 8000f76:	2000      	movs	r0, #0
 8000f78:	bd10      	pop	{r4, pc}
 8000f7a:	46c0      	nop			@ (mov r8, r8)
 8000f7c:	40022000 	.word	0x40022000

08000f80 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f80:	4a03      	ldr	r2, [pc, #12]	@ (8000f90 <HAL_IncTick+0x10>)
 8000f82:	4b04      	ldr	r3, [pc, #16]	@ (8000f94 <HAL_IncTick+0x14>)
 8000f84:	6811      	ldr	r1, [r2, #0]
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	185b      	adds	r3, r3, r1
 8000f8a:	6013      	str	r3, [r2, #0]
}
 8000f8c:	4770      	bx	lr
 8000f8e:	46c0      	nop			@ (mov r8, r8)
 8000f90:	20000220 	.word	0x20000220
 8000f94:	2000000c 	.word	0x2000000c

08000f98 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f98:	4b01      	ldr	r3, [pc, #4]	@ (8000fa0 <HAL_GetTick+0x8>)
 8000f9a:	6818      	ldr	r0, [r3, #0]
}
 8000f9c:	4770      	bx	lr
 8000f9e:	46c0      	nop			@ (mov r8, r8)
 8000fa0:	20000220 	.word	0x20000220

08000fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa4:	b570      	push	{r4, r5, r6, lr}
 8000fa6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000fa8:	f7ff fff6 	bl	8000f98 <HAL_GetTick>
 8000fac:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fae:	1c63      	adds	r3, r4, #1
 8000fb0:	d002      	beq.n	8000fb8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fb2:	4b04      	ldr	r3, [pc, #16]	@ (8000fc4 <HAL_Delay+0x20>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000fb8:	f7ff ffee 	bl	8000f98 <HAL_GetTick>
 8000fbc:	1b40      	subs	r0, r0, r5
 8000fbe:	42a0      	cmp	r0, r4
 8000fc0:	d3fa      	bcc.n	8000fb8 <HAL_Delay+0x14>
  {
  }
}
 8000fc2:	bd70      	pop	{r4, r5, r6, pc}
 8000fc4:	2000000c 	.word	0x2000000c

08000fc8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc8:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fca:	24ff      	movs	r4, #255	@ 0xff
 8000fcc:	2203      	movs	r2, #3
 8000fce:	000b      	movs	r3, r1
 8000fd0:	0021      	movs	r1, r4
 8000fd2:	4002      	ands	r2, r0
 8000fd4:	00d2      	lsls	r2, r2, #3
 8000fd6:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fd8:	019b      	lsls	r3, r3, #6
 8000fda:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fdc:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fde:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8000fe0:	2800      	cmp	r0, #0
 8000fe2:	db0a      	blt.n	8000ffa <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fe4:	24c0      	movs	r4, #192	@ 0xc0
 8000fe6:	4a0b      	ldr	r2, [pc, #44]	@ (8001014 <HAL_NVIC_SetPriority+0x4c>)
 8000fe8:	0880      	lsrs	r0, r0, #2
 8000fea:	0080      	lsls	r0, r0, #2
 8000fec:	1880      	adds	r0, r0, r2
 8000fee:	00a4      	lsls	r4, r4, #2
 8000ff0:	5902      	ldr	r2, [r0, r4]
 8000ff2:	400a      	ands	r2, r1
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	5103      	str	r3, [r0, r4]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000ff8:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ffa:	220f      	movs	r2, #15
 8000ffc:	4010      	ands	r0, r2
 8000ffe:	3808      	subs	r0, #8
 8001000:	4a05      	ldr	r2, [pc, #20]	@ (8001018 <HAL_NVIC_SetPriority+0x50>)
 8001002:	0880      	lsrs	r0, r0, #2
 8001004:	0080      	lsls	r0, r0, #2
 8001006:	1880      	adds	r0, r0, r2
 8001008:	69c2      	ldr	r2, [r0, #28]
 800100a:	4011      	ands	r1, r2
 800100c:	4319      	orrs	r1, r3
 800100e:	61c1      	str	r1, [r0, #28]
 8001010:	e7f2      	b.n	8000ff8 <HAL_NVIC_SetPriority+0x30>
 8001012:	46c0      	nop			@ (mov r8, r8)
 8001014:	e000e100 	.word	0xe000e100
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800101c:	2280      	movs	r2, #128	@ 0x80
 800101e:	1e43      	subs	r3, r0, #1
 8001020:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8001022:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001024:	4293      	cmp	r3, r2
 8001026:	d20d      	bcs.n	8001044 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001028:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800102a:	4a07      	ldr	r2, [pc, #28]	@ (8001048 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800102c:	4807      	ldr	r0, [pc, #28]	@ (800104c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800102e:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001030:	6a03      	ldr	r3, [r0, #32]
 8001032:	0609      	lsls	r1, r1, #24
 8001034:	021b      	lsls	r3, r3, #8
 8001036:	0a1b      	lsrs	r3, r3, #8
 8001038:	430b      	orrs	r3, r1
 800103a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800103c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800103e:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001040:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001042:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001044:	4770      	bx	lr
 8001046:	46c0      	nop			@ (mov r8, r8)
 8001048:	e000e010 	.word	0xe000e010
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001050:	b570      	push	{r4, r5, r6, lr}
 8001052:	0004      	movs	r4, r0
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if (NULL == hdma)
  {
    return HAL_ERROR;
 8001054:	2001      	movs	r0, #1
  if (NULL == hdma)
 8001056:	2c00      	cmp	r4, #0
 8001058:	d024      	beq.n	80010a4 <HAL_DMA_Init+0x54>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800105a:	2302      	movs	r3, #2
 800105c:	1ca5      	adds	r5, r4, #2
 800105e:	77eb      	strb	r3, [r5, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001060:	6820      	ldr	r0, [r4, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001062:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <HAL_DMA_Init+0x58>)
  tmp = hdma->Instance->CCR;
 8001064:	6802      	ldr	r2, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001066:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001068:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 800106a:	6863      	ldr	r3, [r4, #4]
 800106c:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800106e:	68e1      	ldr	r1, [r4, #12]
 8001070:	430b      	orrs	r3, r1
 8001072:	6921      	ldr	r1, [r4, #16]
 8001074:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001076:	6961      	ldr	r1, [r4, #20]
 8001078:	430b      	orrs	r3, r1
 800107a:	69a1      	ldr	r1, [r4, #24]
 800107c:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800107e:	69e1      	ldr	r1, [r4, #28]
 8001080:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8001082:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001084:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001086:	4b09      	ldr	r3, [pc, #36]	@ (80010ac <HAL_DMA_Init+0x5c>)
 8001088:	2114      	movs	r1, #20
 800108a:	18c0      	adds	r0, r0, r3
 800108c:	f7ff f84e 	bl	800012c <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8001090:	4b07      	ldr	r3, [pc, #28]	@ (80010b0 <HAL_DMA_Init+0x60>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001092:	0080      	lsls	r0, r0, #2
 8001094:	6420      	str	r0, [r4, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001096:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001098:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800109a:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800109c:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->Lock = HAL_UNLOCKED;
 800109e:	18e4      	adds	r4, r4, r3
  hdma->State = HAL_DMA_STATE_READY;
 80010a0:	77eb      	strb	r3, [r5, #31]
  hdma->Lock = HAL_UNLOCKED;
 80010a2:	77e0      	strb	r0, [r4, #31]
}
 80010a4:	bd70      	pop	{r4, r5, r6, pc}
 80010a6:	46c0      	nop			@ (mov r8, r8)
 80010a8:	ffffc00f 	.word	0xffffc00f
 80010ac:	bffdfff8 	.word	0xbffdfff8
 80010b0:	40020000 	.word	0x40020000

080010b4 <HAL_DMA_IRQHandler>:
{
 80010b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80010b6:	2704      	movs	r7, #4
 80010b8:	003e      	movs	r6, r7
 80010ba:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80010bc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80010be:	408e      	lsls	r6, r1
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80010c0:	6815      	ldr	r5, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80010c2:	6803      	ldr	r3, [r0, #0]
 80010c4:	681c      	ldr	r4, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80010c6:	4235      	tst	r5, r6
 80010c8:	d00d      	beq.n	80010e6 <HAL_DMA_IRQHandler+0x32>
 80010ca:	423c      	tst	r4, r7
 80010cc:	d00b      	beq.n	80010e6 <HAL_DMA_IRQHandler+0x32>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010ce:	6819      	ldr	r1, [r3, #0]
 80010d0:	0689      	lsls	r1, r1, #26
 80010d2:	d402      	bmi.n	80010da <HAL_DMA_IRQHandler+0x26>
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80010d4:	6819      	ldr	r1, [r3, #0]
 80010d6:	43b9      	bics	r1, r7
 80010d8:	6019      	str	r1, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 80010da:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80010dc:	6056      	str	r6, [r2, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d019      	beq.n	8001116 <HAL_DMA_IRQHandler+0x62>
      hdma->XferErrorCallback(hdma);
 80010e2:	4798      	blx	r3
}
 80010e4:	e017      	b.n	8001116 <HAL_DMA_IRQHandler+0x62>
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80010e6:	2702      	movs	r7, #2
 80010e8:	003e      	movs	r6, r7
 80010ea:	408e      	lsls	r6, r1
 80010ec:	4235      	tst	r5, r6
 80010ee:	d013      	beq.n	8001118 <HAL_DMA_IRQHandler+0x64>
 80010f0:	423c      	tst	r4, r7
 80010f2:	d011      	beq.n	8001118 <HAL_DMA_IRQHandler+0x64>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010f4:	6819      	ldr	r1, [r3, #0]
 80010f6:	0689      	lsls	r1, r1, #26
 80010f8:	d406      	bmi.n	8001108 <HAL_DMA_IRQHandler+0x54>
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80010fa:	240a      	movs	r4, #10
 80010fc:	6819      	ldr	r1, [r3, #0]
 80010fe:	43a1      	bics	r1, r4
 8001100:	6019      	str	r1, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001102:	2101      	movs	r1, #1
 8001104:	19c3      	adds	r3, r0, r7
 8001106:	77d9      	strb	r1, [r3, #31]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001108:	6056      	str	r6, [r2, #4]
    __HAL_UNLOCK(hdma);
 800110a:	2200      	movs	r2, #0
 800110c:	1c43      	adds	r3, r0, #1
 800110e:	77da      	strb	r2, [r3, #31]
    if (hdma->XferCpltCallback != NULL)
 8001110:	6a83      	ldr	r3, [r0, #40]	@ 0x28
    if (hdma->XferErrorCallback != NULL)
 8001112:	4293      	cmp	r3, r2
 8001114:	d1e5      	bne.n	80010e2 <HAL_DMA_IRQHandler+0x2e>
}
 8001116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001118:	2608      	movs	r6, #8
 800111a:	0037      	movs	r7, r6
 800111c:	408f      	lsls	r7, r1
 800111e:	423d      	tst	r5, r7
 8001120:	d0f9      	beq.n	8001116 <HAL_DMA_IRQHandler+0x62>
 8001122:	4234      	tst	r4, r6
 8001124:	d0f7      	beq.n	8001116 <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001126:	250e      	movs	r5, #14
 8001128:	681c      	ldr	r4, [r3, #0]
 800112a:	43ac      	bics	r4, r5
 800112c:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800112e:	2301      	movs	r3, #1
 8001130:	001c      	movs	r4, r3
 8001132:	408c      	lsls	r4, r1
 8001134:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001136:	1c82      	adds	r2, r0, #2
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001138:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800113a:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 800113c:	2200      	movs	r2, #0
 800113e:	18c3      	adds	r3, r0, r3
 8001140:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8001142:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001144:	e7e5      	b.n	8001112 <HAL_DMA_IRQHandler+0x5e>
	...

08001148 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8001148:	2300      	movs	r3, #0
{
 800114a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114c:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800114e:	680a      	ldr	r2, [r1, #0]
 8001150:	0014      	movs	r4, r2
 8001152:	40dc      	lsrs	r4, r3
 8001154:	d101      	bne.n	800115a <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 8001156:	b007      	add	sp, #28
 8001158:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800115a:	2501      	movs	r5, #1
 800115c:	0014      	movs	r4, r2
 800115e:	409d      	lsls	r5, r3
 8001160:	402c      	ands	r4, r5
 8001162:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 8001164:	422a      	tst	r2, r5
 8001166:	d100      	bne.n	800116a <HAL_GPIO_Init+0x22>
 8001168:	e094      	b.n	8001294 <HAL_GPIO_Init+0x14c>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800116a:	684a      	ldr	r2, [r1, #4]
 800116c:	005f      	lsls	r7, r3, #1
 800116e:	4694      	mov	ip, r2
 8001170:	2203      	movs	r2, #3
 8001172:	4664      	mov	r4, ip
 8001174:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001176:	2403      	movs	r4, #3
 8001178:	40bc      	lsls	r4, r7
 800117a:	43e4      	mvns	r4, r4
 800117c:	9401      	str	r4, [sp, #4]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800117e:	1e54      	subs	r4, r2, #1
 8001180:	2c01      	cmp	r4, #1
 8001182:	d82e      	bhi.n	80011e2 <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 8001184:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001186:	9c01      	ldr	r4, [sp, #4]
 8001188:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 800118a:	68cc      	ldr	r4, [r1, #12]
 800118c:	40bc      	lsls	r4, r7
 800118e:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8001190:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001192:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001194:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001196:	43ac      	bics	r4, r5
 8001198:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800119a:	4664      	mov	r4, ip
 800119c:	0924      	lsrs	r4, r4, #4
 800119e:	4034      	ands	r4, r6
 80011a0:	409c      	lsls	r4, r3
 80011a2:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80011a4:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 80011a6:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011a8:	9c01      	ldr	r4, [sp, #4]
 80011aa:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011ac:	688c      	ldr	r4, [r1, #8]
 80011ae:	40bc      	lsls	r4, r7
 80011b0:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 80011b2:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011b4:	2a02      	cmp	r2, #2
 80011b6:	d116      	bne.n	80011e6 <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011b8:	2507      	movs	r5, #7
 80011ba:	260f      	movs	r6, #15
 80011bc:	401d      	ands	r5, r3
 80011be:	00ad      	lsls	r5, r5, #2
 80011c0:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 80011c2:	08dc      	lsrs	r4, r3, #3
 80011c4:	00a4      	lsls	r4, r4, #2
 80011c6:	1904      	adds	r4, r0, r4
 80011c8:	9402      	str	r4, [sp, #8]
 80011ca:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011cc:	9603      	str	r6, [sp, #12]
 80011ce:	0026      	movs	r6, r4
 80011d0:	9c03      	ldr	r4, [sp, #12]
 80011d2:	43a6      	bics	r6, r4
 80011d4:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011d6:	690e      	ldr	r6, [r1, #16]
 80011d8:	40ae      	lsls	r6, r5
 80011da:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 80011dc:	9c02      	ldr	r4, [sp, #8]
 80011de:	6226      	str	r6, [r4, #32]
 80011e0:	e001      	b.n	80011e6 <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011e2:	2a03      	cmp	r2, #3
 80011e4:	d1df      	bne.n	80011a6 <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011e6:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 80011e8:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011ea:	9d01      	ldr	r5, [sp, #4]
 80011ec:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011ee:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011f0:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 80011f2:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011f4:	4662      	mov	r2, ip
 80011f6:	02a4      	lsls	r4, r4, #10
 80011f8:	4222      	tst	r2, r4
 80011fa:	d04b      	beq.n	8001294 <HAL_GPIO_Init+0x14c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fc:	2501      	movs	r5, #1
 80011fe:	4a26      	ldr	r2, [pc, #152]	@ (8001298 <HAL_GPIO_Init+0x150>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001200:	2790      	movs	r7, #144	@ 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001202:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001204:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001206:	432c      	orrs	r4, r5
 8001208:	6194      	str	r4, [r2, #24]
 800120a:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 800120c:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120e:	402a      	ands	r2, r5
 8001210:	9205      	str	r2, [sp, #20]
 8001212:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001214:	4a21      	ldr	r2, [pc, #132]	@ (800129c <HAL_GPIO_Init+0x154>)
 8001216:	00a4      	lsls	r4, r4, #2
 8001218:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800121a:	220f      	movs	r2, #15
 800121c:	3502      	adds	r5, #2
 800121e:	401d      	ands	r5, r3
 8001220:	00ad      	lsls	r5, r5, #2
 8001222:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 8001224:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001226:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001228:	2200      	movs	r2, #0
 800122a:	42b8      	cmp	r0, r7
 800122c:	d008      	beq.n	8001240 <HAL_GPIO_Init+0xf8>
 800122e:	4f1c      	ldr	r7, [pc, #112]	@ (80012a0 <HAL_GPIO_Init+0x158>)
 8001230:	3201      	adds	r2, #1
 8001232:	42b8      	cmp	r0, r7
 8001234:	d004      	beq.n	8001240 <HAL_GPIO_Init+0xf8>
 8001236:	4f1b      	ldr	r7, [pc, #108]	@ (80012a4 <HAL_GPIO_Init+0x15c>)
 8001238:	3204      	adds	r2, #4
 800123a:	42b8      	cmp	r0, r7
 800123c:	d100      	bne.n	8001240 <HAL_GPIO_Init+0xf8>
 800123e:	3a03      	subs	r2, #3
 8001240:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001242:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001244:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001246:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 8001248:	4a17      	ldr	r2, [pc, #92]	@ (80012a8 <HAL_GPIO_Init+0x160>)
        temp &= ~(iocurrent);
 800124a:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->RTSR;
 800124c:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 800124e:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 8001250:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8001252:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001254:	02ff      	lsls	r7, r7, #11
 8001256:	d401      	bmi.n	800125c <HAL_GPIO_Init+0x114>
        temp &= ~(iocurrent);
 8001258:	0035      	movs	r5, r6
 800125a:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800125c:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 800125e:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8001260:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 8001262:	9d00      	ldr	r5, [sp, #0]
 8001264:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001266:	02bf      	lsls	r7, r7, #10
 8001268:	d401      	bmi.n	800126e <HAL_GPIO_Init+0x126>
        temp &= ~(iocurrent);
 800126a:	0035      	movs	r5, r6
 800126c:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800126e:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 8001270:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 8001272:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8001274:	9d00      	ldr	r5, [sp, #0]
 8001276:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001278:	03bf      	lsls	r7, r7, #14
 800127a:	d401      	bmi.n	8001280 <HAL_GPIO_Init+0x138>
        temp &= ~(iocurrent);
 800127c:	0035      	movs	r5, r6
 800127e:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001280:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8001282:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 8001284:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 8001286:	9e00      	ldr	r6, [sp, #0]
 8001288:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800128a:	03ff      	lsls	r7, r7, #15
 800128c:	d401      	bmi.n	8001292 <HAL_GPIO_Init+0x14a>
        temp &= ~(iocurrent);
 800128e:	4025      	ands	r5, r4
 8001290:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 8001292:	6016      	str	r6, [r2, #0]
    position++;
 8001294:	3301      	adds	r3, #1
 8001296:	e75a      	b.n	800114e <HAL_GPIO_Init+0x6>
 8001298:	40021000 	.word	0x40021000
 800129c:	40010000 	.word	0x40010000
 80012a0:	48000400 	.word	0x48000400
 80012a4:	48000800 	.word	0x48000800
 80012a8:	40010400 	.word	0x40010400

080012ac <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012ac:	6900      	ldr	r0, [r0, #16]
 80012ae:	4008      	ands	r0, r1
 80012b0:	1e43      	subs	r3, r0, #1
 80012b2:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80012b4:	b2c0      	uxtb	r0, r0
  }
 80012b6:	4770      	bx	lr

080012b8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012b8:	2a00      	cmp	r2, #0
 80012ba:	d001      	beq.n	80012c0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012bc:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012be:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012c0:	6281      	str	r1, [r0, #40]	@ 0x28
}
 80012c2:	e7fc      	b.n	80012be <HAL_GPIO_WritePin+0x6>

080012c4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80012c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80012c6:	1e04      	subs	r4, r0, #0
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80012c8:	d044      	beq.n	8001354 <HAL_I2S_Init+0x90>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80012ca:	0006      	movs	r6, r0
 80012cc:	3635      	adds	r6, #53	@ 0x35
 80012ce:	7833      	ldrb	r3, [r6, #0]
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d104      	bne.n	80012e0 <HAL_I2S_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80012d6:	0003      	movs	r3, r0
 80012d8:	3334      	adds	r3, #52	@ 0x34
 80012da:	701a      	strb	r2, [r3, #0]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80012dc:	f7ff f9a0 	bl	8000620 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80012e0:	2102      	movs	r1, #2
 80012e2:	7031      	strb	r1, [r6, #0]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80012e4:	6823      	ldr	r3, [r4, #0]
 80012e6:	4f2c      	ldr	r7, [pc, #176]	@ (8001398 <HAL_I2S_Init+0xd4>)
 80012e8:	69da      	ldr	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80012ea:	6960      	ldr	r0, [r4, #20]
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80012ec:	403a      	ands	r2, r7
 80012ee:	61da      	str	r2, [r3, #28]
  hi2s->Instance->I2SPR = 0x0002U;
 80012f0:	6219      	str	r1, [r3, #32]
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80012f2:	68e3      	ldr	r3, [r4, #12]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80012f4:	4288      	cmp	r0, r1
 80012f6:	d036      	beq.n	8001366 <HAL_I2S_Init+0xa2>
      packetlength = 16U;
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80012f8:	2520      	movs	r5, #32
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d100      	bne.n	8001300 <HAL_I2S_Init+0x3c>
      packetlength = 16U;
 80012fe:	3d10      	subs	r5, #16
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001300:	68a3      	ldr	r3, [r4, #8]
 8001302:	2b20      	cmp	r3, #32
 8001304:	d800      	bhi.n	8001308 <HAL_I2S_Init+0x44>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001306:	006d      	lsls	r5, r5, #1
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 8001308:	f000 fa98 	bl	800183c <HAL_RCC_GetSysClockFreq>

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800130c:	2380      	movs	r3, #128	@ 0x80
 800130e:	6922      	ldr	r2, [r4, #16]
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	429a      	cmp	r2, r3
 8001314:	d120      	bne.n	8001358 <HAL_I2S_Init+0x94>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001316:	6963      	ldr	r3, [r4, #20]
 8001318:	00a9      	lsls	r1, r5, #2
 800131a:	9301      	str	r3, [sp, #4]
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800131c:	68e3      	ldr	r3, [r4, #12]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d100      	bne.n	8001324 <HAL_I2S_Init+0x60>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001322:	00e9      	lsls	r1, r5, #3
 8001324:	f7fe ff02 	bl	800012c <__udivsi3>
 8001328:	230a      	movs	r3, #10
 800132a:	4358      	muls	r0, r3
 800132c:	9901      	ldr	r1, [sp, #4]
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800132e:	f7fe fefd 	bl	800012c <__udivsi3>
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001332:	210a      	movs	r1, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001334:	3005      	adds	r0, #5
    tmp = tmp / 10U;
 8001336:	f7fe fef9 	bl	800012c <__udivsi3>

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800133a:	2201      	movs	r2, #1
 800133c:	0003      	movs	r3, r0

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800133e:	4390      	bics	r0, r2
 8001340:	40d0      	lsrs	r0, r2
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001342:	4013      	ands	r3, r2
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001344:	1e82      	subs	r2, r0, #2
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001346:	021b      	lsls	r3, r3, #8
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001348:	2afd      	cmp	r2, #253	@ 0xfd
 800134a:	d90d      	bls.n	8001368 <HAL_I2S_Init+0xa4>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800134c:	2310      	movs	r3, #16
 800134e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001350:	4313      	orrs	r3, r2
 8001352:	63a3      	str	r3, [r4, #56]	@ 0x38
    return HAL_ERROR;
 8001354:	2001      	movs	r0, #1

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
  hi2s->State     = HAL_I2S_STATE_READY;

  return HAL_OK;
}
 8001356:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001358:	0029      	movs	r1, r5
 800135a:	f7fe fee7 	bl	800012c <__udivsi3>
 800135e:	230a      	movs	r3, #10
 8001360:	6961      	ldr	r1, [r4, #20]
 8001362:	4358      	muls	r0, r3
 8001364:	e7e3      	b.n	800132e <HAL_I2S_Init+0x6a>
    i2sodd = 0U;
 8001366:	2300      	movs	r3, #0
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001368:	4318      	orrs	r0, r3
 800136a:	6923      	ldr	r3, [r4, #16]
 800136c:	6822      	ldr	r2, [r4, #0]
 800136e:	4318      	orrs	r0, r3
 8001370:	6210      	str	r0, [r2, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001372:	69d1      	ldr	r1, [r2, #28]
 8001374:	68a0      	ldr	r0, [r4, #8]
 8001376:	6863      	ldr	r3, [r4, #4]
 8001378:	4039      	ands	r1, r7
 800137a:	4303      	orrs	r3, r0
 800137c:	430b      	orrs	r3, r1
 800137e:	68e1      	ldr	r1, [r4, #12]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001380:	2000      	movs	r0, #0
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001382:	430b      	orrs	r3, r1
 8001384:	69a1      	ldr	r1, [r4, #24]
 8001386:	430b      	orrs	r3, r1
 8001388:	2180      	movs	r1, #128	@ 0x80
 800138a:	0109      	lsls	r1, r1, #4
 800138c:	430b      	orrs	r3, r1
 800138e:	61d3      	str	r3, [r2, #28]
  hi2s->State     = HAL_I2S_STATE_READY;
 8001390:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001392:	63a0      	str	r0, [r4, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8001394:	7033      	strb	r3, [r6, #0]
  return HAL_OK;
 8001396:	e7de      	b.n	8001356 <HAL_I2S_Init+0x92>
 8001398:	fffff040 	.word	0xfffff040

0800139c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800139c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800139e:	0004      	movs	r4, r0
 80013a0:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013a2:	2800      	cmp	r0, #0
 80013a4:	d102      	bne.n	80013ac <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80013a6:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 80013a8:	b005      	add	sp, #20
 80013aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ac:	6803      	ldr	r3, [r0, #0]
 80013ae:	07db      	lsls	r3, r3, #31
 80013b0:	d433      	bmi.n	800141a <HAL_RCC_OscConfig+0x7e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013b2:	6823      	ldr	r3, [r4, #0]
 80013b4:	079b      	lsls	r3, r3, #30
 80013b6:	d500      	bpl.n	80013ba <HAL_RCC_OscConfig+0x1e>
 80013b8:	e087      	b.n	80014ca <HAL_RCC_OscConfig+0x12e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ba:	6823      	ldr	r3, [r4, #0]
 80013bc:	071b      	lsls	r3, r3, #28
 80013be:	d500      	bpl.n	80013c2 <HAL_RCC_OscConfig+0x26>
 80013c0:	e0c8      	b.n	8001554 <HAL_RCC_OscConfig+0x1b8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013c2:	6823      	ldr	r3, [r4, #0]
 80013c4:	075b      	lsls	r3, r3, #29
 80013c6:	d500      	bpl.n	80013ca <HAL_RCC_OscConfig+0x2e>
 80013c8:	e0eb      	b.n	80015a2 <HAL_RCC_OscConfig+0x206>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80013ca:	6823      	ldr	r3, [r4, #0]
 80013cc:	06db      	lsls	r3, r3, #27
 80013ce:	d51a      	bpl.n	8001406 <HAL_RCC_OscConfig+0x6a>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80013d0:	6962      	ldr	r2, [r4, #20]
 80013d2:	2304      	movs	r3, #4
 80013d4:	4db9      	ldr	r5, [pc, #740]	@ (80016bc <HAL_RCC_OscConfig+0x320>)
 80013d6:	2a01      	cmp	r2, #1
 80013d8:	d000      	beq.n	80013dc <HAL_RCC_OscConfig+0x40>
 80013da:	e154      	b.n	8001686 <HAL_RCC_OscConfig+0x2ea>
      __HAL_RCC_HSI14ADC_DISABLE();
 80013dc:	6b69      	ldr	r1, [r5, #52]	@ 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80013de:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80013e0:	430b      	orrs	r3, r1
 80013e2:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_ENABLE();
 80013e4:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80013e6:	431a      	orrs	r2, r3
 80013e8:	636a      	str	r2, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 80013ea:	f7ff fdd5 	bl	8000f98 <HAL_GetTick>
 80013ee:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80013f0:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80013f2:	423b      	tst	r3, r7
 80013f4:	d100      	bne.n	80013f8 <HAL_RCC_OscConfig+0x5c>
 80013f6:	e13f      	b.n	8001678 <HAL_RCC_OscConfig+0x2dc>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80013f8:	21f8      	movs	r1, #248	@ 0xf8
 80013fa:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 80013fc:	69a3      	ldr	r3, [r4, #24]
 80013fe:	438a      	bics	r2, r1
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	4313      	orrs	r3, r2
 8001404:	636b      	str	r3, [r5, #52]	@ 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001406:	6823      	ldr	r3, [r4, #0]
 8001408:	069b      	lsls	r3, r3, #26
 800140a:	d500      	bpl.n	800140e <HAL_RCC_OscConfig+0x72>
 800140c:	e162      	b.n	80016d4 <HAL_RCC_OscConfig+0x338>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800140e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001410:	2b00      	cmp	r3, #0
 8001412:	d000      	beq.n	8001416 <HAL_RCC_OscConfig+0x7a>
 8001414:	e1a1      	b.n	800175a <HAL_RCC_OscConfig+0x3be>
  return HAL_OK;
 8001416:	2000      	movs	r0, #0
 8001418:	e7c6      	b.n	80013a8 <HAL_RCC_OscConfig+0xc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800141a:	220c      	movs	r2, #12
 800141c:	4da7      	ldr	r5, [pc, #668]	@ (80016bc <HAL_RCC_OscConfig+0x320>)
 800141e:	686b      	ldr	r3, [r5, #4]
 8001420:	4013      	ands	r3, r2
 8001422:	2b04      	cmp	r3, #4
 8001424:	d00b      	beq.n	800143e <HAL_RCC_OscConfig+0xa2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001426:	686b      	ldr	r3, [r5, #4]
 8001428:	4013      	ands	r3, r2
 800142a:	2b08      	cmp	r3, #8
 800142c:	d10e      	bne.n	800144c <HAL_RCC_OscConfig+0xb0>
 800142e:	22c0      	movs	r2, #192	@ 0xc0
 8001430:	686b      	ldr	r3, [r5, #4]
 8001432:	0252      	lsls	r2, r2, #9
 8001434:	4013      	ands	r3, r2
 8001436:	2280      	movs	r2, #128	@ 0x80
 8001438:	0252      	lsls	r2, r2, #9
 800143a:	4293      	cmp	r3, r2
 800143c:	d106      	bne.n	800144c <HAL_RCC_OscConfig+0xb0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800143e:	682b      	ldr	r3, [r5, #0]
 8001440:	039b      	lsls	r3, r3, #14
 8001442:	d5b6      	bpl.n	80013b2 <HAL_RCC_OscConfig+0x16>
 8001444:	6863      	ldr	r3, [r4, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1b3      	bne.n	80013b2 <HAL_RCC_OscConfig+0x16>
 800144a:	e7ac      	b.n	80013a6 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800144c:	6863      	ldr	r3, [r4, #4]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d113      	bne.n	800147a <HAL_RCC_OscConfig+0xde>
 8001452:	2380      	movs	r3, #128	@ 0x80
 8001454:	682a      	ldr	r2, [r5, #0]
 8001456:	025b      	lsls	r3, r3, #9
 8001458:	4313      	orrs	r3, r2
 800145a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800145c:	f7ff fd9c 	bl	8000f98 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001460:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8001462:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001464:	02bf      	lsls	r7, r7, #10
 8001466:	682b      	ldr	r3, [r5, #0]
 8001468:	423b      	tst	r3, r7
 800146a:	d1a2      	bne.n	80013b2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800146c:	f7ff fd94 	bl	8000f98 <HAL_GetTick>
 8001470:	1b80      	subs	r0, r0, r6
 8001472:	2864      	cmp	r0, #100	@ 0x64
 8001474:	d9f7      	bls.n	8001466 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8001476:	2003      	movs	r0, #3
 8001478:	e796      	b.n	80013a8 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800147a:	2b00      	cmp	r3, #0
 800147c:	d115      	bne.n	80014aa <HAL_RCC_OscConfig+0x10e>
 800147e:	682b      	ldr	r3, [r5, #0]
 8001480:	4a8f      	ldr	r2, [pc, #572]	@ (80016c0 <HAL_RCC_OscConfig+0x324>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001482:	2780      	movs	r7, #128	@ 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001484:	4013      	ands	r3, r2
 8001486:	602b      	str	r3, [r5, #0]
 8001488:	682b      	ldr	r3, [r5, #0]
 800148a:	4a8e      	ldr	r2, [pc, #568]	@ (80016c4 <HAL_RCC_OscConfig+0x328>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800148c:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800148e:	4013      	ands	r3, r2
 8001490:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001492:	f7ff fd81 	bl	8000f98 <HAL_GetTick>
 8001496:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001498:	682b      	ldr	r3, [r5, #0]
 800149a:	423b      	tst	r3, r7
 800149c:	d089      	beq.n	80013b2 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800149e:	f7ff fd7b 	bl	8000f98 <HAL_GetTick>
 80014a2:	1b80      	subs	r0, r0, r6
 80014a4:	2864      	cmp	r0, #100	@ 0x64
 80014a6:	d9f7      	bls.n	8001498 <HAL_RCC_OscConfig+0xfc>
 80014a8:	e7e5      	b.n	8001476 <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014aa:	2b05      	cmp	r3, #5
 80014ac:	d105      	bne.n	80014ba <HAL_RCC_OscConfig+0x11e>
 80014ae:	2380      	movs	r3, #128	@ 0x80
 80014b0:	682a      	ldr	r2, [r5, #0]
 80014b2:	02db      	lsls	r3, r3, #11
 80014b4:	4313      	orrs	r3, r2
 80014b6:	602b      	str	r3, [r5, #0]
 80014b8:	e7cb      	b.n	8001452 <HAL_RCC_OscConfig+0xb6>
 80014ba:	682b      	ldr	r3, [r5, #0]
 80014bc:	4a80      	ldr	r2, [pc, #512]	@ (80016c0 <HAL_RCC_OscConfig+0x324>)
 80014be:	4013      	ands	r3, r2
 80014c0:	602b      	str	r3, [r5, #0]
 80014c2:	682b      	ldr	r3, [r5, #0]
 80014c4:	4a7f      	ldr	r2, [pc, #508]	@ (80016c4 <HAL_RCC_OscConfig+0x328>)
 80014c6:	4013      	ands	r3, r2
 80014c8:	e7c7      	b.n	800145a <HAL_RCC_OscConfig+0xbe>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80014ca:	220c      	movs	r2, #12
 80014cc:	4d7b      	ldr	r5, [pc, #492]	@ (80016bc <HAL_RCC_OscConfig+0x320>)
 80014ce:	686b      	ldr	r3, [r5, #4]
 80014d0:	4213      	tst	r3, r2
 80014d2:	d00b      	beq.n	80014ec <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80014d4:	686b      	ldr	r3, [r5, #4]
 80014d6:	4013      	ands	r3, r2
 80014d8:	2b08      	cmp	r3, #8
 80014da:	d116      	bne.n	800150a <HAL_RCC_OscConfig+0x16e>
 80014dc:	22c0      	movs	r2, #192	@ 0xc0
 80014de:	686b      	ldr	r3, [r5, #4]
 80014e0:	0252      	lsls	r2, r2, #9
 80014e2:	4013      	ands	r3, r2
 80014e4:	2280      	movs	r2, #128	@ 0x80
 80014e6:	0212      	lsls	r2, r2, #8
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d10e      	bne.n	800150a <HAL_RCC_OscConfig+0x16e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ec:	682b      	ldr	r3, [r5, #0]
 80014ee:	079b      	lsls	r3, r3, #30
 80014f0:	d503      	bpl.n	80014fa <HAL_RCC_OscConfig+0x15e>
 80014f2:	68e3      	ldr	r3, [r4, #12]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d000      	beq.n	80014fa <HAL_RCC_OscConfig+0x15e>
 80014f8:	e755      	b.n	80013a6 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fa:	21f8      	movs	r1, #248	@ 0xf8
 80014fc:	682a      	ldr	r2, [r5, #0]
 80014fe:	6923      	ldr	r3, [r4, #16]
 8001500:	438a      	bics	r2, r1
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	4313      	orrs	r3, r2
 8001506:	602b      	str	r3, [r5, #0]
 8001508:	e757      	b.n	80013ba <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800150a:	68e2      	ldr	r2, [r4, #12]
 800150c:	2301      	movs	r3, #1
 800150e:	2a00      	cmp	r2, #0
 8001510:	d00f      	beq.n	8001532 <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_HSI_ENABLE();
 8001512:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001514:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8001516:	4313      	orrs	r3, r2
 8001518:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800151a:	f7ff fd3d 	bl	8000f98 <HAL_GetTick>
 800151e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001520:	682b      	ldr	r3, [r5, #0]
 8001522:	423b      	tst	r3, r7
 8001524:	d1e9      	bne.n	80014fa <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001526:	f7ff fd37 	bl	8000f98 <HAL_GetTick>
 800152a:	1b80      	subs	r0, r0, r6
 800152c:	2802      	cmp	r0, #2
 800152e:	d9f7      	bls.n	8001520 <HAL_RCC_OscConfig+0x184>
 8001530:	e7a1      	b.n	8001476 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI_DISABLE();
 8001532:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001534:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8001536:	439a      	bics	r2, r3
 8001538:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 800153a:	f7ff fd2d 	bl	8000f98 <HAL_GetTick>
 800153e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001540:	682b      	ldr	r3, [r5, #0]
 8001542:	423b      	tst	r3, r7
 8001544:	d100      	bne.n	8001548 <HAL_RCC_OscConfig+0x1ac>
 8001546:	e738      	b.n	80013ba <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001548:	f7ff fd26 	bl	8000f98 <HAL_GetTick>
 800154c:	1b80      	subs	r0, r0, r6
 800154e:	2802      	cmp	r0, #2
 8001550:	d9f6      	bls.n	8001540 <HAL_RCC_OscConfig+0x1a4>
 8001552:	e790      	b.n	8001476 <HAL_RCC_OscConfig+0xda>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001554:	69e2      	ldr	r2, [r4, #28]
 8001556:	2301      	movs	r3, #1
 8001558:	4d58      	ldr	r5, [pc, #352]	@ (80016bc <HAL_RCC_OscConfig+0x320>)
 800155a:	2a00      	cmp	r2, #0
 800155c:	d010      	beq.n	8001580 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_LSI_ENABLE();
 800155e:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001560:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8001562:	4313      	orrs	r3, r2
 8001564:	626b      	str	r3, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8001566:	f7ff fd17 	bl	8000f98 <HAL_GetTick>
 800156a:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800156c:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800156e:	423b      	tst	r3, r7
 8001570:	d000      	beq.n	8001574 <HAL_RCC_OscConfig+0x1d8>
 8001572:	e726      	b.n	80013c2 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001574:	f7ff fd10 	bl	8000f98 <HAL_GetTick>
 8001578:	1b80      	subs	r0, r0, r6
 800157a:	2802      	cmp	r0, #2
 800157c:	d9f6      	bls.n	800156c <HAL_RCC_OscConfig+0x1d0>
 800157e:	e77a      	b.n	8001476 <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_LSI_DISABLE();
 8001580:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001582:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8001584:	439a      	bics	r2, r3
 8001586:	626a      	str	r2, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8001588:	f7ff fd06 	bl	8000f98 <HAL_GetTick>
 800158c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800158e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8001590:	423b      	tst	r3, r7
 8001592:	d100      	bne.n	8001596 <HAL_RCC_OscConfig+0x1fa>
 8001594:	e715      	b.n	80013c2 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001596:	f7ff fcff 	bl	8000f98 <HAL_GetTick>
 800159a:	1b80      	subs	r0, r0, r6
 800159c:	2802      	cmp	r0, #2
 800159e:	d9f6      	bls.n	800158e <HAL_RCC_OscConfig+0x1f2>
 80015a0:	e769      	b.n	8001476 <HAL_RCC_OscConfig+0xda>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015a2:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 80015a4:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015a6:	4d45      	ldr	r5, [pc, #276]	@ (80016bc <HAL_RCC_OscConfig+0x320>)
 80015a8:	0552      	lsls	r2, r2, #21
 80015aa:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 80015ac:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ae:	4213      	tst	r3, r2
 80015b0:	d108      	bne.n	80015c4 <HAL_RCC_OscConfig+0x228>
      __HAL_RCC_PWR_CLK_ENABLE();
 80015b2:	69eb      	ldr	r3, [r5, #28]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	61eb      	str	r3, [r5, #28]
 80015b8:	69eb      	ldr	r3, [r5, #28]
 80015ba:	4013      	ands	r3, r2
 80015bc:	9303      	str	r3, [sp, #12]
 80015be:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80015c0:	2301      	movs	r3, #1
 80015c2:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c4:	2780      	movs	r7, #128	@ 0x80
 80015c6:	4e40      	ldr	r6, [pc, #256]	@ (80016c8 <HAL_RCC_OscConfig+0x32c>)
 80015c8:	007f      	lsls	r7, r7, #1
 80015ca:	6833      	ldr	r3, [r6, #0]
 80015cc:	423b      	tst	r3, r7
 80015ce:	d015      	beq.n	80015fc <HAL_RCC_OscConfig+0x260>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015d0:	68a3      	ldr	r3, [r4, #8]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d122      	bne.n	800161c <HAL_RCC_OscConfig+0x280>
 80015d6:	6a2a      	ldr	r2, [r5, #32]
 80015d8:	4313      	orrs	r3, r2
 80015da:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80015dc:	f7ff fcdc 	bl	8000f98 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e0:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 80015e2:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e4:	6a2b      	ldr	r3, [r5, #32]
 80015e6:	423b      	tst	r3, r7
 80015e8:	d03f      	beq.n	800166a <HAL_RCC_OscConfig+0x2ce>
    if(pwrclkchanged == SET)
 80015ea:	9b00      	ldr	r3, [sp, #0]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d000      	beq.n	80015f2 <HAL_RCC_OscConfig+0x256>
 80015f0:	e6eb      	b.n	80013ca <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80015f2:	69eb      	ldr	r3, [r5, #28]
 80015f4:	4a35      	ldr	r2, [pc, #212]	@ (80016cc <HAL_RCC_OscConfig+0x330>)
 80015f6:	4013      	ands	r3, r2
 80015f8:	61eb      	str	r3, [r5, #28]
 80015fa:	e6e6      	b.n	80013ca <HAL_RCC_OscConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015fc:	6833      	ldr	r3, [r6, #0]
 80015fe:	433b      	orrs	r3, r7
 8001600:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001602:	f7ff fcc9 	bl	8000f98 <HAL_GetTick>
 8001606:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001608:	6833      	ldr	r3, [r6, #0]
 800160a:	423b      	tst	r3, r7
 800160c:	d1e0      	bne.n	80015d0 <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800160e:	f7ff fcc3 	bl	8000f98 <HAL_GetTick>
 8001612:	9b01      	ldr	r3, [sp, #4]
 8001614:	1ac0      	subs	r0, r0, r3
 8001616:	2864      	cmp	r0, #100	@ 0x64
 8001618:	d9f6      	bls.n	8001608 <HAL_RCC_OscConfig+0x26c>
 800161a:	e72c      	b.n	8001476 <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800161c:	2201      	movs	r2, #1
 800161e:	2b00      	cmp	r3, #0
 8001620:	d114      	bne.n	800164c <HAL_RCC_OscConfig+0x2b0>
 8001622:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001624:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001626:	4393      	bics	r3, r2
 8001628:	622b      	str	r3, [r5, #32]
 800162a:	6a2b      	ldr	r3, [r5, #32]
 800162c:	3203      	adds	r2, #3
 800162e:	4393      	bics	r3, r2
 8001630:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8001632:	f7ff fcb1 	bl	8000f98 <HAL_GetTick>
 8001636:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001638:	6a2b      	ldr	r3, [r5, #32]
 800163a:	423b      	tst	r3, r7
 800163c:	d0d5      	beq.n	80015ea <HAL_RCC_OscConfig+0x24e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800163e:	f7ff fcab 	bl	8000f98 <HAL_GetTick>
 8001642:	4b23      	ldr	r3, [pc, #140]	@ (80016d0 <HAL_RCC_OscConfig+0x334>)
 8001644:	1b80      	subs	r0, r0, r6
 8001646:	4298      	cmp	r0, r3
 8001648:	d9f6      	bls.n	8001638 <HAL_RCC_OscConfig+0x29c>
 800164a:	e714      	b.n	8001476 <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800164c:	2b05      	cmp	r3, #5
 800164e:	d105      	bne.n	800165c <HAL_RCC_OscConfig+0x2c0>
 8001650:	6a29      	ldr	r1, [r5, #32]
 8001652:	3b01      	subs	r3, #1
 8001654:	430b      	orrs	r3, r1
 8001656:	622b      	str	r3, [r5, #32]
 8001658:	6a2b      	ldr	r3, [r5, #32]
 800165a:	e7bd      	b.n	80015d8 <HAL_RCC_OscConfig+0x23c>
 800165c:	6a2b      	ldr	r3, [r5, #32]
 800165e:	4393      	bics	r3, r2
 8001660:	2204      	movs	r2, #4
 8001662:	622b      	str	r3, [r5, #32]
 8001664:	6a2b      	ldr	r3, [r5, #32]
 8001666:	4393      	bics	r3, r2
 8001668:	e7b7      	b.n	80015da <HAL_RCC_OscConfig+0x23e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800166a:	f7ff fc95 	bl	8000f98 <HAL_GetTick>
 800166e:	4b18      	ldr	r3, [pc, #96]	@ (80016d0 <HAL_RCC_OscConfig+0x334>)
 8001670:	1b80      	subs	r0, r0, r6
 8001672:	4298      	cmp	r0, r3
 8001674:	d9b6      	bls.n	80015e4 <HAL_RCC_OscConfig+0x248>
 8001676:	e6fe      	b.n	8001476 <HAL_RCC_OscConfig+0xda>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001678:	f7ff fc8e 	bl	8000f98 <HAL_GetTick>
 800167c:	1b80      	subs	r0, r0, r6
 800167e:	2802      	cmp	r0, #2
 8001680:	d800      	bhi.n	8001684 <HAL_RCC_OscConfig+0x2e8>
 8001682:	e6b5      	b.n	80013f0 <HAL_RCC_OscConfig+0x54>
 8001684:	e6f7      	b.n	8001476 <HAL_RCC_OscConfig+0xda>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001686:	3205      	adds	r2, #5
 8001688:	d103      	bne.n	8001692 <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI14ADC_ENABLE();
 800168a:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 800168c:	439a      	bics	r2, r3
 800168e:	636a      	str	r2, [r5, #52]	@ 0x34
 8001690:	e6b2      	b.n	80013f8 <HAL_RCC_OscConfig+0x5c>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001692:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001694:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001696:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8001698:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 800169a:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_DISABLE();
 800169c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800169e:	4393      	bics	r3, r2
 80016a0:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 80016a2:	f7ff fc79 	bl	8000f98 <HAL_GetTick>
 80016a6:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80016a8:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80016aa:	423b      	tst	r3, r7
 80016ac:	d100      	bne.n	80016b0 <HAL_RCC_OscConfig+0x314>
 80016ae:	e6aa      	b.n	8001406 <HAL_RCC_OscConfig+0x6a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80016b0:	f7ff fc72 	bl	8000f98 <HAL_GetTick>
 80016b4:	1b80      	subs	r0, r0, r6
 80016b6:	2802      	cmp	r0, #2
 80016b8:	d9f6      	bls.n	80016a8 <HAL_RCC_OscConfig+0x30c>
 80016ba:	e6dc      	b.n	8001476 <HAL_RCC_OscConfig+0xda>
 80016bc:	40021000 	.word	0x40021000
 80016c0:	fffeffff 	.word	0xfffeffff
 80016c4:	fffbffff 	.word	0xfffbffff
 80016c8:	40007000 	.word	0x40007000
 80016cc:	efffffff 	.word	0xefffffff
 80016d0:	00001388 	.word	0x00001388
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80016d4:	220c      	movs	r2, #12
 80016d6:	4d55      	ldr	r5, [pc, #340]	@ (800182c <HAL_RCC_OscConfig+0x490>)
 80016d8:	686b      	ldr	r3, [r5, #4]
 80016da:	4013      	ands	r3, r2
 80016dc:	4293      	cmp	r3, r2
 80016de:	d009      	beq.n	80016f4 <HAL_RCC_OscConfig+0x358>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80016e0:	686b      	ldr	r3, [r5, #4]
 80016e2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80016e4:	2b08      	cmp	r3, #8
 80016e6:	d10e      	bne.n	8001706 <HAL_RCC_OscConfig+0x36a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80016e8:	22c0      	movs	r2, #192	@ 0xc0
 80016ea:	686b      	ldr	r3, [r5, #4]
 80016ec:	0252      	lsls	r2, r2, #9
 80016ee:	4013      	ands	r3, r2
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d108      	bne.n	8001706 <HAL_RCC_OscConfig+0x36a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80016f4:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80016f6:	039b      	lsls	r3, r3, #14
 80016f8:	d400      	bmi.n	80016fc <HAL_RCC_OscConfig+0x360>
 80016fa:	e688      	b.n	800140e <HAL_RCC_OscConfig+0x72>
 80016fc:	6a23      	ldr	r3, [r4, #32]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d000      	beq.n	8001704 <HAL_RCC_OscConfig+0x368>
 8001702:	e650      	b.n	80013a6 <HAL_RCC_OscConfig+0xa>
 8001704:	e683      	b.n	800140e <HAL_RCC_OscConfig+0x72>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001706:	6a23      	ldr	r3, [r4, #32]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d013      	beq.n	8001734 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_HSI48_ENABLE();
 800170c:	2380      	movs	r3, #128	@ 0x80
 800170e:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8001710:	025b      	lsls	r3, r3, #9
 8001712:	4313      	orrs	r3, r2
 8001714:	636b      	str	r3, [r5, #52]	@ 0x34
        tickstart = HAL_GetTick();
 8001716:	f7ff fc3f 	bl	8000f98 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800171a:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 800171c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800171e:	02bf      	lsls	r7, r7, #10
 8001720:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001722:	423b      	tst	r3, r7
 8001724:	d000      	beq.n	8001728 <HAL_RCC_OscConfig+0x38c>
 8001726:	e672      	b.n	800140e <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001728:	f7ff fc36 	bl	8000f98 <HAL_GetTick>
 800172c:	1b80      	subs	r0, r0, r6
 800172e:	2802      	cmp	r0, #2
 8001730:	d9f6      	bls.n	8001720 <HAL_RCC_OscConfig+0x384>
 8001732:	e6a0      	b.n	8001476 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI48_DISABLE();
 8001734:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001736:	4a3e      	ldr	r2, [pc, #248]	@ (8001830 <HAL_RCC_OscConfig+0x494>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001738:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI48_DISABLE();
 800173a:	4013      	ands	r3, r2
 800173c:	636b      	str	r3, [r5, #52]	@ 0x34
        tickstart = HAL_GetTick();
 800173e:	f7ff fc2b 	bl	8000f98 <HAL_GetTick>
 8001742:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001744:	02bf      	lsls	r7, r7, #10
 8001746:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001748:	423b      	tst	r3, r7
 800174a:	d100      	bne.n	800174e <HAL_RCC_OscConfig+0x3b2>
 800174c:	e65f      	b.n	800140e <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800174e:	f7ff fc23 	bl	8000f98 <HAL_GetTick>
 8001752:	1b80      	subs	r0, r0, r6
 8001754:	2802      	cmp	r0, #2
 8001756:	d9f6      	bls.n	8001746 <HAL_RCC_OscConfig+0x3aa>
 8001758:	e68d      	b.n	8001476 <HAL_RCC_OscConfig+0xda>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800175a:	210c      	movs	r1, #12
 800175c:	4d33      	ldr	r5, [pc, #204]	@ (800182c <HAL_RCC_OscConfig+0x490>)
 800175e:	686a      	ldr	r2, [r5, #4]
 8001760:	400a      	ands	r2, r1
 8001762:	2a08      	cmp	r2, #8
 8001764:	d047      	beq.n	80017f6 <HAL_RCC_OscConfig+0x45a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001766:	4a33      	ldr	r2, [pc, #204]	@ (8001834 <HAL_RCC_OscConfig+0x498>)
 8001768:	2b02      	cmp	r3, #2
 800176a:	d132      	bne.n	80017d2 <HAL_RCC_OscConfig+0x436>
        __HAL_RCC_PLL_DISABLE();
 800176c:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800176e:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8001770:	4013      	ands	r3, r2
 8001772:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001774:	f7ff fc10 	bl	8000f98 <HAL_GetTick>
 8001778:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800177a:	04bf      	lsls	r7, r7, #18
 800177c:	682b      	ldr	r3, [r5, #0]
 800177e:	423b      	tst	r3, r7
 8001780:	d121      	bne.n	80017c6 <HAL_RCC_OscConfig+0x42a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001782:	220f      	movs	r2, #15
 8001784:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001786:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001788:	4393      	bics	r3, r2
 800178a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800178c:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800178e:	4313      	orrs	r3, r2
 8001790:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8001792:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001794:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001796:	686a      	ldr	r2, [r5, #4]
 8001798:	430b      	orrs	r3, r1
 800179a:	4927      	ldr	r1, [pc, #156]	@ (8001838 <HAL_RCC_OscConfig+0x49c>)
 800179c:	400a      	ands	r2, r1
 800179e:	4313      	orrs	r3, r2
 80017a0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80017a2:	2380      	movs	r3, #128	@ 0x80
 80017a4:	682a      	ldr	r2, [r5, #0]
 80017a6:	045b      	lsls	r3, r3, #17
 80017a8:	4313      	orrs	r3, r2
 80017aa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80017ac:	f7ff fbf4 	bl	8000f98 <HAL_GetTick>
 80017b0:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017b2:	682b      	ldr	r3, [r5, #0]
 80017b4:	4233      	tst	r3, r6
 80017b6:	d000      	beq.n	80017ba <HAL_RCC_OscConfig+0x41e>
 80017b8:	e62d      	b.n	8001416 <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ba:	f7ff fbed 	bl	8000f98 <HAL_GetTick>
 80017be:	1b00      	subs	r0, r0, r4
 80017c0:	2802      	cmp	r0, #2
 80017c2:	d9f6      	bls.n	80017b2 <HAL_RCC_OscConfig+0x416>
 80017c4:	e657      	b.n	8001476 <HAL_RCC_OscConfig+0xda>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c6:	f7ff fbe7 	bl	8000f98 <HAL_GetTick>
 80017ca:	1b80      	subs	r0, r0, r6
 80017cc:	2802      	cmp	r0, #2
 80017ce:	d9d5      	bls.n	800177c <HAL_RCC_OscConfig+0x3e0>
 80017d0:	e651      	b.n	8001476 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_PLL_DISABLE();
 80017d2:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017d4:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 80017d6:	4013      	ands	r3, r2
 80017d8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80017da:	f7ff fbdd 	bl	8000f98 <HAL_GetTick>
 80017de:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e0:	04b6      	lsls	r6, r6, #18
 80017e2:	682b      	ldr	r3, [r5, #0]
 80017e4:	4233      	tst	r3, r6
 80017e6:	d100      	bne.n	80017ea <HAL_RCC_OscConfig+0x44e>
 80017e8:	e615      	b.n	8001416 <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ea:	f7ff fbd5 	bl	8000f98 <HAL_GetTick>
 80017ee:	1b00      	subs	r0, r0, r4
 80017f0:	2802      	cmp	r0, #2
 80017f2:	d9f6      	bls.n	80017e2 <HAL_RCC_OscConfig+0x446>
 80017f4:	e63f      	b.n	8001476 <HAL_RCC_OscConfig+0xda>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d100      	bne.n	80017fc <HAL_RCC_OscConfig+0x460>
 80017fa:	e5d4      	b.n	80013a6 <HAL_RCC_OscConfig+0xa>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fc:	22c0      	movs	r2, #192	@ 0xc0
        pll_config  = RCC->CFGR;
 80017fe:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001800:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001802:	0252      	lsls	r2, r2, #9
        pll_config2 = RCC->CFGR2;
 8001804:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001806:	4002      	ands	r2, r0
 8001808:	428a      	cmp	r2, r1
 800180a:	d000      	beq.n	800180e <HAL_RCC_OscConfig+0x472>
 800180c:	e5cb      	b.n	80013a6 <HAL_RCC_OscConfig+0xa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800180e:	220f      	movs	r2, #15
 8001810:	4013      	ands	r3, r2
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001812:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8001814:	4293      	cmp	r3, r2
 8001816:	d000      	beq.n	800181a <HAL_RCC_OscConfig+0x47e>
 8001818:	e5c5      	b.n	80013a6 <HAL_RCC_OscConfig+0xa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800181a:	23f0      	movs	r3, #240	@ 0xf0
 800181c:	039b      	lsls	r3, r3, #14
 800181e:	4018      	ands	r0, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001820:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001822:	1ac0      	subs	r0, r0, r3
 8001824:	1e43      	subs	r3, r0, #1
 8001826:	4198      	sbcs	r0, r3
 8001828:	b2c0      	uxtb	r0, r0
 800182a:	e5bd      	b.n	80013a8 <HAL_RCC_OscConfig+0xc>
 800182c:	40021000 	.word	0x40021000
 8001830:	fffeffff 	.word	0xfffeffff
 8001834:	feffffff 	.word	0xfeffffff
 8001838:	ffc27fff 	.word	0xffc27fff

0800183c <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800183c:	200c      	movs	r0, #12
{
 800183e:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8001840:	4d13      	ldr	r5, [pc, #76]	@ (8001890 <HAL_RCC_GetSysClockFreq+0x54>)
 8001842:	686b      	ldr	r3, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001844:	4018      	ands	r0, r3
 8001846:	2808      	cmp	r0, #8
 8001848:	d008      	beq.n	800185c <HAL_RCC_GetSysClockFreq+0x20>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800184a:	380c      	subs	r0, #12
 800184c:	4243      	negs	r3, r0
 800184e:	4158      	adcs	r0, r3
 8001850:	4b10      	ldr	r3, [pc, #64]	@ (8001894 <HAL_RCC_GetSysClockFreq+0x58>)
 8001852:	4240      	negs	r0, r0
 8001854:	4018      	ands	r0, r3
 8001856:	4b10      	ldr	r3, [pc, #64]	@ (8001898 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001858:	18c0      	adds	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800185a:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800185c:	200f      	movs	r0, #15
 800185e:	490f      	ldr	r1, [pc, #60]	@ (800189c <HAL_RCC_GetSysClockFreq+0x60>)
 8001860:	0c9a      	lsrs	r2, r3, #18
 8001862:	4002      	ands	r2, r0
 8001864:	5c8c      	ldrb	r4, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001866:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8001868:	490d      	ldr	r1, [pc, #52]	@ (80018a0 <HAL_RCC_GetSysClockFreq+0x64>)
 800186a:	4002      	ands	r2, r0
 800186c:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800186e:	22c0      	movs	r2, #192	@ 0xc0
 8001870:	2080      	movs	r0, #128	@ 0x80
 8001872:	0252      	lsls	r2, r2, #9
 8001874:	4013      	ands	r3, r2
 8001876:	0240      	lsls	r0, r0, #9
 8001878:	4283      	cmp	r3, r0
 800187a:	d101      	bne.n	8001880 <HAL_RCC_GetSysClockFreq+0x44>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800187c:	4806      	ldr	r0, [pc, #24]	@ (8001898 <HAL_RCC_GetSysClockFreq+0x5c>)
 800187e:	e002      	b.n	8001886 <HAL_RCC_GetSysClockFreq+0x4a>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001880:	4293      	cmp	r3, r2
 8001882:	d1fb      	bne.n	800187c <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001884:	4807      	ldr	r0, [pc, #28]	@ (80018a4 <HAL_RCC_GetSysClockFreq+0x68>)
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001886:	f7fe fc51 	bl	800012c <__udivsi3>
 800188a:	4360      	muls	r0, r4
 800188c:	e7e5      	b.n	800185a <HAL_RCC_GetSysClockFreq+0x1e>
 800188e:	46c0      	nop			@ (mov r8, r8)
 8001890:	40021000 	.word	0x40021000
 8001894:	02625a00 	.word	0x02625a00
 8001898:	007a1200 	.word	0x007a1200
 800189c:	08002fa4 	.word	0x08002fa4
 80018a0:	08002f94 	.word	0x08002f94
 80018a4:	02dc6c00 	.word	0x02dc6c00

080018a8 <HAL_RCC_ClockConfig>:
{
 80018a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80018aa:	0004      	movs	r4, r0
 80018ac:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 80018ae:	2800      	cmp	r0, #0
 80018b0:	d101      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 80018b2:	2001      	movs	r0, #1
}
 80018b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018b6:	2201      	movs	r2, #1
 80018b8:	4d3a      	ldr	r5, [pc, #232]	@ (80019a4 <HAL_RCC_ClockConfig+0xfc>)
 80018ba:	682b      	ldr	r3, [r5, #0]
 80018bc:	4013      	ands	r3, r2
 80018be:	428b      	cmp	r3, r1
 80018c0:	d31c      	bcc.n	80018fc <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c2:	6822      	ldr	r2, [r4, #0]
 80018c4:	0793      	lsls	r3, r2, #30
 80018c6:	d422      	bmi.n	800190e <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018c8:	07d2      	lsls	r2, r2, #31
 80018ca:	d42f      	bmi.n	800192c <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018cc:	2301      	movs	r3, #1
 80018ce:	682a      	ldr	r2, [r5, #0]
 80018d0:	401a      	ands	r2, r3
 80018d2:	42ba      	cmp	r2, r7
 80018d4:	d857      	bhi.n	8001986 <HAL_RCC_ClockConfig+0xde>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d6:	6823      	ldr	r3, [r4, #0]
 80018d8:	4d33      	ldr	r5, [pc, #204]	@ (80019a8 <HAL_RCC_ClockConfig+0x100>)
 80018da:	075b      	lsls	r3, r3, #29
 80018dc:	d45a      	bmi.n	8001994 <HAL_RCC_ClockConfig+0xec>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80018de:	f7ff ffad 	bl	800183c <HAL_RCC_GetSysClockFreq>
 80018e2:	686b      	ldr	r3, [r5, #4]
 80018e4:	4a31      	ldr	r2, [pc, #196]	@ (80019ac <HAL_RCC_ClockConfig+0x104>)
 80018e6:	061b      	lsls	r3, r3, #24
 80018e8:	0f1b      	lsrs	r3, r3, #28
 80018ea:	5cd3      	ldrb	r3, [r2, r3]
 80018ec:	4930      	ldr	r1, [pc, #192]	@ (80019b0 <HAL_RCC_ClockConfig+0x108>)
 80018ee:	40d8      	lsrs	r0, r3
 80018f0:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80018f2:	2000      	movs	r0, #0
 80018f4:	f7ff fb10 	bl	8000f18 <HAL_InitTick>
  return HAL_OK;
 80018f8:	2000      	movs	r0, #0
 80018fa:	e7db      	b.n	80018b4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018fc:	682b      	ldr	r3, [r5, #0]
 80018fe:	4393      	bics	r3, r2
 8001900:	430b      	orrs	r3, r1
 8001902:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001904:	682b      	ldr	r3, [r5, #0]
 8001906:	4013      	ands	r3, r2
 8001908:	428b      	cmp	r3, r1
 800190a:	d1d2      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xa>
 800190c:	e7d9      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800190e:	4926      	ldr	r1, [pc, #152]	@ (80019a8 <HAL_RCC_ClockConfig+0x100>)
 8001910:	0753      	lsls	r3, r2, #29
 8001912:	d504      	bpl.n	800191e <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001914:	23e0      	movs	r3, #224	@ 0xe0
 8001916:	6848      	ldr	r0, [r1, #4]
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	4303      	orrs	r3, r0
 800191c:	604b      	str	r3, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800191e:	20f0      	movs	r0, #240	@ 0xf0
 8001920:	684b      	ldr	r3, [r1, #4]
 8001922:	4383      	bics	r3, r0
 8001924:	68a0      	ldr	r0, [r4, #8]
 8001926:	4303      	orrs	r3, r0
 8001928:	604b      	str	r3, [r1, #4]
 800192a:	e7cd      	b.n	80018c8 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800192c:	6862      	ldr	r2, [r4, #4]
 800192e:	4e1e      	ldr	r6, [pc, #120]	@ (80019a8 <HAL_RCC_ClockConfig+0x100>)
 8001930:	2a01      	cmp	r2, #1
 8001932:	d103      	bne.n	800193c <HAL_RCC_ClockConfig+0x94>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001934:	6833      	ldr	r3, [r6, #0]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001936:	039b      	lsls	r3, r3, #14
 8001938:	d405      	bmi.n	8001946 <HAL_RCC_ClockConfig+0x9e>
 800193a:	e7ba      	b.n	80018b2 <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800193c:	2a02      	cmp	r2, #2
 800193e:	d11a      	bne.n	8001976 <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001940:	6833      	ldr	r3, [r6, #0]
 8001942:	019b      	lsls	r3, r3, #6
 8001944:	d5b5      	bpl.n	80018b2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001946:	2103      	movs	r1, #3
 8001948:	6873      	ldr	r3, [r6, #4]
 800194a:	438b      	bics	r3, r1
 800194c:	4313      	orrs	r3, r2
 800194e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001950:	f7ff fb22 	bl	8000f98 <HAL_GetTick>
 8001954:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001956:	230c      	movs	r3, #12
 8001958:	6872      	ldr	r2, [r6, #4]
 800195a:	401a      	ands	r2, r3
 800195c:	6863      	ldr	r3, [r4, #4]
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	429a      	cmp	r2, r3
 8001962:	d0b3      	beq.n	80018cc <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001964:	f7ff fb18 	bl	8000f98 <HAL_GetTick>
 8001968:	9b01      	ldr	r3, [sp, #4]
 800196a:	1ac0      	subs	r0, r0, r3
 800196c:	4b11      	ldr	r3, [pc, #68]	@ (80019b4 <HAL_RCC_ClockConfig+0x10c>)
 800196e:	4298      	cmp	r0, r3
 8001970:	d9f1      	bls.n	8001956 <HAL_RCC_ClockConfig+0xae>
        return HAL_TIMEOUT;
 8001972:	2003      	movs	r0, #3
 8001974:	e79e      	b.n	80018b4 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001976:	2a03      	cmp	r2, #3
 8001978:	d101      	bne.n	800197e <HAL_RCC_ClockConfig+0xd6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800197a:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 800197c:	e7db      	b.n	8001936 <HAL_RCC_ClockConfig+0x8e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800197e:	6833      	ldr	r3, [r6, #0]
 8001980:	079b      	lsls	r3, r3, #30
 8001982:	d4e0      	bmi.n	8001946 <HAL_RCC_ClockConfig+0x9e>
 8001984:	e795      	b.n	80018b2 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001986:	682a      	ldr	r2, [r5, #0]
 8001988:	439a      	bics	r2, r3
 800198a:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800198c:	682a      	ldr	r2, [r5, #0]
 800198e:	421a      	tst	r2, r3
 8001990:	d0a1      	beq.n	80018d6 <HAL_RCC_ClockConfig+0x2e>
 8001992:	e78e      	b.n	80018b2 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001994:	686b      	ldr	r3, [r5, #4]
 8001996:	4a08      	ldr	r2, [pc, #32]	@ (80019b8 <HAL_RCC_ClockConfig+0x110>)
 8001998:	4013      	ands	r3, r2
 800199a:	68e2      	ldr	r2, [r4, #12]
 800199c:	4313      	orrs	r3, r2
 800199e:	606b      	str	r3, [r5, #4]
 80019a0:	e79d      	b.n	80018de <HAL_RCC_ClockConfig+0x36>
 80019a2:	46c0      	nop			@ (mov r8, r8)
 80019a4:	40022000 	.word	0x40022000
 80019a8:	40021000 	.word	0x40021000
 80019ac:	08002b10 	.word	0x08002b10
 80019b0:	20000000 	.word	0x20000000
 80019b4:	00001388 	.word	0x00001388
 80019b8:	fffff8ff 	.word	0xfffff8ff

080019bc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80019bc:	4b04      	ldr	r3, [pc, #16]	@ (80019d0 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 80019be:	4a05      	ldr	r2, [pc, #20]	@ (80019d4 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	4905      	ldr	r1, [pc, #20]	@ (80019d8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80019c4:	055b      	lsls	r3, r3, #21
 80019c6:	0f5b      	lsrs	r3, r3, #29
 80019c8:	5ccb      	ldrb	r3, [r1, r3]
 80019ca:	6810      	ldr	r0, [r2, #0]
 80019cc:	40d8      	lsrs	r0, r3
}    
 80019ce:	4770      	bx	lr
 80019d0:	40021000 	.word	0x40021000
 80019d4:	20000000 	.word	0x20000000
 80019d8:	08002b08 	.word	0x08002b08

080019dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019dc:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80019de:	6803      	ldr	r3, [r0, #0]
{
 80019e0:	0005      	movs	r5, r0
 80019e2:	b085      	sub	sp, #20
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80019e4:	03db      	lsls	r3, r3, #15
 80019e6:	d52b      	bpl.n	8001a40 <HAL_RCCEx_PeriphCLKConfig+0x64>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019e8:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 80019ea:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ec:	4c41      	ldr	r4, [pc, #260]	@ (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80019ee:	0552      	lsls	r2, r2, #21
 80019f0:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 80019f2:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019f4:	4213      	tst	r3, r2
 80019f6:	d108      	bne.n	8001a0a <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80019f8:	69e3      	ldr	r3, [r4, #28]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61e3      	str	r3, [r4, #28]
 80019fe:	69e3      	ldr	r3, [r4, #28]
 8001a00:	4013      	ands	r3, r2
 8001a02:	9303      	str	r3, [sp, #12]
 8001a04:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001a06:	2301      	movs	r3, #1
 8001a08:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a0a:	2780      	movs	r7, #128	@ 0x80
 8001a0c:	4e3a      	ldr	r6, [pc, #232]	@ (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8001a0e:	007f      	lsls	r7, r7, #1
 8001a10:	6833      	ldr	r3, [r6, #0]
 8001a12:	423b      	tst	r3, r7
 8001a14:	d034      	beq.n	8001a80 <HAL_RCCEx_PeriphCLKConfig+0xa4>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a16:	6a21      	ldr	r1, [r4, #32]
 8001a18:	22c0      	movs	r2, #192	@ 0xc0
 8001a1a:	0008      	movs	r0, r1
 8001a1c:	0092      	lsls	r2, r2, #2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a1e:	686b      	ldr	r3, [r5, #4]
 8001a20:	4e36      	ldr	r6, [pc, #216]	@ (8001afc <HAL_RCCEx_PeriphCLKConfig+0x120>)
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a22:	4010      	ands	r0, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a24:	4211      	tst	r1, r2
 8001a26:	d13d      	bne.n	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a28:	6a23      	ldr	r3, [r4, #32]
 8001a2a:	686a      	ldr	r2, [r5, #4]
 8001a2c:	4033      	ands	r3, r6
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a32:	9b00      	ldr	r3, [sp, #0]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d103      	bne.n	8001a40 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a38:	69e3      	ldr	r3, [r4, #28]
 8001a3a:	4a31      	ldr	r2, [pc, #196]	@ (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a40:	682b      	ldr	r3, [r5, #0]
 8001a42:	07da      	lsls	r2, r3, #31
 8001a44:	d506      	bpl.n	8001a54 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a46:	2003      	movs	r0, #3
 8001a48:	492a      	ldr	r1, [pc, #168]	@ (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001a4a:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8001a4c:	4382      	bics	r2, r0
 8001a4e:	68a8      	ldr	r0, [r5, #8]
 8001a50:	4302      	orrs	r2, r0
 8001a52:	630a      	str	r2, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001a54:	069a      	lsls	r2, r3, #26
 8001a56:	d506      	bpl.n	8001a66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001a58:	2010      	movs	r0, #16
 8001a5a:	4926      	ldr	r1, [pc, #152]	@ (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001a5c:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8001a5e:	4382      	bics	r2, r0
 8001a60:	68e8      	ldr	r0, [r5, #12]
 8001a62:	4302      	orrs	r2, r0
 8001a64:	630a      	str	r2, [r1, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001a66:	039a      	lsls	r2, r3, #14
 8001a68:	d506      	bpl.n	8001a78 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001a6a:	2080      	movs	r0, #128	@ 0x80
 8001a6c:	4921      	ldr	r1, [pc, #132]	@ (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001a6e:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8001a70:	4382      	bics	r2, r0
 8001a72:	6968      	ldr	r0, [r5, #20]
 8001a74:	4302      	orrs	r2, r0
 8001a76:	630a      	str	r2, [r1, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001a78:	055b      	lsls	r3, r3, #21
 8001a7a:	d433      	bmi.n	8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	e00f      	b.n	8001aa0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a80:	6833      	ldr	r3, [r6, #0]
 8001a82:	433b      	orrs	r3, r7
 8001a84:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001a86:	f7ff fa87 	bl	8000f98 <HAL_GetTick>
 8001a8a:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a8c:	6833      	ldr	r3, [r6, #0]
 8001a8e:	423b      	tst	r3, r7
 8001a90:	d1c1      	bne.n	8001a16 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a92:	f7ff fa81 	bl	8000f98 <HAL_GetTick>
 8001a96:	9b01      	ldr	r3, [sp, #4]
 8001a98:	1ac0      	subs	r0, r0, r3
 8001a9a:	2864      	cmp	r0, #100	@ 0x64
 8001a9c:	d9f6      	bls.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0xb0>
          return HAL_TIMEOUT;
 8001a9e:	2003      	movs	r0, #3
}
 8001aa0:	b005      	add	sp, #20
 8001aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	4283      	cmp	r3, r0
 8001aa8:	d0be      	beq.n	8001a28 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001aaa:	2280      	movs	r2, #128	@ 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001aac:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001aae:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ab0:	0019      	movs	r1, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ab2:	0252      	lsls	r2, r2, #9
 8001ab4:	4302      	orrs	r2, r0
 8001ab6:	6222      	str	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ab8:	6a22      	ldr	r2, [r4, #32]
 8001aba:	4812      	ldr	r0, [pc, #72]	@ (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x128>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001abc:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001abe:	4002      	ands	r2, r0
 8001ac0:	6222      	str	r2, [r4, #32]
      RCC->BDCR = temp_reg;
 8001ac2:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ac4:	07db      	lsls	r3, r3, #31
 8001ac6:	d5af      	bpl.n	8001a28 <HAL_RCCEx_PeriphCLKConfig+0x4c>
        tickstart = HAL_GetTick();
 8001ac8:	f7ff fa66 	bl	8000f98 <HAL_GetTick>
 8001acc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ace:	2202      	movs	r2, #2
 8001ad0:	6a23      	ldr	r3, [r4, #32]
 8001ad2:	4213      	tst	r3, r2
 8001ad4:	d1a8      	bne.n	8001a28 <HAL_RCCEx_PeriphCLKConfig+0x4c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad6:	f7ff fa5f 	bl	8000f98 <HAL_GetTick>
 8001ada:	4b0b      	ldr	r3, [pc, #44]	@ (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8001adc:	1bc0      	subs	r0, r0, r7
 8001ade:	4298      	cmp	r0, r3
 8001ae0:	d9f5      	bls.n	8001ace <HAL_RCCEx_PeriphCLKConfig+0xf2>
 8001ae2:	e7dc      	b.n	8001a9e <HAL_RCCEx_PeriphCLKConfig+0xc2>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001ae4:	2140      	movs	r1, #64	@ 0x40
 8001ae6:	4a03      	ldr	r2, [pc, #12]	@ (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001ae8:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8001aea:	438b      	bics	r3, r1
 8001aec:	6929      	ldr	r1, [r5, #16]
 8001aee:	430b      	orrs	r3, r1
 8001af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001af2:	e7c3      	b.n	8001a7c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40007000 	.word	0x40007000
 8001afc:	fffffcff 	.word	0xfffffcff
 8001b00:	efffffff 	.word	0xefffffff
 8001b04:	fffeffff 	.word	0xfffeffff
 8001b08:	00001388 	.word	0x00001388

08001b0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001b0c:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b0e:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b12:	2201      	movs	r2, #1
 8001b14:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001b18:	6801      	ldr	r1, [r0, #0]
 8001b1a:	4d12      	ldr	r5, [pc, #72]	@ (8001b64 <UART_EndRxTransfer+0x58>)
 8001b1c:	680b      	ldr	r3, [r1, #0]
 8001b1e:	402b      	ands	r3, r5
 8001b20:	600b      	str	r3, [r1, #0]
 8001b22:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b26:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b2a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b2e:	6801      	ldr	r1, [r0, #0]
 8001b30:	688b      	ldr	r3, [r1, #8]
 8001b32:	4393      	bics	r3, r2
 8001b34:	608b      	str	r3, [r1, #8]
 8001b36:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001b3a:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d10a      	bne.n	8001b56 <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b40:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b44:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001b48:	2410      	movs	r4, #16
 8001b4a:	6802      	ldr	r2, [r0, #0]
 8001b4c:	6813      	ldr	r3, [r2, #0]
 8001b4e:	43a3      	bics	r3, r4
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001b56:	2220      	movs	r2, #32
 8001b58:	1d03      	adds	r3, r0, #4
 8001b5a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001b60:	6683      	str	r3, [r0, #104]	@ 0x68
}
 8001b62:	bd30      	pop	{r4, r5, pc}
 8001b64:	fffffedf 	.word	0xfffffedf

08001b68 <UART_SetConfig>:
{
 8001b68:	b570      	push	{r4, r5, r6, lr}
 8001b6a:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b6c:	6925      	ldr	r5, [r4, #16]
 8001b6e:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001b70:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b72:	4329      	orrs	r1, r5
 8001b74:	6965      	ldr	r5, [r4, #20]
 8001b76:	69c2      	ldr	r2, [r0, #28]
 8001b78:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001b7a:	6818      	ldr	r0, [r3, #0]
 8001b7c:	4d3d      	ldr	r5, [pc, #244]	@ (8001c74 <UART_SetConfig+0x10c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b7e:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001b80:	4028      	ands	r0, r5
 8001b82:	4301      	orrs	r1, r0
 8001b84:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b86:	6859      	ldr	r1, [r3, #4]
 8001b88:	483b      	ldr	r0, [pc, #236]	@ (8001c78 <UART_SetConfig+0x110>)
  tmpreg |= huart->Init.OneBitSampling;
 8001b8a:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b8c:	4001      	ands	r1, r0
 8001b8e:	68e0      	ldr	r0, [r4, #12]
 8001b90:	4301      	orrs	r1, r0
 8001b92:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001b94:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001b96:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8001b98:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001b9a:	4d38      	ldr	r5, [pc, #224]	@ (8001c7c <UART_SetConfig+0x114>)
 8001b9c:	4028      	ands	r0, r5
 8001b9e:	4301      	orrs	r1, r0
 8001ba0:	6099      	str	r1, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ba2:	4937      	ldr	r1, [pc, #220]	@ (8001c80 <UART_SetConfig+0x118>)
 8001ba4:	428b      	cmp	r3, r1
 8001ba6:	d115      	bne.n	8001bd4 <UART_SetConfig+0x6c>
 8001ba8:	2103      	movs	r1, #3
 8001baa:	4b36      	ldr	r3, [pc, #216]	@ (8001c84 <UART_SetConfig+0x11c>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bae:	400b      	ands	r3, r1
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d851      	bhi.n	8001c5a <UART_SetConfig+0xf2>
 8001bb6:	4934      	ldr	r1, [pc, #208]	@ (8001c88 <UART_SetConfig+0x120>)
 8001bb8:	5cc8      	ldrb	r0, [r1, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bba:	2380      	movs	r3, #128	@ 0x80
 8001bbc:	021b      	lsls	r3, r3, #8
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d127      	bne.n	8001c12 <UART_SetConfig+0xaa>
    switch (clocksource)
 8001bc2:	2808      	cmp	r0, #8
 8001bc4:	d847      	bhi.n	8001c56 <UART_SetConfig+0xee>
 8001bc6:	f7fe faa7 	bl	8000118 <__gnu_thumb1_case_uqi>
 8001bca:	464c      	.short	0x464c
 8001bcc:	460b460e 	.word	0x460b460e
 8001bd0:	4646      	.short	0x4646
 8001bd2:	0f          	.byte	0x0f
 8001bd3:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001bd4:	492d      	ldr	r1, [pc, #180]	@ (8001c8c <UART_SetConfig+0x124>)
 8001bd6:	185b      	adds	r3, r3, r1
 8001bd8:	1e59      	subs	r1, r3, #1
 8001bda:	418b      	sbcs	r3, r1
 8001bdc:	0118      	lsls	r0, r3, #4
 8001bde:	e7ec      	b.n	8001bba <UART_SetConfig+0x52>
        pclk = HAL_RCC_GetSysClockFreq();
 8001be0:	f7ff fe2c 	bl	800183c <HAL_RCC_GetSysClockFreq>
 8001be4:	e03f      	b.n	8001c66 <UART_SetConfig+0xfe>
    switch (clocksource)
 8001be6:	4a2a      	ldr	r2, [pc, #168]	@ (8001c90 <UART_SetConfig+0x128>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001be8:	6861      	ldr	r1, [r4, #4]
 8001bea:	0052      	lsls	r2, r2, #1
 8001bec:	0848      	lsrs	r0, r1, #1
 8001bee:	1810      	adds	r0, r2, r0
 8001bf0:	f7fe fa9c 	bl	800012c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001bf4:	0002      	movs	r2, r0
 8001bf6:	4b27      	ldr	r3, [pc, #156]	@ (8001c94 <UART_SetConfig+0x12c>)
 8001bf8:	3a10      	subs	r2, #16
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d82b      	bhi.n	8001c56 <UART_SetConfig+0xee>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001bfe:	230f      	movs	r3, #15
 8001c00:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001c02:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001c04:	439a      	bics	r2, r3
 8001c06:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001c08:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8001c0a:	6822      	ldr	r2, [r4, #0]
 8001c0c:	4303      	orrs	r3, r0
 8001c0e:	60d3      	str	r3, [r2, #12]
 8001c10:	e02b      	b.n	8001c6a <UART_SetConfig+0x102>
    switch (clocksource)
 8001c12:	2808      	cmp	r0, #8
 8001c14:	d81f      	bhi.n	8001c56 <UART_SetConfig+0xee>
 8001c16:	f7fe fa7f 	bl	8000118 <__gnu_thumb1_case_uqi>
 8001c1a:	1e13      	.short	0x1e13
 8001c1c:	1e181e05 	.word	0x1e181e05
 8001c20:	1e1e      	.short	0x1e1e
 8001c22:	1b          	.byte	0x1b
 8001c23:	00          	.byte	0x00
        pclk = (uint32_t) HSI_VALUE;
 8001c24:	481a      	ldr	r0, [pc, #104]	@ (8001c90 <UART_SetConfig+0x128>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001c26:	6861      	ldr	r1, [r4, #4]
 8001c28:	084b      	lsrs	r3, r1, #1
 8001c2a:	1818      	adds	r0, r3, r0
 8001c2c:	f7fe fa7e 	bl	800012c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001c30:	0002      	movs	r2, r0
 8001c32:	4b18      	ldr	r3, [pc, #96]	@ (8001c94 <UART_SetConfig+0x12c>)
 8001c34:	3a10      	subs	r2, #16
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d80d      	bhi.n	8001c56 <UART_SetConfig+0xee>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001c3a:	6823      	ldr	r3, [r4, #0]
 8001c3c:	60d8      	str	r0, [r3, #12]
 8001c3e:	e014      	b.n	8001c6a <UART_SetConfig+0x102>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001c40:	f7ff febc 	bl	80019bc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8001c44:	2800      	cmp	r0, #0
 8001c46:	d010      	beq.n	8001c6a <UART_SetConfig+0x102>
 8001c48:	e7ed      	b.n	8001c26 <UART_SetConfig+0xbe>
        pclk = HAL_RCC_GetSysClockFreq();
 8001c4a:	f7ff fdf7 	bl	800183c <HAL_RCC_GetSysClockFreq>
        break;
 8001c4e:	e7f9      	b.n	8001c44 <UART_SetConfig+0xdc>
    switch (clocksource)
 8001c50:	2080      	movs	r0, #128	@ 0x80
 8001c52:	0200      	lsls	r0, r0, #8
 8001c54:	e7e7      	b.n	8001c26 <UART_SetConfig+0xbe>
        ret = HAL_ERROR;
 8001c56:	2001      	movs	r0, #1
 8001c58:	e008      	b.n	8001c6c <UART_SetConfig+0x104>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c5a:	2380      	movs	r3, #128	@ 0x80
 8001c5c:	021b      	lsls	r3, r3, #8
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d1ee      	bne.n	8001c40 <UART_SetConfig+0xd8>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001c62:	f7ff feab 	bl	80019bc <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8001c66:	1e02      	subs	r2, r0, #0
    if (pclk != 0U)
 8001c68:	d1be      	bne.n	8001be8 <UART_SetConfig+0x80>
        pclk = (uint32_t) HSI_VALUE;
 8001c6a:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8001c70:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 8001c72:	bd70      	pop	{r4, r5, r6, pc}
 8001c74:	efff69f3 	.word	0xefff69f3
 8001c78:	ffffcfff 	.word	0xffffcfff
 8001c7c:	fffff4ff 	.word	0xfffff4ff
 8001c80:	40013800 	.word	0x40013800
 8001c84:	40021000 	.word	0x40021000
 8001c88:	08002fb4 	.word	0x08002fb4
 8001c8c:	bfffbc00 	.word	0xbfffbc00
 8001c90:	007a1200 	.word	0x007a1200
 8001c94:	0000ffef 	.word	0x0000ffef

08001c98 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001c98:	6a43      	ldr	r3, [r0, #36]	@ 0x24
{
 8001c9a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001c9c:	071a      	lsls	r2, r3, #28
 8001c9e:	d506      	bpl.n	8001cae <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001ca0:	6801      	ldr	r1, [r0, #0]
 8001ca2:	4c28      	ldr	r4, [pc, #160]	@ (8001d44 <UART_AdvFeatureConfig+0xac>)
 8001ca4:	684a      	ldr	r2, [r1, #4]
 8001ca6:	4022      	ands	r2, r4
 8001ca8:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8001caa:	4322      	orrs	r2, r4
 8001cac:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001cae:	07da      	lsls	r2, r3, #31
 8001cb0:	d506      	bpl.n	8001cc0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001cb2:	6801      	ldr	r1, [r0, #0]
 8001cb4:	4c24      	ldr	r4, [pc, #144]	@ (8001d48 <UART_AdvFeatureConfig+0xb0>)
 8001cb6:	684a      	ldr	r2, [r1, #4]
 8001cb8:	4022      	ands	r2, r4
 8001cba:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8001cbc:	4322      	orrs	r2, r4
 8001cbe:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001cc0:	079a      	lsls	r2, r3, #30
 8001cc2:	d506      	bpl.n	8001cd2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001cc4:	6801      	ldr	r1, [r0, #0]
 8001cc6:	4c21      	ldr	r4, [pc, #132]	@ (8001d4c <UART_AdvFeatureConfig+0xb4>)
 8001cc8:	684a      	ldr	r2, [r1, #4]
 8001cca:	4022      	ands	r2, r4
 8001ccc:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8001cce:	4322      	orrs	r2, r4
 8001cd0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001cd2:	075a      	lsls	r2, r3, #29
 8001cd4:	d506      	bpl.n	8001ce4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001cd6:	6801      	ldr	r1, [r0, #0]
 8001cd8:	4c1d      	ldr	r4, [pc, #116]	@ (8001d50 <UART_AdvFeatureConfig+0xb8>)
 8001cda:	684a      	ldr	r2, [r1, #4]
 8001cdc:	4022      	ands	r2, r4
 8001cde:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8001ce0:	4322      	orrs	r2, r4
 8001ce2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001ce4:	06da      	lsls	r2, r3, #27
 8001ce6:	d506      	bpl.n	8001cf6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001ce8:	6801      	ldr	r1, [r0, #0]
 8001cea:	4c1a      	ldr	r4, [pc, #104]	@ (8001d54 <UART_AdvFeatureConfig+0xbc>)
 8001cec:	688a      	ldr	r2, [r1, #8]
 8001cee:	4022      	ands	r2, r4
 8001cf0:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8001cf2:	4322      	orrs	r2, r4
 8001cf4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001cf6:	069a      	lsls	r2, r3, #26
 8001cf8:	d506      	bpl.n	8001d08 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001cfa:	6801      	ldr	r1, [r0, #0]
 8001cfc:	4c16      	ldr	r4, [pc, #88]	@ (8001d58 <UART_AdvFeatureConfig+0xc0>)
 8001cfe:	688a      	ldr	r2, [r1, #8]
 8001d00:	4022      	ands	r2, r4
 8001d02:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8001d04:	4322      	orrs	r2, r4
 8001d06:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001d08:	065a      	lsls	r2, r3, #25
 8001d0a:	d510      	bpl.n	8001d2e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001d0c:	6801      	ldr	r1, [r0, #0]
 8001d0e:	4d13      	ldr	r5, [pc, #76]	@ (8001d5c <UART_AdvFeatureConfig+0xc4>)
 8001d10:	684a      	ldr	r2, [r1, #4]
 8001d12:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8001d14:	402a      	ands	r2, r5
 8001d16:	4322      	orrs	r2, r4
 8001d18:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001d1a:	2280      	movs	r2, #128	@ 0x80
 8001d1c:	0352      	lsls	r2, r2, #13
 8001d1e:	4294      	cmp	r4, r2
 8001d20:	d105      	bne.n	8001d2e <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001d22:	684a      	ldr	r2, [r1, #4]
 8001d24:	4c0e      	ldr	r4, [pc, #56]	@ (8001d60 <UART_AdvFeatureConfig+0xc8>)
 8001d26:	4022      	ands	r2, r4
 8001d28:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8001d2a:	4322      	orrs	r2, r4
 8001d2c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001d2e:	061b      	lsls	r3, r3, #24
 8001d30:	d506      	bpl.n	8001d40 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001d32:	6802      	ldr	r2, [r0, #0]
 8001d34:	490b      	ldr	r1, [pc, #44]	@ (8001d64 <UART_AdvFeatureConfig+0xcc>)
 8001d36:	6853      	ldr	r3, [r2, #4]
 8001d38:	400b      	ands	r3, r1
 8001d3a:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8001d3c:	430b      	orrs	r3, r1
 8001d3e:	6053      	str	r3, [r2, #4]
}
 8001d40:	bd30      	pop	{r4, r5, pc}
 8001d42:	46c0      	nop			@ (mov r8, r8)
 8001d44:	ffff7fff 	.word	0xffff7fff
 8001d48:	fffdffff 	.word	0xfffdffff
 8001d4c:	fffeffff 	.word	0xfffeffff
 8001d50:	fffbffff 	.word	0xfffbffff
 8001d54:	ffffefff 	.word	0xffffefff
 8001d58:	ffffdfff 	.word	0xffffdfff
 8001d5c:	ffefffff 	.word	0xffefffff
 8001d60:	ff9fffff 	.word	0xff9fffff
 8001d64:	fff7ffff 	.word	0xfff7ffff

08001d68 <UART_WaitOnFlagUntilTimeout>:
{
 8001d68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001d6a:	0004      	movs	r4, r0
 8001d6c:	000d      	movs	r5, r1
 8001d6e:	0017      	movs	r7, r2
 8001d70:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d72:	6822      	ldr	r2, [r4, #0]
 8001d74:	69d3      	ldr	r3, [r2, #28]
 8001d76:	402b      	ands	r3, r5
 8001d78:	1b5b      	subs	r3, r3, r5
 8001d7a:	4259      	negs	r1, r3
 8001d7c:	414b      	adcs	r3, r1
 8001d7e:	42bb      	cmp	r3, r7
 8001d80:	d001      	beq.n	8001d86 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8001d82:	2000      	movs	r0, #0
 8001d84:	e025      	b.n	8001dd2 <UART_WaitOnFlagUntilTimeout+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8001d86:	9b08      	ldr	r3, [sp, #32]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	d0f3      	beq.n	8001d74 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d8c:	f7ff f904 	bl	8000f98 <HAL_GetTick>
 8001d90:	9b00      	ldr	r3, [sp, #0]
 8001d92:	1ac0      	subs	r0, r0, r3
 8001d94:	9b08      	ldr	r3, [sp, #32]
 8001d96:	4298      	cmp	r0, r3
 8001d98:	d82c      	bhi.n	8001df4 <UART_WaitOnFlagUntilTimeout+0x8c>
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d02a      	beq.n	8001df4 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001d9e:	6823      	ldr	r3, [r4, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	0752      	lsls	r2, r2, #29
 8001da4:	d5e5      	bpl.n	8001d72 <UART_WaitOnFlagUntilTimeout+0xa>
 8001da6:	002a      	movs	r2, r5
 8001da8:	2140      	movs	r1, #64	@ 0x40
 8001daa:	3a40      	subs	r2, #64	@ 0x40
 8001dac:	438a      	bics	r2, r1
 8001dae:	d0e0      	beq.n	8001d72 <UART_WaitOnFlagUntilTimeout+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001db0:	69da      	ldr	r2, [r3, #28]
 8001db2:	2608      	movs	r6, #8
 8001db4:	0011      	movs	r1, r2
 8001db6:	4031      	ands	r1, r6
 8001db8:	9101      	str	r1, [sp, #4]
 8001dba:	4232      	tst	r2, r6
 8001dbc:	d00a      	beq.n	8001dd4 <UART_WaitOnFlagUntilTimeout+0x6c>
          UART_EndRxTransfer(huart);
 8001dbe:	0020      	movs	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001dc0:	621e      	str	r6, [r3, #32]
          UART_EndRxTransfer(huart);
 8001dc2:	f7ff fea3 	bl	8001b0c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001dc6:	19a3      	adds	r3, r4, r6
 8001dc8:	67de      	str	r6, [r3, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 8001dca:	2300      	movs	r3, #0
          return HAL_ERROR;
 8001dcc:	2001      	movs	r0, #1
          __HAL_UNLOCK(huart);
 8001dce:	3478      	adds	r4, #120	@ 0x78
 8001dd0:	7023      	strb	r3, [r4, #0]
}
 8001dd2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001dd4:	2280      	movs	r2, #128	@ 0x80
 8001dd6:	69d9      	ldr	r1, [r3, #28]
 8001dd8:	0112      	lsls	r2, r2, #4
 8001dda:	4211      	tst	r1, r2
 8001ddc:	d0c9      	beq.n	8001d72 <UART_WaitOnFlagUntilTimeout+0xa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001dde:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8001de0:	0020      	movs	r0, r4
 8001de2:	f7ff fe93 	bl	8001b0c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001de6:	0023      	movs	r3, r4
 8001de8:	2220      	movs	r2, #32
 8001dea:	3308      	adds	r3, #8
 8001dec:	67da      	str	r2, [r3, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 8001dee:	9b01      	ldr	r3, [sp, #4]
 8001df0:	3478      	adds	r4, #120	@ 0x78
 8001df2:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8001df4:	2003      	movs	r0, #3
 8001df6:	e7ec      	b.n	8001dd2 <UART_WaitOnFlagUntilTimeout+0x6a>

08001df8 <HAL_UART_Receive>:
{
 8001df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dfa:	0015      	movs	r5, r2
 8001dfc:	b087      	sub	sp, #28
  if (huart->RxState == HAL_UART_STATE_READY)
 8001dfe:	1d02      	adds	r2, r0, #4
{
 8001e00:	9305      	str	r3, [sp, #20]
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e02:	6fd3      	ldr	r3, [r2, #124]	@ 0x7c
{
 8001e04:	0004      	movs	r4, r0
 8001e06:	000e      	movs	r6, r1
    return HAL_BUSY;
 8001e08:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e0a:	2b20      	cmp	r3, #32
 8001e0c:	d15f      	bne.n	8001ece <HAL_UART_Receive+0xd6>
      return  HAL_ERROR;
 8001e0e:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8001e10:	2900      	cmp	r1, #0
 8001e12:	d05c      	beq.n	8001ece <HAL_UART_Receive+0xd6>
 8001e14:	2d00      	cmp	r5, #0
 8001e16:	d05a      	beq.n	8001ece <HAL_UART_Receive+0xd6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e18:	2380      	movs	r3, #128	@ 0x80
 8001e1a:	68a1      	ldr	r1, [r4, #8]
 8001e1c:	015b      	lsls	r3, r3, #5
 8001e1e:	4299      	cmp	r1, r3
 8001e20:	d104      	bne.n	8001e2c <HAL_UART_Receive+0x34>
 8001e22:	6923      	ldr	r3, [r4, #16]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_UART_Receive+0x34>
      if ((((uint32_t)pData) & 1U) != 0U)
 8001e28:	4206      	tst	r6, r0
 8001e2a:	d150      	bne.n	8001ece <HAL_UART_Receive+0xd6>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e2c:	0023      	movs	r3, r4
 8001e2e:	2100      	movs	r1, #0
 8001e30:	3308      	adds	r3, #8
 8001e32:	67d9      	str	r1, [r3, #124]	@ 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e34:	2322      	movs	r3, #34	@ 0x22
 8001e36:	67d3      	str	r3, [r2, #124]	@ 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e38:	6621      	str	r1, [r4, #96]	@ 0x60
    tickstart = HAL_GetTick();
 8001e3a:	f7ff f8ad 	bl	8000f98 <HAL_GetTick>
    huart->RxXferSize  = Size;
 8001e3e:	0023      	movs	r3, r4
 8001e40:	3358      	adds	r3, #88	@ 0x58
 8001e42:	801d      	strh	r5, [r3, #0]
    huart->RxXferCount = Size;
 8001e44:	3302      	adds	r3, #2
 8001e46:	9303      	str	r3, [sp, #12]
 8001e48:	801d      	strh	r5, [r3, #0]
    UART_MASK_COMPUTATION(huart);
 8001e4a:	2380      	movs	r3, #128	@ 0x80
 8001e4c:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8001e4e:	9004      	str	r0, [sp, #16]
    UART_MASK_COMPUTATION(huart);
 8001e50:	015b      	lsls	r3, r3, #5
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d108      	bne.n	8001e68 <HAL_UART_Receive+0x70>
 8001e56:	6922      	ldr	r2, [r4, #16]
 8001e58:	23ff      	movs	r3, #255	@ 0xff
 8001e5a:	2a00      	cmp	r2, #0
 8001e5c:	d117      	bne.n	8001e8e <HAL_UART_Receive+0x96>
 8001e5e:	4b25      	ldr	r3, [pc, #148]	@ (8001ef4 <HAL_UART_Receive+0xfc>)
      pdata16bits = (uint16_t *) pData;
 8001e60:	0035      	movs	r5, r6
    uhMask = huart->Mask;
 8001e62:	001f      	movs	r7, r3
      pdata8bits  = NULL;
 8001e64:	0016      	movs	r6, r2
 8001e66:	e014      	b.n	8001e92 <HAL_UART_Receive+0x9a>
    UART_MASK_COMPUTATION(huart);
 8001e68:	2a00      	cmp	r2, #0
 8001e6a:	d105      	bne.n	8001e78 <HAL_UART_Receive+0x80>
 8001e6c:	6925      	ldr	r5, [r4, #16]
 8001e6e:	23ff      	movs	r3, #255	@ 0xff
 8001e70:	2d00      	cmp	r5, #0
 8001e72:	d01c      	beq.n	8001eae <HAL_UART_Receive+0xb6>
 8001e74:	237f      	movs	r3, #127	@ 0x7f
 8001e76:	e00a      	b.n	8001e8e <HAL_UART_Receive+0x96>
 8001e78:	2300      	movs	r3, #0
 8001e7a:	2180      	movs	r1, #128	@ 0x80
    uhMask = huart->Mask;
 8001e7c:	001f      	movs	r7, r3
      pdata16bits = NULL;
 8001e7e:	001d      	movs	r5, r3
    UART_MASK_COMPUTATION(huart);
 8001e80:	0549      	lsls	r1, r1, #21
 8001e82:	428a      	cmp	r2, r1
 8001e84:	d105      	bne.n	8001e92 <HAL_UART_Receive+0x9a>
 8001e86:	6925      	ldr	r5, [r4, #16]
 8001e88:	429d      	cmp	r5, r3
 8001e8a:	d00f      	beq.n	8001eac <HAL_UART_Receive+0xb4>
 8001e8c:	333f      	adds	r3, #63	@ 0x3f
    uhMask = huart->Mask;
 8001e8e:	001f      	movs	r7, r3
      pdata16bits = NULL;
 8001e90:	2500      	movs	r5, #0
    UART_MASK_COMPUTATION(huart);
 8001e92:	0022      	movs	r2, r4
 8001e94:	325c      	adds	r2, #92	@ 0x5c
      huart->RxXferCount--;
 8001e96:	8013      	strh	r3, [r2, #0]
    while (huart->RxXferCount > 0U)
 8001e98:	0023      	movs	r3, r4
 8001e9a:	335a      	adds	r3, #90	@ 0x5a
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	b298      	uxth	r0, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d106      	bne.n	8001eb2 <HAL_UART_Receive+0xba>
    huart->RxState = HAL_UART_STATE_READY;
 8001ea4:	3404      	adds	r4, #4
 8001ea6:	3320      	adds	r3, #32
 8001ea8:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 8001eaa:	e010      	b.n	8001ece <HAL_UART_Receive+0xd6>
 8001eac:	237f      	movs	r3, #127	@ 0x7f
    uhMask = huart->Mask;
 8001eae:	001f      	movs	r7, r3
 8001eb0:	e7ef      	b.n	8001e92 <HAL_UART_Receive+0x9a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001eb2:	9b05      	ldr	r3, [sp, #20]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	2120      	movs	r1, #32
 8001eba:	0020      	movs	r0, r4
 8001ebc:	9b04      	ldr	r3, [sp, #16]
 8001ebe:	f7ff ff53 	bl	8001d68 <UART_WaitOnFlagUntilTimeout>
 8001ec2:	2800      	cmp	r0, #0
 8001ec4:	d005      	beq.n	8001ed2 <HAL_UART_Receive+0xda>
        huart->RxState = HAL_UART_STATE_READY;
 8001ec6:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8001ec8:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 8001eca:	3404      	adds	r4, #4
 8001ecc:	67e3      	str	r3, [r4, #124]	@ 0x7c
}
 8001ece:	b007      	add	sp, #28
 8001ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001ed2:	6823      	ldr	r3, [r4, #0]
 8001ed4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001ed6:	403b      	ands	r3, r7
      if (pdata8bits == NULL)
 8001ed8:	2e00      	cmp	r6, #0
 8001eda:	d107      	bne.n	8001eec <HAL_UART_Receive+0xf4>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001edc:	802b      	strh	r3, [r5, #0]
        pdata16bits++;
 8001ede:	3502      	adds	r5, #2
      huart->RxXferCount--;
 8001ee0:	9b03      	ldr	r3, [sp, #12]
 8001ee2:	9a03      	ldr	r2, [sp, #12]
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	e7d4      	b.n	8001e96 <HAL_UART_Receive+0x9e>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001eec:	7033      	strb	r3, [r6, #0]
        pdata8bits++;
 8001eee:	3601      	adds	r6, #1
 8001ef0:	e7f6      	b.n	8001ee0 <HAL_UART_Receive+0xe8>
 8001ef2:	46c0      	nop			@ (mov r8, r8)
 8001ef4:	000001ff 	.word	0x000001ff

08001ef8 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ef8:	0003      	movs	r3, r0
{
 8001efa:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001efc:	2500      	movs	r5, #0
{
 8001efe:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f00:	3308      	adds	r3, #8
 8001f02:	67dd      	str	r5, [r3, #124]	@ 0x7c
  tickstart = HAL_GetTick();
 8001f04:	f7ff f848 	bl	8000f98 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001f08:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001f0a:	0006      	movs	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	071b      	lsls	r3, r3, #28
 8001f10:	d51d      	bpl.n	8001f4e <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001f12:	2180      	movs	r1, #128	@ 0x80
 8001f14:	4b26      	ldr	r3, [pc, #152]	@ (8001fb0 <UART_CheckIdleState+0xb8>)
 8001f16:	002a      	movs	r2, r5
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	0389      	lsls	r1, r1, #14
 8001f1c:	0003      	movs	r3, r0
 8001f1e:	0020      	movs	r0, r4
 8001f20:	f7ff ff22 	bl	8001d68 <UART_WaitOnFlagUntilTimeout>
 8001f24:	42a8      	cmp	r0, r5
 8001f26:	d012      	beq.n	8001f4e <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f28:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8001f32:	2080      	movs	r0, #128	@ 0x80
 8001f34:	6822      	ldr	r2, [r4, #0]
 8001f36:	6813      	ldr	r3, [r2, #0]
 8001f38:	4383      	bics	r3, r0
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8001f40:	2320      	movs	r3, #32
 8001f42:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8001f44:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8001f46:	2300      	movs	r3, #0
 8001f48:	3478      	adds	r4, #120	@ 0x78
 8001f4a:	7023      	strb	r3, [r4, #0]
}
 8001f4c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001f4e:	0025      	movs	r5, r4
 8001f50:	cd08      	ldmia	r5!, {r3}
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	075b      	lsls	r3, r3, #29
 8001f56:	d523      	bpl.n	8001fa0 <UART_CheckIdleState+0xa8>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001f58:	2180      	movs	r1, #128	@ 0x80
 8001f5a:	4b15      	ldr	r3, [pc, #84]	@ (8001fb0 <UART_CheckIdleState+0xb8>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	0020      	movs	r0, r4
 8001f62:	0033      	movs	r3, r6
 8001f64:	03c9      	lsls	r1, r1, #15
 8001f66:	f7ff feff 	bl	8001d68 <UART_WaitOnFlagUntilTimeout>
 8001f6a:	2800      	cmp	r0, #0
 8001f6c:	d018      	beq.n	8001fa0 <UART_CheckIdleState+0xa8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f6e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f72:	2201      	movs	r2, #1
 8001f74:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f78:	6821      	ldr	r1, [r4, #0]
 8001f7a:	4e0e      	ldr	r6, [pc, #56]	@ (8001fb4 <UART_CheckIdleState+0xbc>)
 8001f7c:	680b      	ldr	r3, [r1, #0]
 8001f7e:	4033      	ands	r3, r6
 8001f80:	600b      	str	r3, [r1, #0]
 8001f82:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f86:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f8a:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f8e:	6821      	ldr	r1, [r4, #0]
 8001f90:	688b      	ldr	r3, [r1, #8]
 8001f92:	4393      	bics	r3, r2
 8001f94:	608b      	str	r3, [r1, #8]
 8001f96:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8001f9a:	2320      	movs	r3, #32
 8001f9c:	67eb      	str	r3, [r5, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8001f9e:	e7d1      	b.n	8001f44 <UART_CheckIdleState+0x4c>
  huart->gState = HAL_UART_STATE_READY;
 8001fa0:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fa2:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001fa4:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8001fa6:	67eb      	str	r3, [r5, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fa8:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001faa:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 8001fac:	e7cb      	b.n	8001f46 <UART_CheckIdleState+0x4e>
 8001fae:	46c0      	nop			@ (mov r8, r8)
 8001fb0:	01ffffff 	.word	0x01ffffff
 8001fb4:	fffffedf 	.word	0xfffffedf

08001fb8 <HAL_UART_Init>:
{
 8001fb8:	b510      	push	{r4, lr}
 8001fba:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8001fbc:	d101      	bne.n	8001fc2 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8001fbe:	2001      	movs	r0, #1
}
 8001fc0:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8001fc2:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d104      	bne.n	8001fd2 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8001fc8:	0002      	movs	r2, r0
 8001fca:	3278      	adds	r2, #120	@ 0x78
 8001fcc:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8001fce:	f7fe fb89 	bl	80006e4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001fd2:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001fd8:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8001fda:	6813      	ldr	r3, [r2, #0]
 8001fdc:	438b      	bics	r3, r1
 8001fde:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001fe0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d002      	beq.n	8001fec <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8001fe6:	0020      	movs	r0, r4
 8001fe8:	f7ff fe56 	bl	8001c98 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001fec:	0020      	movs	r0, r4
 8001fee:	f7ff fdbb 	bl	8001b68 <UART_SetConfig>
 8001ff2:	2801      	cmp	r0, #1
 8001ff4:	d0e3      	beq.n	8001fbe <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ff6:	6823      	ldr	r3, [r4, #0]
 8001ff8:	4907      	ldr	r1, [pc, #28]	@ (8002018 <HAL_UART_Init+0x60>)
 8001ffa:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8001ffc:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ffe:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002000:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002002:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002004:	689a      	ldr	r2, [r3, #8]
 8002006:	438a      	bics	r2, r1
 8002008:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800200a:	2201      	movs	r2, #1
 800200c:	6819      	ldr	r1, [r3, #0]
 800200e:	430a      	orrs	r2, r1
 8002010:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002012:	f7ff ff71 	bl	8001ef8 <UART_CheckIdleState>
 8002016:	e7d3      	b.n	8001fc0 <HAL_UART_Init+0x8>
 8002018:	ffffb7ff 	.word	0xffffb7ff

0800201c <malloc>:
 800201c:	b510      	push	{r4, lr}
 800201e:	4b03      	ldr	r3, [pc, #12]	@ (800202c <malloc+0x10>)
 8002020:	0001      	movs	r1, r0
 8002022:	6818      	ldr	r0, [r3, #0]
 8002024:	f000 f826 	bl	8002074 <_malloc_r>
 8002028:	bd10      	pop	{r4, pc}
 800202a:	46c0      	nop			@ (mov r8, r8)
 800202c:	20000020 	.word	0x20000020

08002030 <sbrk_aligned>:
 8002030:	b570      	push	{r4, r5, r6, lr}
 8002032:	4e0f      	ldr	r6, [pc, #60]	@ (8002070 <sbrk_aligned+0x40>)
 8002034:	000d      	movs	r5, r1
 8002036:	6831      	ldr	r1, [r6, #0]
 8002038:	0004      	movs	r4, r0
 800203a:	2900      	cmp	r1, #0
 800203c:	d102      	bne.n	8002044 <sbrk_aligned+0x14>
 800203e:	f000 fb09 	bl	8002654 <_sbrk_r>
 8002042:	6030      	str	r0, [r6, #0]
 8002044:	0029      	movs	r1, r5
 8002046:	0020      	movs	r0, r4
 8002048:	f000 fb04 	bl	8002654 <_sbrk_r>
 800204c:	1c43      	adds	r3, r0, #1
 800204e:	d103      	bne.n	8002058 <sbrk_aligned+0x28>
 8002050:	2501      	movs	r5, #1
 8002052:	426d      	negs	r5, r5
 8002054:	0028      	movs	r0, r5
 8002056:	bd70      	pop	{r4, r5, r6, pc}
 8002058:	2303      	movs	r3, #3
 800205a:	1cc5      	adds	r5, r0, #3
 800205c:	439d      	bics	r5, r3
 800205e:	42a8      	cmp	r0, r5
 8002060:	d0f8      	beq.n	8002054 <sbrk_aligned+0x24>
 8002062:	1a29      	subs	r1, r5, r0
 8002064:	0020      	movs	r0, r4
 8002066:	f000 faf5 	bl	8002654 <_sbrk_r>
 800206a:	3001      	adds	r0, #1
 800206c:	d1f2      	bne.n	8002054 <sbrk_aligned+0x24>
 800206e:	e7ef      	b.n	8002050 <sbrk_aligned+0x20>
 8002070:	20000224 	.word	0x20000224

08002074 <_malloc_r>:
 8002074:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002076:	2203      	movs	r2, #3
 8002078:	1ccb      	adds	r3, r1, #3
 800207a:	4393      	bics	r3, r2
 800207c:	3308      	adds	r3, #8
 800207e:	0005      	movs	r5, r0
 8002080:	001f      	movs	r7, r3
 8002082:	2b0c      	cmp	r3, #12
 8002084:	d234      	bcs.n	80020f0 <_malloc_r+0x7c>
 8002086:	270c      	movs	r7, #12
 8002088:	42b9      	cmp	r1, r7
 800208a:	d833      	bhi.n	80020f4 <_malloc_r+0x80>
 800208c:	0028      	movs	r0, r5
 800208e:	f000 f871 	bl	8002174 <__malloc_lock>
 8002092:	4e37      	ldr	r6, [pc, #220]	@ (8002170 <_malloc_r+0xfc>)
 8002094:	6833      	ldr	r3, [r6, #0]
 8002096:	001c      	movs	r4, r3
 8002098:	2c00      	cmp	r4, #0
 800209a:	d12f      	bne.n	80020fc <_malloc_r+0x88>
 800209c:	0039      	movs	r1, r7
 800209e:	0028      	movs	r0, r5
 80020a0:	f7ff ffc6 	bl	8002030 <sbrk_aligned>
 80020a4:	0004      	movs	r4, r0
 80020a6:	1c43      	adds	r3, r0, #1
 80020a8:	d15f      	bne.n	800216a <_malloc_r+0xf6>
 80020aa:	6834      	ldr	r4, [r6, #0]
 80020ac:	9400      	str	r4, [sp, #0]
 80020ae:	9b00      	ldr	r3, [sp, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d14a      	bne.n	800214a <_malloc_r+0xd6>
 80020b4:	2c00      	cmp	r4, #0
 80020b6:	d052      	beq.n	800215e <_malloc_r+0xea>
 80020b8:	6823      	ldr	r3, [r4, #0]
 80020ba:	0028      	movs	r0, r5
 80020bc:	18e3      	adds	r3, r4, r3
 80020be:	9900      	ldr	r1, [sp, #0]
 80020c0:	9301      	str	r3, [sp, #4]
 80020c2:	f000 fac7 	bl	8002654 <_sbrk_r>
 80020c6:	9b01      	ldr	r3, [sp, #4]
 80020c8:	4283      	cmp	r3, r0
 80020ca:	d148      	bne.n	800215e <_malloc_r+0xea>
 80020cc:	6823      	ldr	r3, [r4, #0]
 80020ce:	0028      	movs	r0, r5
 80020d0:	1aff      	subs	r7, r7, r3
 80020d2:	0039      	movs	r1, r7
 80020d4:	f7ff ffac 	bl	8002030 <sbrk_aligned>
 80020d8:	3001      	adds	r0, #1
 80020da:	d040      	beq.n	800215e <_malloc_r+0xea>
 80020dc:	6823      	ldr	r3, [r4, #0]
 80020de:	19db      	adds	r3, r3, r7
 80020e0:	6023      	str	r3, [r4, #0]
 80020e2:	6833      	ldr	r3, [r6, #0]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	2a00      	cmp	r2, #0
 80020e8:	d133      	bne.n	8002152 <_malloc_r+0xde>
 80020ea:	9b00      	ldr	r3, [sp, #0]
 80020ec:	6033      	str	r3, [r6, #0]
 80020ee:	e019      	b.n	8002124 <_malloc_r+0xb0>
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	dac9      	bge.n	8002088 <_malloc_r+0x14>
 80020f4:	230c      	movs	r3, #12
 80020f6:	602b      	str	r3, [r5, #0]
 80020f8:	2000      	movs	r0, #0
 80020fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80020fc:	6821      	ldr	r1, [r4, #0]
 80020fe:	1bc9      	subs	r1, r1, r7
 8002100:	d420      	bmi.n	8002144 <_malloc_r+0xd0>
 8002102:	290b      	cmp	r1, #11
 8002104:	d90a      	bls.n	800211c <_malloc_r+0xa8>
 8002106:	19e2      	adds	r2, r4, r7
 8002108:	6027      	str	r7, [r4, #0]
 800210a:	42a3      	cmp	r3, r4
 800210c:	d104      	bne.n	8002118 <_malloc_r+0xa4>
 800210e:	6032      	str	r2, [r6, #0]
 8002110:	6863      	ldr	r3, [r4, #4]
 8002112:	6011      	str	r1, [r2, #0]
 8002114:	6053      	str	r3, [r2, #4]
 8002116:	e005      	b.n	8002124 <_malloc_r+0xb0>
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	e7f9      	b.n	8002110 <_malloc_r+0x9c>
 800211c:	6862      	ldr	r2, [r4, #4]
 800211e:	42a3      	cmp	r3, r4
 8002120:	d10e      	bne.n	8002140 <_malloc_r+0xcc>
 8002122:	6032      	str	r2, [r6, #0]
 8002124:	0028      	movs	r0, r5
 8002126:	f000 f82d 	bl	8002184 <__malloc_unlock>
 800212a:	0020      	movs	r0, r4
 800212c:	2207      	movs	r2, #7
 800212e:	300b      	adds	r0, #11
 8002130:	1d23      	adds	r3, r4, #4
 8002132:	4390      	bics	r0, r2
 8002134:	1ac2      	subs	r2, r0, r3
 8002136:	4298      	cmp	r0, r3
 8002138:	d0df      	beq.n	80020fa <_malloc_r+0x86>
 800213a:	1a1b      	subs	r3, r3, r0
 800213c:	50a3      	str	r3, [r4, r2]
 800213e:	e7dc      	b.n	80020fa <_malloc_r+0x86>
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	e7ef      	b.n	8002124 <_malloc_r+0xb0>
 8002144:	0023      	movs	r3, r4
 8002146:	6864      	ldr	r4, [r4, #4]
 8002148:	e7a6      	b.n	8002098 <_malloc_r+0x24>
 800214a:	9c00      	ldr	r4, [sp, #0]
 800214c:	6863      	ldr	r3, [r4, #4]
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	e7ad      	b.n	80020ae <_malloc_r+0x3a>
 8002152:	001a      	movs	r2, r3
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	42a3      	cmp	r3, r4
 8002158:	d1fb      	bne.n	8002152 <_malloc_r+0xde>
 800215a:	2300      	movs	r3, #0
 800215c:	e7da      	b.n	8002114 <_malloc_r+0xa0>
 800215e:	230c      	movs	r3, #12
 8002160:	0028      	movs	r0, r5
 8002162:	602b      	str	r3, [r5, #0]
 8002164:	f000 f80e 	bl	8002184 <__malloc_unlock>
 8002168:	e7c6      	b.n	80020f8 <_malloc_r+0x84>
 800216a:	6007      	str	r7, [r0, #0]
 800216c:	e7da      	b.n	8002124 <_malloc_r+0xb0>
 800216e:	46c0      	nop			@ (mov r8, r8)
 8002170:	20000228 	.word	0x20000228

08002174 <__malloc_lock>:
 8002174:	b510      	push	{r4, lr}
 8002176:	4802      	ldr	r0, [pc, #8]	@ (8002180 <__malloc_lock+0xc>)
 8002178:	f000 fabd 	bl	80026f6 <__retarget_lock_acquire_recursive>
 800217c:	bd10      	pop	{r4, pc}
 800217e:	46c0      	nop			@ (mov r8, r8)
 8002180:	2000036c 	.word	0x2000036c

08002184 <__malloc_unlock>:
 8002184:	b510      	push	{r4, lr}
 8002186:	4802      	ldr	r0, [pc, #8]	@ (8002190 <__malloc_unlock+0xc>)
 8002188:	f000 fab6 	bl	80026f8 <__retarget_lock_release_recursive>
 800218c:	bd10      	pop	{r4, pc}
 800218e:	46c0      	nop			@ (mov r8, r8)
 8002190:	2000036c 	.word	0x2000036c

08002194 <std>:
 8002194:	2300      	movs	r3, #0
 8002196:	b510      	push	{r4, lr}
 8002198:	0004      	movs	r4, r0
 800219a:	6003      	str	r3, [r0, #0]
 800219c:	6043      	str	r3, [r0, #4]
 800219e:	6083      	str	r3, [r0, #8]
 80021a0:	8181      	strh	r1, [r0, #12]
 80021a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80021a4:	81c2      	strh	r2, [r0, #14]
 80021a6:	6103      	str	r3, [r0, #16]
 80021a8:	6143      	str	r3, [r0, #20]
 80021aa:	6183      	str	r3, [r0, #24]
 80021ac:	0019      	movs	r1, r3
 80021ae:	2208      	movs	r2, #8
 80021b0:	305c      	adds	r0, #92	@ 0x5c
 80021b2:	f000 f9ff 	bl	80025b4 <memset>
 80021b6:	4b0b      	ldr	r3, [pc, #44]	@ (80021e4 <std+0x50>)
 80021b8:	6224      	str	r4, [r4, #32]
 80021ba:	6263      	str	r3, [r4, #36]	@ 0x24
 80021bc:	4b0a      	ldr	r3, [pc, #40]	@ (80021e8 <std+0x54>)
 80021be:	62a3      	str	r3, [r4, #40]	@ 0x28
 80021c0:	4b0a      	ldr	r3, [pc, #40]	@ (80021ec <std+0x58>)
 80021c2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80021c4:	4b0a      	ldr	r3, [pc, #40]	@ (80021f0 <std+0x5c>)
 80021c6:	6323      	str	r3, [r4, #48]	@ 0x30
 80021c8:	4b0a      	ldr	r3, [pc, #40]	@ (80021f4 <std+0x60>)
 80021ca:	429c      	cmp	r4, r3
 80021cc:	d005      	beq.n	80021da <std+0x46>
 80021ce:	4b0a      	ldr	r3, [pc, #40]	@ (80021f8 <std+0x64>)
 80021d0:	429c      	cmp	r4, r3
 80021d2:	d002      	beq.n	80021da <std+0x46>
 80021d4:	4b09      	ldr	r3, [pc, #36]	@ (80021fc <std+0x68>)
 80021d6:	429c      	cmp	r4, r3
 80021d8:	d103      	bne.n	80021e2 <std+0x4e>
 80021da:	0020      	movs	r0, r4
 80021dc:	3058      	adds	r0, #88	@ 0x58
 80021de:	f000 fa89 	bl	80026f4 <__retarget_lock_init_recursive>
 80021e2:	bd10      	pop	{r4, pc}
 80021e4:	080023dd 	.word	0x080023dd
 80021e8:	08002405 	.word	0x08002405
 80021ec:	0800243d 	.word	0x0800243d
 80021f0:	08002469 	.word	0x08002469
 80021f4:	2000022c 	.word	0x2000022c
 80021f8:	20000294 	.word	0x20000294
 80021fc:	200002fc 	.word	0x200002fc

08002200 <stdio_exit_handler>:
 8002200:	b510      	push	{r4, lr}
 8002202:	4a03      	ldr	r2, [pc, #12]	@ (8002210 <stdio_exit_handler+0x10>)
 8002204:	4903      	ldr	r1, [pc, #12]	@ (8002214 <stdio_exit_handler+0x14>)
 8002206:	4804      	ldr	r0, [pc, #16]	@ (8002218 <stdio_exit_handler+0x18>)
 8002208:	f000 f86c 	bl	80022e4 <_fwalk_sglue>
 800220c:	bd10      	pop	{r4, pc}
 800220e:	46c0      	nop			@ (mov r8, r8)
 8002210:	20000014 	.word	0x20000014
 8002214:	0800289d 	.word	0x0800289d
 8002218:	20000024 	.word	0x20000024

0800221c <cleanup_stdio>:
 800221c:	6841      	ldr	r1, [r0, #4]
 800221e:	4b0b      	ldr	r3, [pc, #44]	@ (800224c <cleanup_stdio+0x30>)
 8002220:	b510      	push	{r4, lr}
 8002222:	0004      	movs	r4, r0
 8002224:	4299      	cmp	r1, r3
 8002226:	d001      	beq.n	800222c <cleanup_stdio+0x10>
 8002228:	f000 fb38 	bl	800289c <_fflush_r>
 800222c:	68a1      	ldr	r1, [r4, #8]
 800222e:	4b08      	ldr	r3, [pc, #32]	@ (8002250 <cleanup_stdio+0x34>)
 8002230:	4299      	cmp	r1, r3
 8002232:	d002      	beq.n	800223a <cleanup_stdio+0x1e>
 8002234:	0020      	movs	r0, r4
 8002236:	f000 fb31 	bl	800289c <_fflush_r>
 800223a:	68e1      	ldr	r1, [r4, #12]
 800223c:	4b05      	ldr	r3, [pc, #20]	@ (8002254 <cleanup_stdio+0x38>)
 800223e:	4299      	cmp	r1, r3
 8002240:	d002      	beq.n	8002248 <cleanup_stdio+0x2c>
 8002242:	0020      	movs	r0, r4
 8002244:	f000 fb2a 	bl	800289c <_fflush_r>
 8002248:	bd10      	pop	{r4, pc}
 800224a:	46c0      	nop			@ (mov r8, r8)
 800224c:	2000022c 	.word	0x2000022c
 8002250:	20000294 	.word	0x20000294
 8002254:	200002fc 	.word	0x200002fc

08002258 <global_stdio_init.part.0>:
 8002258:	b510      	push	{r4, lr}
 800225a:	4b09      	ldr	r3, [pc, #36]	@ (8002280 <global_stdio_init.part.0+0x28>)
 800225c:	4a09      	ldr	r2, [pc, #36]	@ (8002284 <global_stdio_init.part.0+0x2c>)
 800225e:	2104      	movs	r1, #4
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	4809      	ldr	r0, [pc, #36]	@ (8002288 <global_stdio_init.part.0+0x30>)
 8002264:	2200      	movs	r2, #0
 8002266:	f7ff ff95 	bl	8002194 <std>
 800226a:	2201      	movs	r2, #1
 800226c:	2109      	movs	r1, #9
 800226e:	4807      	ldr	r0, [pc, #28]	@ (800228c <global_stdio_init.part.0+0x34>)
 8002270:	f7ff ff90 	bl	8002194 <std>
 8002274:	2202      	movs	r2, #2
 8002276:	2112      	movs	r1, #18
 8002278:	4805      	ldr	r0, [pc, #20]	@ (8002290 <global_stdio_init.part.0+0x38>)
 800227a:	f7ff ff8b 	bl	8002194 <std>
 800227e:	bd10      	pop	{r4, pc}
 8002280:	20000364 	.word	0x20000364
 8002284:	08002201 	.word	0x08002201
 8002288:	2000022c 	.word	0x2000022c
 800228c:	20000294 	.word	0x20000294
 8002290:	200002fc 	.word	0x200002fc

08002294 <__sfp_lock_acquire>:
 8002294:	b510      	push	{r4, lr}
 8002296:	4802      	ldr	r0, [pc, #8]	@ (80022a0 <__sfp_lock_acquire+0xc>)
 8002298:	f000 fa2d 	bl	80026f6 <__retarget_lock_acquire_recursive>
 800229c:	bd10      	pop	{r4, pc}
 800229e:	46c0      	nop			@ (mov r8, r8)
 80022a0:	2000036d 	.word	0x2000036d

080022a4 <__sfp_lock_release>:
 80022a4:	b510      	push	{r4, lr}
 80022a6:	4802      	ldr	r0, [pc, #8]	@ (80022b0 <__sfp_lock_release+0xc>)
 80022a8:	f000 fa26 	bl	80026f8 <__retarget_lock_release_recursive>
 80022ac:	bd10      	pop	{r4, pc}
 80022ae:	46c0      	nop			@ (mov r8, r8)
 80022b0:	2000036d 	.word	0x2000036d

080022b4 <__sinit>:
 80022b4:	b510      	push	{r4, lr}
 80022b6:	0004      	movs	r4, r0
 80022b8:	f7ff ffec 	bl	8002294 <__sfp_lock_acquire>
 80022bc:	6a23      	ldr	r3, [r4, #32]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d002      	beq.n	80022c8 <__sinit+0x14>
 80022c2:	f7ff ffef 	bl	80022a4 <__sfp_lock_release>
 80022c6:	bd10      	pop	{r4, pc}
 80022c8:	4b04      	ldr	r3, [pc, #16]	@ (80022dc <__sinit+0x28>)
 80022ca:	6223      	str	r3, [r4, #32]
 80022cc:	4b04      	ldr	r3, [pc, #16]	@ (80022e0 <__sinit+0x2c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1f6      	bne.n	80022c2 <__sinit+0xe>
 80022d4:	f7ff ffc0 	bl	8002258 <global_stdio_init.part.0>
 80022d8:	e7f3      	b.n	80022c2 <__sinit+0xe>
 80022da:	46c0      	nop			@ (mov r8, r8)
 80022dc:	0800221d 	.word	0x0800221d
 80022e0:	20000364 	.word	0x20000364

080022e4 <_fwalk_sglue>:
 80022e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80022e6:	0014      	movs	r4, r2
 80022e8:	2600      	movs	r6, #0
 80022ea:	9000      	str	r0, [sp, #0]
 80022ec:	9101      	str	r1, [sp, #4]
 80022ee:	68a5      	ldr	r5, [r4, #8]
 80022f0:	6867      	ldr	r7, [r4, #4]
 80022f2:	3f01      	subs	r7, #1
 80022f4:	d504      	bpl.n	8002300 <_fwalk_sglue+0x1c>
 80022f6:	6824      	ldr	r4, [r4, #0]
 80022f8:	2c00      	cmp	r4, #0
 80022fa:	d1f8      	bne.n	80022ee <_fwalk_sglue+0xa>
 80022fc:	0030      	movs	r0, r6
 80022fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002300:	89ab      	ldrh	r3, [r5, #12]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d908      	bls.n	8002318 <_fwalk_sglue+0x34>
 8002306:	220e      	movs	r2, #14
 8002308:	5eab      	ldrsh	r3, [r5, r2]
 800230a:	3301      	adds	r3, #1
 800230c:	d004      	beq.n	8002318 <_fwalk_sglue+0x34>
 800230e:	0029      	movs	r1, r5
 8002310:	9800      	ldr	r0, [sp, #0]
 8002312:	9b01      	ldr	r3, [sp, #4]
 8002314:	4798      	blx	r3
 8002316:	4306      	orrs	r6, r0
 8002318:	3568      	adds	r5, #104	@ 0x68
 800231a:	e7ea      	b.n	80022f2 <_fwalk_sglue+0xe>

0800231c <_puts_r>:
 800231c:	6a03      	ldr	r3, [r0, #32]
 800231e:	b570      	push	{r4, r5, r6, lr}
 8002320:	0005      	movs	r5, r0
 8002322:	000e      	movs	r6, r1
 8002324:	6884      	ldr	r4, [r0, #8]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <_puts_r+0x12>
 800232a:	f7ff ffc3 	bl	80022b4 <__sinit>
 800232e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002330:	07db      	lsls	r3, r3, #31
 8002332:	d405      	bmi.n	8002340 <_puts_r+0x24>
 8002334:	89a3      	ldrh	r3, [r4, #12]
 8002336:	059b      	lsls	r3, r3, #22
 8002338:	d402      	bmi.n	8002340 <_puts_r+0x24>
 800233a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800233c:	f000 f9db 	bl	80026f6 <__retarget_lock_acquire_recursive>
 8002340:	89a3      	ldrh	r3, [r4, #12]
 8002342:	071b      	lsls	r3, r3, #28
 8002344:	d502      	bpl.n	800234c <_puts_r+0x30>
 8002346:	6923      	ldr	r3, [r4, #16]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d11f      	bne.n	800238c <_puts_r+0x70>
 800234c:	0021      	movs	r1, r4
 800234e:	0028      	movs	r0, r5
 8002350:	f000 f8d2 	bl	80024f8 <__swsetup_r>
 8002354:	2800      	cmp	r0, #0
 8002356:	d019      	beq.n	800238c <_puts_r+0x70>
 8002358:	2501      	movs	r5, #1
 800235a:	426d      	negs	r5, r5
 800235c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800235e:	07db      	lsls	r3, r3, #31
 8002360:	d405      	bmi.n	800236e <_puts_r+0x52>
 8002362:	89a3      	ldrh	r3, [r4, #12]
 8002364:	059b      	lsls	r3, r3, #22
 8002366:	d402      	bmi.n	800236e <_puts_r+0x52>
 8002368:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800236a:	f000 f9c5 	bl	80026f8 <__retarget_lock_release_recursive>
 800236e:	0028      	movs	r0, r5
 8002370:	bd70      	pop	{r4, r5, r6, pc}
 8002372:	3601      	adds	r6, #1
 8002374:	60a3      	str	r3, [r4, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	da04      	bge.n	8002384 <_puts_r+0x68>
 800237a:	69a2      	ldr	r2, [r4, #24]
 800237c:	429a      	cmp	r2, r3
 800237e:	dc16      	bgt.n	80023ae <_puts_r+0x92>
 8002380:	290a      	cmp	r1, #10
 8002382:	d014      	beq.n	80023ae <_puts_r+0x92>
 8002384:	6823      	ldr	r3, [r4, #0]
 8002386:	1c5a      	adds	r2, r3, #1
 8002388:	6022      	str	r2, [r4, #0]
 800238a:	7019      	strb	r1, [r3, #0]
 800238c:	68a3      	ldr	r3, [r4, #8]
 800238e:	7831      	ldrb	r1, [r6, #0]
 8002390:	3b01      	subs	r3, #1
 8002392:	2900      	cmp	r1, #0
 8002394:	d1ed      	bne.n	8002372 <_puts_r+0x56>
 8002396:	60a3      	str	r3, [r4, #8]
 8002398:	2b00      	cmp	r3, #0
 800239a:	da0f      	bge.n	80023bc <_puts_r+0xa0>
 800239c:	0022      	movs	r2, r4
 800239e:	0028      	movs	r0, r5
 80023a0:	310a      	adds	r1, #10
 80023a2:	f000 f867 	bl	8002474 <__swbuf_r>
 80023a6:	3001      	adds	r0, #1
 80023a8:	d0d6      	beq.n	8002358 <_puts_r+0x3c>
 80023aa:	250a      	movs	r5, #10
 80023ac:	e7d6      	b.n	800235c <_puts_r+0x40>
 80023ae:	0022      	movs	r2, r4
 80023b0:	0028      	movs	r0, r5
 80023b2:	f000 f85f 	bl	8002474 <__swbuf_r>
 80023b6:	3001      	adds	r0, #1
 80023b8:	d1e8      	bne.n	800238c <_puts_r+0x70>
 80023ba:	e7cd      	b.n	8002358 <_puts_r+0x3c>
 80023bc:	6823      	ldr	r3, [r4, #0]
 80023be:	1c5a      	adds	r2, r3, #1
 80023c0:	6022      	str	r2, [r4, #0]
 80023c2:	220a      	movs	r2, #10
 80023c4:	701a      	strb	r2, [r3, #0]
 80023c6:	e7f0      	b.n	80023aa <_puts_r+0x8e>

080023c8 <puts>:
 80023c8:	b510      	push	{r4, lr}
 80023ca:	4b03      	ldr	r3, [pc, #12]	@ (80023d8 <puts+0x10>)
 80023cc:	0001      	movs	r1, r0
 80023ce:	6818      	ldr	r0, [r3, #0]
 80023d0:	f7ff ffa4 	bl	800231c <_puts_r>
 80023d4:	bd10      	pop	{r4, pc}
 80023d6:	46c0      	nop			@ (mov r8, r8)
 80023d8:	20000020 	.word	0x20000020

080023dc <__sread>:
 80023dc:	b570      	push	{r4, r5, r6, lr}
 80023de:	000c      	movs	r4, r1
 80023e0:	250e      	movs	r5, #14
 80023e2:	5f49      	ldrsh	r1, [r1, r5]
 80023e4:	f000 f922 	bl	800262c <_read_r>
 80023e8:	2800      	cmp	r0, #0
 80023ea:	db03      	blt.n	80023f4 <__sread+0x18>
 80023ec:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80023ee:	181b      	adds	r3, r3, r0
 80023f0:	6563      	str	r3, [r4, #84]	@ 0x54
 80023f2:	bd70      	pop	{r4, r5, r6, pc}
 80023f4:	89a3      	ldrh	r3, [r4, #12]
 80023f6:	4a02      	ldr	r2, [pc, #8]	@ (8002400 <__sread+0x24>)
 80023f8:	4013      	ands	r3, r2
 80023fa:	81a3      	strh	r3, [r4, #12]
 80023fc:	e7f9      	b.n	80023f2 <__sread+0x16>
 80023fe:	46c0      	nop			@ (mov r8, r8)
 8002400:	ffffefff 	.word	0xffffefff

08002404 <__swrite>:
 8002404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002406:	001f      	movs	r7, r3
 8002408:	898b      	ldrh	r3, [r1, #12]
 800240a:	0005      	movs	r5, r0
 800240c:	000c      	movs	r4, r1
 800240e:	0016      	movs	r6, r2
 8002410:	05db      	lsls	r3, r3, #23
 8002412:	d505      	bpl.n	8002420 <__swrite+0x1c>
 8002414:	230e      	movs	r3, #14
 8002416:	5ec9      	ldrsh	r1, [r1, r3]
 8002418:	2200      	movs	r2, #0
 800241a:	2302      	movs	r3, #2
 800241c:	f000 f8f2 	bl	8002604 <_lseek_r>
 8002420:	89a3      	ldrh	r3, [r4, #12]
 8002422:	4a05      	ldr	r2, [pc, #20]	@ (8002438 <__swrite+0x34>)
 8002424:	0028      	movs	r0, r5
 8002426:	4013      	ands	r3, r2
 8002428:	81a3      	strh	r3, [r4, #12]
 800242a:	0032      	movs	r2, r6
 800242c:	230e      	movs	r3, #14
 800242e:	5ee1      	ldrsh	r1, [r4, r3]
 8002430:	003b      	movs	r3, r7
 8002432:	f000 f921 	bl	8002678 <_write_r>
 8002436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002438:	ffffefff 	.word	0xffffefff

0800243c <__sseek>:
 800243c:	b570      	push	{r4, r5, r6, lr}
 800243e:	000c      	movs	r4, r1
 8002440:	250e      	movs	r5, #14
 8002442:	5f49      	ldrsh	r1, [r1, r5]
 8002444:	f000 f8de 	bl	8002604 <_lseek_r>
 8002448:	89a3      	ldrh	r3, [r4, #12]
 800244a:	1c42      	adds	r2, r0, #1
 800244c:	d103      	bne.n	8002456 <__sseek+0x1a>
 800244e:	4a05      	ldr	r2, [pc, #20]	@ (8002464 <__sseek+0x28>)
 8002450:	4013      	ands	r3, r2
 8002452:	81a3      	strh	r3, [r4, #12]
 8002454:	bd70      	pop	{r4, r5, r6, pc}
 8002456:	2280      	movs	r2, #128	@ 0x80
 8002458:	0152      	lsls	r2, r2, #5
 800245a:	4313      	orrs	r3, r2
 800245c:	81a3      	strh	r3, [r4, #12]
 800245e:	6560      	str	r0, [r4, #84]	@ 0x54
 8002460:	e7f8      	b.n	8002454 <__sseek+0x18>
 8002462:	46c0      	nop			@ (mov r8, r8)
 8002464:	ffffefff 	.word	0xffffefff

08002468 <__sclose>:
 8002468:	b510      	push	{r4, lr}
 800246a:	230e      	movs	r3, #14
 800246c:	5ec9      	ldrsh	r1, [r1, r3]
 800246e:	f000 f8b7 	bl	80025e0 <_close_r>
 8002472:	bd10      	pop	{r4, pc}

08002474 <__swbuf_r>:
 8002474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002476:	0006      	movs	r6, r0
 8002478:	000d      	movs	r5, r1
 800247a:	0014      	movs	r4, r2
 800247c:	2800      	cmp	r0, #0
 800247e:	d004      	beq.n	800248a <__swbuf_r+0x16>
 8002480:	6a03      	ldr	r3, [r0, #32]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <__swbuf_r+0x16>
 8002486:	f7ff ff15 	bl	80022b4 <__sinit>
 800248a:	69a3      	ldr	r3, [r4, #24]
 800248c:	60a3      	str	r3, [r4, #8]
 800248e:	89a3      	ldrh	r3, [r4, #12]
 8002490:	071b      	lsls	r3, r3, #28
 8002492:	d502      	bpl.n	800249a <__swbuf_r+0x26>
 8002494:	6923      	ldr	r3, [r4, #16]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d109      	bne.n	80024ae <__swbuf_r+0x3a>
 800249a:	0021      	movs	r1, r4
 800249c:	0030      	movs	r0, r6
 800249e:	f000 f82b 	bl	80024f8 <__swsetup_r>
 80024a2:	2800      	cmp	r0, #0
 80024a4:	d003      	beq.n	80024ae <__swbuf_r+0x3a>
 80024a6:	2501      	movs	r5, #1
 80024a8:	426d      	negs	r5, r5
 80024aa:	0028      	movs	r0, r5
 80024ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024ae:	6923      	ldr	r3, [r4, #16]
 80024b0:	6820      	ldr	r0, [r4, #0]
 80024b2:	b2ef      	uxtb	r7, r5
 80024b4:	1ac0      	subs	r0, r0, r3
 80024b6:	6963      	ldr	r3, [r4, #20]
 80024b8:	b2ed      	uxtb	r5, r5
 80024ba:	4283      	cmp	r3, r0
 80024bc:	dc05      	bgt.n	80024ca <__swbuf_r+0x56>
 80024be:	0021      	movs	r1, r4
 80024c0:	0030      	movs	r0, r6
 80024c2:	f000 f9eb 	bl	800289c <_fflush_r>
 80024c6:	2800      	cmp	r0, #0
 80024c8:	d1ed      	bne.n	80024a6 <__swbuf_r+0x32>
 80024ca:	68a3      	ldr	r3, [r4, #8]
 80024cc:	3001      	adds	r0, #1
 80024ce:	3b01      	subs	r3, #1
 80024d0:	60a3      	str	r3, [r4, #8]
 80024d2:	6823      	ldr	r3, [r4, #0]
 80024d4:	1c5a      	adds	r2, r3, #1
 80024d6:	6022      	str	r2, [r4, #0]
 80024d8:	701f      	strb	r7, [r3, #0]
 80024da:	6963      	ldr	r3, [r4, #20]
 80024dc:	4283      	cmp	r3, r0
 80024de:	d004      	beq.n	80024ea <__swbuf_r+0x76>
 80024e0:	89a3      	ldrh	r3, [r4, #12]
 80024e2:	07db      	lsls	r3, r3, #31
 80024e4:	d5e1      	bpl.n	80024aa <__swbuf_r+0x36>
 80024e6:	2d0a      	cmp	r5, #10
 80024e8:	d1df      	bne.n	80024aa <__swbuf_r+0x36>
 80024ea:	0021      	movs	r1, r4
 80024ec:	0030      	movs	r0, r6
 80024ee:	f000 f9d5 	bl	800289c <_fflush_r>
 80024f2:	2800      	cmp	r0, #0
 80024f4:	d0d9      	beq.n	80024aa <__swbuf_r+0x36>
 80024f6:	e7d6      	b.n	80024a6 <__swbuf_r+0x32>

080024f8 <__swsetup_r>:
 80024f8:	4b2d      	ldr	r3, [pc, #180]	@ (80025b0 <__swsetup_r+0xb8>)
 80024fa:	b570      	push	{r4, r5, r6, lr}
 80024fc:	0005      	movs	r5, r0
 80024fe:	6818      	ldr	r0, [r3, #0]
 8002500:	000c      	movs	r4, r1
 8002502:	2800      	cmp	r0, #0
 8002504:	d004      	beq.n	8002510 <__swsetup_r+0x18>
 8002506:	6a03      	ldr	r3, [r0, #32]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <__swsetup_r+0x18>
 800250c:	f7ff fed2 	bl	80022b4 <__sinit>
 8002510:	220c      	movs	r2, #12
 8002512:	5ea3      	ldrsh	r3, [r4, r2]
 8002514:	071a      	lsls	r2, r3, #28
 8002516:	d423      	bmi.n	8002560 <__swsetup_r+0x68>
 8002518:	06da      	lsls	r2, r3, #27
 800251a:	d407      	bmi.n	800252c <__swsetup_r+0x34>
 800251c:	2209      	movs	r2, #9
 800251e:	602a      	str	r2, [r5, #0]
 8002520:	2240      	movs	r2, #64	@ 0x40
 8002522:	2001      	movs	r0, #1
 8002524:	4313      	orrs	r3, r2
 8002526:	81a3      	strh	r3, [r4, #12]
 8002528:	4240      	negs	r0, r0
 800252a:	e03a      	b.n	80025a2 <__swsetup_r+0xaa>
 800252c:	075b      	lsls	r3, r3, #29
 800252e:	d513      	bpl.n	8002558 <__swsetup_r+0x60>
 8002530:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002532:	2900      	cmp	r1, #0
 8002534:	d008      	beq.n	8002548 <__swsetup_r+0x50>
 8002536:	0023      	movs	r3, r4
 8002538:	3344      	adds	r3, #68	@ 0x44
 800253a:	4299      	cmp	r1, r3
 800253c:	d002      	beq.n	8002544 <__swsetup_r+0x4c>
 800253e:	0028      	movs	r0, r5
 8002540:	f000 f8dc 	bl	80026fc <_free_r>
 8002544:	2300      	movs	r3, #0
 8002546:	6363      	str	r3, [r4, #52]	@ 0x34
 8002548:	2224      	movs	r2, #36	@ 0x24
 800254a:	89a3      	ldrh	r3, [r4, #12]
 800254c:	4393      	bics	r3, r2
 800254e:	81a3      	strh	r3, [r4, #12]
 8002550:	2300      	movs	r3, #0
 8002552:	6063      	str	r3, [r4, #4]
 8002554:	6923      	ldr	r3, [r4, #16]
 8002556:	6023      	str	r3, [r4, #0]
 8002558:	2308      	movs	r3, #8
 800255a:	89a2      	ldrh	r2, [r4, #12]
 800255c:	4313      	orrs	r3, r2
 800255e:	81a3      	strh	r3, [r4, #12]
 8002560:	6923      	ldr	r3, [r4, #16]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10b      	bne.n	800257e <__swsetup_r+0x86>
 8002566:	21a0      	movs	r1, #160	@ 0xa0
 8002568:	2280      	movs	r2, #128	@ 0x80
 800256a:	89a3      	ldrh	r3, [r4, #12]
 800256c:	0089      	lsls	r1, r1, #2
 800256e:	0092      	lsls	r2, r2, #2
 8002570:	400b      	ands	r3, r1
 8002572:	4293      	cmp	r3, r2
 8002574:	d003      	beq.n	800257e <__swsetup_r+0x86>
 8002576:	0021      	movs	r1, r4
 8002578:	0028      	movs	r0, r5
 800257a:	f000 f9e5 	bl	8002948 <__smakebuf_r>
 800257e:	220c      	movs	r2, #12
 8002580:	5ea3      	ldrsh	r3, [r4, r2]
 8002582:	2101      	movs	r1, #1
 8002584:	001a      	movs	r2, r3
 8002586:	400a      	ands	r2, r1
 8002588:	420b      	tst	r3, r1
 800258a:	d00b      	beq.n	80025a4 <__swsetup_r+0xac>
 800258c:	2200      	movs	r2, #0
 800258e:	60a2      	str	r2, [r4, #8]
 8002590:	6962      	ldr	r2, [r4, #20]
 8002592:	4252      	negs	r2, r2
 8002594:	61a2      	str	r2, [r4, #24]
 8002596:	2000      	movs	r0, #0
 8002598:	6922      	ldr	r2, [r4, #16]
 800259a:	4282      	cmp	r2, r0
 800259c:	d101      	bne.n	80025a2 <__swsetup_r+0xaa>
 800259e:	061a      	lsls	r2, r3, #24
 80025a0:	d4be      	bmi.n	8002520 <__swsetup_r+0x28>
 80025a2:	bd70      	pop	{r4, r5, r6, pc}
 80025a4:	0799      	lsls	r1, r3, #30
 80025a6:	d400      	bmi.n	80025aa <__swsetup_r+0xb2>
 80025a8:	6962      	ldr	r2, [r4, #20]
 80025aa:	60a2      	str	r2, [r4, #8]
 80025ac:	e7f3      	b.n	8002596 <__swsetup_r+0x9e>
 80025ae:	46c0      	nop			@ (mov r8, r8)
 80025b0:	20000020 	.word	0x20000020

080025b4 <memset>:
 80025b4:	0003      	movs	r3, r0
 80025b6:	1882      	adds	r2, r0, r2
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d100      	bne.n	80025be <memset+0xa>
 80025bc:	4770      	bx	lr
 80025be:	7019      	strb	r1, [r3, #0]
 80025c0:	3301      	adds	r3, #1
 80025c2:	e7f9      	b.n	80025b8 <memset+0x4>

080025c4 <strchr>:
 80025c4:	b2c9      	uxtb	r1, r1
 80025c6:	7803      	ldrb	r3, [r0, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d004      	beq.n	80025d6 <strchr+0x12>
 80025cc:	428b      	cmp	r3, r1
 80025ce:	d100      	bne.n	80025d2 <strchr+0xe>
 80025d0:	4770      	bx	lr
 80025d2:	3001      	adds	r0, #1
 80025d4:	e7f7      	b.n	80025c6 <strchr+0x2>
 80025d6:	424b      	negs	r3, r1
 80025d8:	4159      	adcs	r1, r3
 80025da:	4249      	negs	r1, r1
 80025dc:	4008      	ands	r0, r1
 80025de:	e7f7      	b.n	80025d0 <strchr+0xc>

080025e0 <_close_r>:
 80025e0:	2300      	movs	r3, #0
 80025e2:	b570      	push	{r4, r5, r6, lr}
 80025e4:	4d06      	ldr	r5, [pc, #24]	@ (8002600 <_close_r+0x20>)
 80025e6:	0004      	movs	r4, r0
 80025e8:	0008      	movs	r0, r1
 80025ea:	602b      	str	r3, [r5, #0]
 80025ec:	f7fe f8d8 	bl	80007a0 <_close>
 80025f0:	1c43      	adds	r3, r0, #1
 80025f2:	d103      	bne.n	80025fc <_close_r+0x1c>
 80025f4:	682b      	ldr	r3, [r5, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d000      	beq.n	80025fc <_close_r+0x1c>
 80025fa:	6023      	str	r3, [r4, #0]
 80025fc:	bd70      	pop	{r4, r5, r6, pc}
 80025fe:	46c0      	nop			@ (mov r8, r8)
 8002600:	20000368 	.word	0x20000368

08002604 <_lseek_r>:
 8002604:	b570      	push	{r4, r5, r6, lr}
 8002606:	0004      	movs	r4, r0
 8002608:	0008      	movs	r0, r1
 800260a:	0011      	movs	r1, r2
 800260c:	001a      	movs	r2, r3
 800260e:	2300      	movs	r3, #0
 8002610:	4d05      	ldr	r5, [pc, #20]	@ (8002628 <_lseek_r+0x24>)
 8002612:	602b      	str	r3, [r5, #0]
 8002614:	f7fe f8ce 	bl	80007b4 <_lseek>
 8002618:	1c43      	adds	r3, r0, #1
 800261a:	d103      	bne.n	8002624 <_lseek_r+0x20>
 800261c:	682b      	ldr	r3, [r5, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d000      	beq.n	8002624 <_lseek_r+0x20>
 8002622:	6023      	str	r3, [r4, #0]
 8002624:	bd70      	pop	{r4, r5, r6, pc}
 8002626:	46c0      	nop			@ (mov r8, r8)
 8002628:	20000368 	.word	0x20000368

0800262c <_read_r>:
 800262c:	b570      	push	{r4, r5, r6, lr}
 800262e:	0004      	movs	r4, r0
 8002630:	0008      	movs	r0, r1
 8002632:	0011      	movs	r1, r2
 8002634:	001a      	movs	r2, r3
 8002636:	2300      	movs	r3, #0
 8002638:	4d05      	ldr	r5, [pc, #20]	@ (8002650 <_read_r+0x24>)
 800263a:	602b      	str	r3, [r5, #0]
 800263c:	f7fe f896 	bl	800076c <_read>
 8002640:	1c43      	adds	r3, r0, #1
 8002642:	d103      	bne.n	800264c <_read_r+0x20>
 8002644:	682b      	ldr	r3, [r5, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d000      	beq.n	800264c <_read_r+0x20>
 800264a:	6023      	str	r3, [r4, #0]
 800264c:	bd70      	pop	{r4, r5, r6, pc}
 800264e:	46c0      	nop			@ (mov r8, r8)
 8002650:	20000368 	.word	0x20000368

08002654 <_sbrk_r>:
 8002654:	2300      	movs	r3, #0
 8002656:	b570      	push	{r4, r5, r6, lr}
 8002658:	4d06      	ldr	r5, [pc, #24]	@ (8002674 <_sbrk_r+0x20>)
 800265a:	0004      	movs	r4, r0
 800265c:	0008      	movs	r0, r1
 800265e:	602b      	str	r3, [r5, #0]
 8002660:	f7fe f8aa 	bl	80007b8 <_sbrk>
 8002664:	1c43      	adds	r3, r0, #1
 8002666:	d103      	bne.n	8002670 <_sbrk_r+0x1c>
 8002668:	682b      	ldr	r3, [r5, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d000      	beq.n	8002670 <_sbrk_r+0x1c>
 800266e:	6023      	str	r3, [r4, #0]
 8002670:	bd70      	pop	{r4, r5, r6, pc}
 8002672:	46c0      	nop			@ (mov r8, r8)
 8002674:	20000368 	.word	0x20000368

08002678 <_write_r>:
 8002678:	b570      	push	{r4, r5, r6, lr}
 800267a:	0004      	movs	r4, r0
 800267c:	0008      	movs	r0, r1
 800267e:	0011      	movs	r1, r2
 8002680:	001a      	movs	r2, r3
 8002682:	2300      	movs	r3, #0
 8002684:	4d05      	ldr	r5, [pc, #20]	@ (800269c <_write_r+0x24>)
 8002686:	602b      	str	r3, [r5, #0]
 8002688:	f7fe f87d 	bl	8000786 <_write>
 800268c:	1c43      	adds	r3, r0, #1
 800268e:	d103      	bne.n	8002698 <_write_r+0x20>
 8002690:	682b      	ldr	r3, [r5, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d000      	beq.n	8002698 <_write_r+0x20>
 8002696:	6023      	str	r3, [r4, #0]
 8002698:	bd70      	pop	{r4, r5, r6, pc}
 800269a:	46c0      	nop			@ (mov r8, r8)
 800269c:	20000368 	.word	0x20000368

080026a0 <__errno>:
 80026a0:	4b01      	ldr	r3, [pc, #4]	@ (80026a8 <__errno+0x8>)
 80026a2:	6818      	ldr	r0, [r3, #0]
 80026a4:	4770      	bx	lr
 80026a6:	46c0      	nop			@ (mov r8, r8)
 80026a8:	20000020 	.word	0x20000020

080026ac <__libc_init_array>:
 80026ac:	b570      	push	{r4, r5, r6, lr}
 80026ae:	2600      	movs	r6, #0
 80026b0:	4c0c      	ldr	r4, [pc, #48]	@ (80026e4 <__libc_init_array+0x38>)
 80026b2:	4d0d      	ldr	r5, [pc, #52]	@ (80026e8 <__libc_init_array+0x3c>)
 80026b4:	1b64      	subs	r4, r4, r5
 80026b6:	10a4      	asrs	r4, r4, #2
 80026b8:	42a6      	cmp	r6, r4
 80026ba:	d109      	bne.n	80026d0 <__libc_init_array+0x24>
 80026bc:	2600      	movs	r6, #0
 80026be:	f000 f9a9 	bl	8002a14 <_init>
 80026c2:	4c0a      	ldr	r4, [pc, #40]	@ (80026ec <__libc_init_array+0x40>)
 80026c4:	4d0a      	ldr	r5, [pc, #40]	@ (80026f0 <__libc_init_array+0x44>)
 80026c6:	1b64      	subs	r4, r4, r5
 80026c8:	10a4      	asrs	r4, r4, #2
 80026ca:	42a6      	cmp	r6, r4
 80026cc:	d105      	bne.n	80026da <__libc_init_array+0x2e>
 80026ce:	bd70      	pop	{r4, r5, r6, pc}
 80026d0:	00b3      	lsls	r3, r6, #2
 80026d2:	58eb      	ldr	r3, [r5, r3]
 80026d4:	4798      	blx	r3
 80026d6:	3601      	adds	r6, #1
 80026d8:	e7ee      	b.n	80026b8 <__libc_init_array+0xc>
 80026da:	00b3      	lsls	r3, r6, #2
 80026dc:	58eb      	ldr	r3, [r5, r3]
 80026de:	4798      	blx	r3
 80026e0:	3601      	adds	r6, #1
 80026e2:	e7f2      	b.n	80026ca <__libc_init_array+0x1e>
 80026e4:	08002fb8 	.word	0x08002fb8
 80026e8:	08002fb8 	.word	0x08002fb8
 80026ec:	08002fbc 	.word	0x08002fbc
 80026f0:	08002fb8 	.word	0x08002fb8

080026f4 <__retarget_lock_init_recursive>:
 80026f4:	4770      	bx	lr

080026f6 <__retarget_lock_acquire_recursive>:
 80026f6:	4770      	bx	lr

080026f8 <__retarget_lock_release_recursive>:
 80026f8:	4770      	bx	lr
	...

080026fc <_free_r>:
 80026fc:	b570      	push	{r4, r5, r6, lr}
 80026fe:	0005      	movs	r5, r0
 8002700:	1e0c      	subs	r4, r1, #0
 8002702:	d010      	beq.n	8002726 <_free_r+0x2a>
 8002704:	3c04      	subs	r4, #4
 8002706:	6823      	ldr	r3, [r4, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	da00      	bge.n	800270e <_free_r+0x12>
 800270c:	18e4      	adds	r4, r4, r3
 800270e:	0028      	movs	r0, r5
 8002710:	f7ff fd30 	bl	8002174 <__malloc_lock>
 8002714:	4a1d      	ldr	r2, [pc, #116]	@ (800278c <_free_r+0x90>)
 8002716:	6813      	ldr	r3, [r2, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d105      	bne.n	8002728 <_free_r+0x2c>
 800271c:	6063      	str	r3, [r4, #4]
 800271e:	6014      	str	r4, [r2, #0]
 8002720:	0028      	movs	r0, r5
 8002722:	f7ff fd2f 	bl	8002184 <__malloc_unlock>
 8002726:	bd70      	pop	{r4, r5, r6, pc}
 8002728:	42a3      	cmp	r3, r4
 800272a:	d908      	bls.n	800273e <_free_r+0x42>
 800272c:	6820      	ldr	r0, [r4, #0]
 800272e:	1821      	adds	r1, r4, r0
 8002730:	428b      	cmp	r3, r1
 8002732:	d1f3      	bne.n	800271c <_free_r+0x20>
 8002734:	6819      	ldr	r1, [r3, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	1809      	adds	r1, r1, r0
 800273a:	6021      	str	r1, [r4, #0]
 800273c:	e7ee      	b.n	800271c <_free_r+0x20>
 800273e:	001a      	movs	r2, r3
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <_free_r+0x4e>
 8002746:	42a3      	cmp	r3, r4
 8002748:	d9f9      	bls.n	800273e <_free_r+0x42>
 800274a:	6811      	ldr	r1, [r2, #0]
 800274c:	1850      	adds	r0, r2, r1
 800274e:	42a0      	cmp	r0, r4
 8002750:	d10b      	bne.n	800276a <_free_r+0x6e>
 8002752:	6820      	ldr	r0, [r4, #0]
 8002754:	1809      	adds	r1, r1, r0
 8002756:	1850      	adds	r0, r2, r1
 8002758:	6011      	str	r1, [r2, #0]
 800275a:	4283      	cmp	r3, r0
 800275c:	d1e0      	bne.n	8002720 <_free_r+0x24>
 800275e:	6818      	ldr	r0, [r3, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	1841      	adds	r1, r0, r1
 8002764:	6011      	str	r1, [r2, #0]
 8002766:	6053      	str	r3, [r2, #4]
 8002768:	e7da      	b.n	8002720 <_free_r+0x24>
 800276a:	42a0      	cmp	r0, r4
 800276c:	d902      	bls.n	8002774 <_free_r+0x78>
 800276e:	230c      	movs	r3, #12
 8002770:	602b      	str	r3, [r5, #0]
 8002772:	e7d5      	b.n	8002720 <_free_r+0x24>
 8002774:	6820      	ldr	r0, [r4, #0]
 8002776:	1821      	adds	r1, r4, r0
 8002778:	428b      	cmp	r3, r1
 800277a:	d103      	bne.n	8002784 <_free_r+0x88>
 800277c:	6819      	ldr	r1, [r3, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	1809      	adds	r1, r1, r0
 8002782:	6021      	str	r1, [r4, #0]
 8002784:	6063      	str	r3, [r4, #4]
 8002786:	6054      	str	r4, [r2, #4]
 8002788:	e7ca      	b.n	8002720 <_free_r+0x24>
 800278a:	46c0      	nop			@ (mov r8, r8)
 800278c:	20000228 	.word	0x20000228

08002790 <__sflush_r>:
 8002790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002792:	220c      	movs	r2, #12
 8002794:	5e8b      	ldrsh	r3, [r1, r2]
 8002796:	0005      	movs	r5, r0
 8002798:	000c      	movs	r4, r1
 800279a:	071a      	lsls	r2, r3, #28
 800279c:	d456      	bmi.n	800284c <__sflush_r+0xbc>
 800279e:	684a      	ldr	r2, [r1, #4]
 80027a0:	2a00      	cmp	r2, #0
 80027a2:	dc02      	bgt.n	80027aa <__sflush_r+0x1a>
 80027a4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80027a6:	2a00      	cmp	r2, #0
 80027a8:	dd4e      	ble.n	8002848 <__sflush_r+0xb8>
 80027aa:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80027ac:	2f00      	cmp	r7, #0
 80027ae:	d04b      	beq.n	8002848 <__sflush_r+0xb8>
 80027b0:	2200      	movs	r2, #0
 80027b2:	2080      	movs	r0, #128	@ 0x80
 80027b4:	682e      	ldr	r6, [r5, #0]
 80027b6:	602a      	str	r2, [r5, #0]
 80027b8:	001a      	movs	r2, r3
 80027ba:	0140      	lsls	r0, r0, #5
 80027bc:	6a21      	ldr	r1, [r4, #32]
 80027be:	4002      	ands	r2, r0
 80027c0:	4203      	tst	r3, r0
 80027c2:	d033      	beq.n	800282c <__sflush_r+0x9c>
 80027c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80027c6:	89a3      	ldrh	r3, [r4, #12]
 80027c8:	075b      	lsls	r3, r3, #29
 80027ca:	d506      	bpl.n	80027da <__sflush_r+0x4a>
 80027cc:	6863      	ldr	r3, [r4, #4]
 80027ce:	1ad2      	subs	r2, r2, r3
 80027d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <__sflush_r+0x4a>
 80027d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80027d8:	1ad2      	subs	r2, r2, r3
 80027da:	2300      	movs	r3, #0
 80027dc:	0028      	movs	r0, r5
 80027de:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80027e0:	6a21      	ldr	r1, [r4, #32]
 80027e2:	47b8      	blx	r7
 80027e4:	89a2      	ldrh	r2, [r4, #12]
 80027e6:	1c43      	adds	r3, r0, #1
 80027e8:	d106      	bne.n	80027f8 <__sflush_r+0x68>
 80027ea:	6829      	ldr	r1, [r5, #0]
 80027ec:	291d      	cmp	r1, #29
 80027ee:	d846      	bhi.n	800287e <__sflush_r+0xee>
 80027f0:	4b29      	ldr	r3, [pc, #164]	@ (8002898 <__sflush_r+0x108>)
 80027f2:	40cb      	lsrs	r3, r1
 80027f4:	07db      	lsls	r3, r3, #31
 80027f6:	d542      	bpl.n	800287e <__sflush_r+0xee>
 80027f8:	2300      	movs	r3, #0
 80027fa:	6063      	str	r3, [r4, #4]
 80027fc:	6923      	ldr	r3, [r4, #16]
 80027fe:	6023      	str	r3, [r4, #0]
 8002800:	04d2      	lsls	r2, r2, #19
 8002802:	d505      	bpl.n	8002810 <__sflush_r+0x80>
 8002804:	1c43      	adds	r3, r0, #1
 8002806:	d102      	bne.n	800280e <__sflush_r+0x7e>
 8002808:	682b      	ldr	r3, [r5, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d100      	bne.n	8002810 <__sflush_r+0x80>
 800280e:	6560      	str	r0, [r4, #84]	@ 0x54
 8002810:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002812:	602e      	str	r6, [r5, #0]
 8002814:	2900      	cmp	r1, #0
 8002816:	d017      	beq.n	8002848 <__sflush_r+0xb8>
 8002818:	0023      	movs	r3, r4
 800281a:	3344      	adds	r3, #68	@ 0x44
 800281c:	4299      	cmp	r1, r3
 800281e:	d002      	beq.n	8002826 <__sflush_r+0x96>
 8002820:	0028      	movs	r0, r5
 8002822:	f7ff ff6b 	bl	80026fc <_free_r>
 8002826:	2300      	movs	r3, #0
 8002828:	6363      	str	r3, [r4, #52]	@ 0x34
 800282a:	e00d      	b.n	8002848 <__sflush_r+0xb8>
 800282c:	2301      	movs	r3, #1
 800282e:	0028      	movs	r0, r5
 8002830:	47b8      	blx	r7
 8002832:	0002      	movs	r2, r0
 8002834:	1c43      	adds	r3, r0, #1
 8002836:	d1c6      	bne.n	80027c6 <__sflush_r+0x36>
 8002838:	682b      	ldr	r3, [r5, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d0c3      	beq.n	80027c6 <__sflush_r+0x36>
 800283e:	2b1d      	cmp	r3, #29
 8002840:	d001      	beq.n	8002846 <__sflush_r+0xb6>
 8002842:	2b16      	cmp	r3, #22
 8002844:	d11a      	bne.n	800287c <__sflush_r+0xec>
 8002846:	602e      	str	r6, [r5, #0]
 8002848:	2000      	movs	r0, #0
 800284a:	e01e      	b.n	800288a <__sflush_r+0xfa>
 800284c:	690e      	ldr	r6, [r1, #16]
 800284e:	2e00      	cmp	r6, #0
 8002850:	d0fa      	beq.n	8002848 <__sflush_r+0xb8>
 8002852:	680f      	ldr	r7, [r1, #0]
 8002854:	600e      	str	r6, [r1, #0]
 8002856:	1bba      	subs	r2, r7, r6
 8002858:	9201      	str	r2, [sp, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	079b      	lsls	r3, r3, #30
 800285e:	d100      	bne.n	8002862 <__sflush_r+0xd2>
 8002860:	694a      	ldr	r2, [r1, #20]
 8002862:	60a2      	str	r2, [r4, #8]
 8002864:	9b01      	ldr	r3, [sp, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	ddee      	ble.n	8002848 <__sflush_r+0xb8>
 800286a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800286c:	0032      	movs	r2, r6
 800286e:	001f      	movs	r7, r3
 8002870:	0028      	movs	r0, r5
 8002872:	9b01      	ldr	r3, [sp, #4]
 8002874:	6a21      	ldr	r1, [r4, #32]
 8002876:	47b8      	blx	r7
 8002878:	2800      	cmp	r0, #0
 800287a:	dc07      	bgt.n	800288c <__sflush_r+0xfc>
 800287c:	89a2      	ldrh	r2, [r4, #12]
 800287e:	2340      	movs	r3, #64	@ 0x40
 8002880:	2001      	movs	r0, #1
 8002882:	4313      	orrs	r3, r2
 8002884:	b21b      	sxth	r3, r3
 8002886:	81a3      	strh	r3, [r4, #12]
 8002888:	4240      	negs	r0, r0
 800288a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800288c:	9b01      	ldr	r3, [sp, #4]
 800288e:	1836      	adds	r6, r6, r0
 8002890:	1a1b      	subs	r3, r3, r0
 8002892:	9301      	str	r3, [sp, #4]
 8002894:	e7e6      	b.n	8002864 <__sflush_r+0xd4>
 8002896:	46c0      	nop			@ (mov r8, r8)
 8002898:	20400001 	.word	0x20400001

0800289c <_fflush_r>:
 800289c:	690b      	ldr	r3, [r1, #16]
 800289e:	b570      	push	{r4, r5, r6, lr}
 80028a0:	0005      	movs	r5, r0
 80028a2:	000c      	movs	r4, r1
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d102      	bne.n	80028ae <_fflush_r+0x12>
 80028a8:	2500      	movs	r5, #0
 80028aa:	0028      	movs	r0, r5
 80028ac:	bd70      	pop	{r4, r5, r6, pc}
 80028ae:	2800      	cmp	r0, #0
 80028b0:	d004      	beq.n	80028bc <_fflush_r+0x20>
 80028b2:	6a03      	ldr	r3, [r0, #32]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <_fflush_r+0x20>
 80028b8:	f7ff fcfc 	bl	80022b4 <__sinit>
 80028bc:	220c      	movs	r2, #12
 80028be:	5ea3      	ldrsh	r3, [r4, r2]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0f1      	beq.n	80028a8 <_fflush_r+0xc>
 80028c4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80028c6:	07d2      	lsls	r2, r2, #31
 80028c8:	d404      	bmi.n	80028d4 <_fflush_r+0x38>
 80028ca:	059b      	lsls	r3, r3, #22
 80028cc:	d402      	bmi.n	80028d4 <_fflush_r+0x38>
 80028ce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80028d0:	f7ff ff11 	bl	80026f6 <__retarget_lock_acquire_recursive>
 80028d4:	0028      	movs	r0, r5
 80028d6:	0021      	movs	r1, r4
 80028d8:	f7ff ff5a 	bl	8002790 <__sflush_r>
 80028dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80028de:	0005      	movs	r5, r0
 80028e0:	07db      	lsls	r3, r3, #31
 80028e2:	d4e2      	bmi.n	80028aa <_fflush_r+0xe>
 80028e4:	89a3      	ldrh	r3, [r4, #12]
 80028e6:	059b      	lsls	r3, r3, #22
 80028e8:	d4df      	bmi.n	80028aa <_fflush_r+0xe>
 80028ea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80028ec:	f7ff ff04 	bl	80026f8 <__retarget_lock_release_recursive>
 80028f0:	e7db      	b.n	80028aa <_fflush_r+0xe>
	...

080028f4 <__swhatbuf_r>:
 80028f4:	b570      	push	{r4, r5, r6, lr}
 80028f6:	000e      	movs	r6, r1
 80028f8:	001d      	movs	r5, r3
 80028fa:	230e      	movs	r3, #14
 80028fc:	5ec9      	ldrsh	r1, [r1, r3]
 80028fe:	0014      	movs	r4, r2
 8002900:	b096      	sub	sp, #88	@ 0x58
 8002902:	2900      	cmp	r1, #0
 8002904:	da0c      	bge.n	8002920 <__swhatbuf_r+0x2c>
 8002906:	89b2      	ldrh	r2, [r6, #12]
 8002908:	2380      	movs	r3, #128	@ 0x80
 800290a:	0011      	movs	r1, r2
 800290c:	4019      	ands	r1, r3
 800290e:	421a      	tst	r2, r3
 8002910:	d114      	bne.n	800293c <__swhatbuf_r+0x48>
 8002912:	2380      	movs	r3, #128	@ 0x80
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	2000      	movs	r0, #0
 8002918:	6029      	str	r1, [r5, #0]
 800291a:	6023      	str	r3, [r4, #0]
 800291c:	b016      	add	sp, #88	@ 0x58
 800291e:	bd70      	pop	{r4, r5, r6, pc}
 8002920:	466a      	mov	r2, sp
 8002922:	f000 f853 	bl	80029cc <_fstat_r>
 8002926:	2800      	cmp	r0, #0
 8002928:	dbed      	blt.n	8002906 <__swhatbuf_r+0x12>
 800292a:	23f0      	movs	r3, #240	@ 0xf0
 800292c:	9901      	ldr	r1, [sp, #4]
 800292e:	021b      	lsls	r3, r3, #8
 8002930:	4019      	ands	r1, r3
 8002932:	4b04      	ldr	r3, [pc, #16]	@ (8002944 <__swhatbuf_r+0x50>)
 8002934:	18c9      	adds	r1, r1, r3
 8002936:	424b      	negs	r3, r1
 8002938:	4159      	adcs	r1, r3
 800293a:	e7ea      	b.n	8002912 <__swhatbuf_r+0x1e>
 800293c:	2100      	movs	r1, #0
 800293e:	2340      	movs	r3, #64	@ 0x40
 8002940:	e7e9      	b.n	8002916 <__swhatbuf_r+0x22>
 8002942:	46c0      	nop			@ (mov r8, r8)
 8002944:	ffffe000 	.word	0xffffe000

08002948 <__smakebuf_r>:
 8002948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800294a:	2602      	movs	r6, #2
 800294c:	898b      	ldrh	r3, [r1, #12]
 800294e:	0005      	movs	r5, r0
 8002950:	000c      	movs	r4, r1
 8002952:	b085      	sub	sp, #20
 8002954:	4233      	tst	r3, r6
 8002956:	d007      	beq.n	8002968 <__smakebuf_r+0x20>
 8002958:	0023      	movs	r3, r4
 800295a:	3347      	adds	r3, #71	@ 0x47
 800295c:	6023      	str	r3, [r4, #0]
 800295e:	6123      	str	r3, [r4, #16]
 8002960:	2301      	movs	r3, #1
 8002962:	6163      	str	r3, [r4, #20]
 8002964:	b005      	add	sp, #20
 8002966:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002968:	ab03      	add	r3, sp, #12
 800296a:	aa02      	add	r2, sp, #8
 800296c:	f7ff ffc2 	bl	80028f4 <__swhatbuf_r>
 8002970:	9f02      	ldr	r7, [sp, #8]
 8002972:	9001      	str	r0, [sp, #4]
 8002974:	0039      	movs	r1, r7
 8002976:	0028      	movs	r0, r5
 8002978:	f7ff fb7c 	bl	8002074 <_malloc_r>
 800297c:	2800      	cmp	r0, #0
 800297e:	d108      	bne.n	8002992 <__smakebuf_r+0x4a>
 8002980:	220c      	movs	r2, #12
 8002982:	5ea3      	ldrsh	r3, [r4, r2]
 8002984:	059a      	lsls	r2, r3, #22
 8002986:	d4ed      	bmi.n	8002964 <__smakebuf_r+0x1c>
 8002988:	2203      	movs	r2, #3
 800298a:	4393      	bics	r3, r2
 800298c:	431e      	orrs	r6, r3
 800298e:	81a6      	strh	r6, [r4, #12]
 8002990:	e7e2      	b.n	8002958 <__smakebuf_r+0x10>
 8002992:	2380      	movs	r3, #128	@ 0x80
 8002994:	89a2      	ldrh	r2, [r4, #12]
 8002996:	6020      	str	r0, [r4, #0]
 8002998:	4313      	orrs	r3, r2
 800299a:	81a3      	strh	r3, [r4, #12]
 800299c:	9b03      	ldr	r3, [sp, #12]
 800299e:	6120      	str	r0, [r4, #16]
 80029a0:	6167      	str	r7, [r4, #20]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00c      	beq.n	80029c0 <__smakebuf_r+0x78>
 80029a6:	0028      	movs	r0, r5
 80029a8:	230e      	movs	r3, #14
 80029aa:	5ee1      	ldrsh	r1, [r4, r3]
 80029ac:	f000 f820 	bl	80029f0 <_isatty_r>
 80029b0:	2800      	cmp	r0, #0
 80029b2:	d005      	beq.n	80029c0 <__smakebuf_r+0x78>
 80029b4:	2303      	movs	r3, #3
 80029b6:	89a2      	ldrh	r2, [r4, #12]
 80029b8:	439a      	bics	r2, r3
 80029ba:	3b02      	subs	r3, #2
 80029bc:	4313      	orrs	r3, r2
 80029be:	81a3      	strh	r3, [r4, #12]
 80029c0:	89a3      	ldrh	r3, [r4, #12]
 80029c2:	9a01      	ldr	r2, [sp, #4]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	81a3      	strh	r3, [r4, #12]
 80029c8:	e7cc      	b.n	8002964 <__smakebuf_r+0x1c>
	...

080029cc <_fstat_r>:
 80029cc:	2300      	movs	r3, #0
 80029ce:	b570      	push	{r4, r5, r6, lr}
 80029d0:	4d06      	ldr	r5, [pc, #24]	@ (80029ec <_fstat_r+0x20>)
 80029d2:	0004      	movs	r4, r0
 80029d4:	0008      	movs	r0, r1
 80029d6:	0011      	movs	r1, r2
 80029d8:	602b      	str	r3, [r5, #0]
 80029da:	f7fd fee4 	bl	80007a6 <_fstat>
 80029de:	1c43      	adds	r3, r0, #1
 80029e0:	d103      	bne.n	80029ea <_fstat_r+0x1e>
 80029e2:	682b      	ldr	r3, [r5, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d000      	beq.n	80029ea <_fstat_r+0x1e>
 80029e8:	6023      	str	r3, [r4, #0]
 80029ea:	bd70      	pop	{r4, r5, r6, pc}
 80029ec:	20000368 	.word	0x20000368

080029f0 <_isatty_r>:
 80029f0:	2300      	movs	r3, #0
 80029f2:	b570      	push	{r4, r5, r6, lr}
 80029f4:	4d06      	ldr	r5, [pc, #24]	@ (8002a10 <_isatty_r+0x20>)
 80029f6:	0004      	movs	r4, r0
 80029f8:	0008      	movs	r0, r1
 80029fa:	602b      	str	r3, [r5, #0]
 80029fc:	f7fd fed8 	bl	80007b0 <_isatty>
 8002a00:	1c43      	adds	r3, r0, #1
 8002a02:	d103      	bne.n	8002a0c <_isatty_r+0x1c>
 8002a04:	682b      	ldr	r3, [r5, #0]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d000      	beq.n	8002a0c <_isatty_r+0x1c>
 8002a0a:	6023      	str	r3, [r4, #0]
 8002a0c:	bd70      	pop	{r4, r5, r6, pc}
 8002a0e:	46c0      	nop			@ (mov r8, r8)
 8002a10:	20000368 	.word	0x20000368

08002a14 <_init>:
 8002a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a16:	46c0      	nop			@ (mov r8, r8)
 8002a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a1a:	bc08      	pop	{r3}
 8002a1c:	469e      	mov	lr, r3
 8002a1e:	4770      	bx	lr

08002a20 <_fini>:
 8002a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a22:	46c0      	nop			@ (mov r8, r8)
 8002a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a26:	bc08      	pop	{r3}
 8002a28:	469e      	mov	lr, r3
 8002a2a:	4770      	bx	lr
